
10_Serial_Print_Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800203c  0800203c  0000303c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020bc  080020bc  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  080020bc  080020bc  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020bc  080020bc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020bc  080020bc  000030bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020c0  080020c0  000030c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080020c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002120  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002120  00004210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006515  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001327  00000000  00000000  0000a59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000499  00000000  00000000  0000bed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015cdb  00000000  00000000  0000c371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078ba  00000000  00000000  0002204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007de8c  00000000  00000000  00029906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c6c  00000000  00000000  000a77d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000a9444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002024 	.word	0x08002024

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002024 	.word	0x08002024

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	@ 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f9d9 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f82d 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f891 	bl	8000280 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f865 	bl	800022c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  uint8_t MSG[35] = {'\0'};
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	f107 0308 	add.w	r3, r7, #8
 800016a:	221f      	movs	r2, #31
 800016c:	2100      	movs	r1, #0
 800016e:	4618      	mov	r0, r3
 8000170:	f001 fac8 	bl	8001704 <memset>
  uint8_t X = 0;
 8000174:	2300      	movs	r3, #0
 8000176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);
 800017a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	490a      	ldr	r1, [pc, #40]	@ (80001ac <main+0x60>)
 8000182:	4618      	mov	r0, r3
 8000184:	f001 fa9e 	bl	80016c4 <siprintf>
	HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 8000188:	1d39      	adds	r1, r7, #4
 800018a:	2364      	movs	r3, #100	@ 0x64
 800018c:	2223      	movs	r2, #35	@ 0x23
 800018e:	4808      	ldr	r0, [pc, #32]	@ (80001b0 <main+0x64>)
 8000190:	f001 f918 	bl	80013c4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000194:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000198:	f000 fa18 	bl	80005cc <HAL_Delay>
	X++;
 800019c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80001a0:	3301      	adds	r3, #1
 80001a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  {
 80001a6:	bf00      	nop
 80001a8:	e7e7      	b.n	800017a <main+0x2e>
 80001aa:	bf00      	nop
 80001ac:	0800203c 	.word	0x0800203c
 80001b0:	20000078 	.word	0x20000078

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	@ 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	@ 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 fa9e 	bl	8001704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001de:	2310      	movs	r3, #16
 80001e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001e2:	2300      	movs	r3, #0
 80001e4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e6:	f107 0318 	add.w	r3, r7, #24
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fc8a 	bl	8000b04 <HAL_RCC_OscConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001f6:	f000 f875 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fa:	230f      	movs	r3, #15
 80001fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fef8 	bl	8001008 <HAL_RCC_ClockConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800021e:	f000 f861 	bl	80002e4 <Error_Handler>
  }
}
 8000222:	bf00      	nop
 8000224:	3740      	adds	r7, #64	@ 0x40
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000230:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 8000232:	4a12      	ldr	r2, [pc, #72]	@ (800027c <MX_USART1_UART_Init+0x50>)
 8000234:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000236:	4b10      	ldr	r3, [pc, #64]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 8000238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800023c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800023e:	4b0e      	ldr	r3, [pc, #56]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000244:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800024a:	4b0b      	ldr	r3, [pc, #44]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000250:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 8000252:	220c      	movs	r2, #12
 8000254:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000256:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 800025e:	2200      	movs	r2, #0
 8000260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000262:	4805      	ldr	r0, [pc, #20]	@ (8000278 <MX_USART1_UART_Init+0x4c>)
 8000264:	f001 f85e 	bl	8001324 <HAL_UART_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800026e:	f000 f839 	bl	80002e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000078 	.word	0x20000078
 800027c:	40013800 	.word	0x40013800

08000280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <MX_GPIO_Init+0x5c>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a10      	ldr	r2, [pc, #64]	@ (80002dc <MX_GPIO_Init+0x5c>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <MX_GPIO_Init+0x5c>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2101      	movs	r1, #1
 80002b0:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <MX_GPIO_Init+0x60>)
 80002b2:	f000 fc0f 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002b6:	2301      	movs	r3, #1
 80002b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	2302      	movs	r3, #2
 80002c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	4619      	mov	r1, r3
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <MX_GPIO_Init+0x60>)
 80002ce:	f000 fa85 	bl	80007dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002d2:	bf00      	nop
 80002d4:	3718      	adds	r7, #24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010800 	.word	0x40010800

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <Error_Handler+0x8>

080002f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	@ (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	@ (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	@ (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	@ (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a1c      	ldr	r2, [pc, #112]	@ (80003e0 <HAL_UART_MspInit+0x8c>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d131      	bne.n	80003d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000374:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <HAL_UART_MspInit+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a1a      	ldr	r2, [pc, #104]	@ (80003e4 <HAL_UART_MspInit+0x90>)
 800037a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <HAL_UART_MspInit+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b15      	ldr	r3, [pc, #84]	@ (80003e4 <HAL_UART_MspInit+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a14      	ldr	r2, [pc, #80]	@ (80003e4 <HAL_UART_MspInit+0x90>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <HAL_UART_MspInit+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80003a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003aa:	2302      	movs	r3, #2
 80003ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ae:	2303      	movs	r3, #3
 80003b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	480b      	ldr	r0, [pc, #44]	@ (80003e8 <HAL_UART_MspInit+0x94>)
 80003ba:	f000 fa0f 	bl	80007dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	4805      	ldr	r0, [pc, #20]	@ (80003e8 <HAL_UART_MspInit+0x94>)
 80003d4:	f000 fa02 	bl	80007dc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80003d8:	bf00      	nop
 80003da:	3720      	adds	r7, #32
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40013800 	.word	0x40013800
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010800 	.word	0x40010800

080003ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <NMI_Handler+0x4>

080003f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <HardFault_Handler+0x4>

080003fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <MemManage_Handler+0x4>

08000404 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <BusFault_Handler+0x4>

0800040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <UsageFault_Handler+0x4>

08000414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043c:	f000 f8aa 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	@ (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4413      	add	r3, r2
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f001 f94e 	bl	8001714 <__errno>
 8000478:	4603      	mov	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	f04f 33ff 	mov.w	r3, #4294967295
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <_sbrk+0x64>)
 8000494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20002800 	.word	0x20002800
 80004a4:	00000400 	.word	0x00000400
 80004a8:	200000c0 	.word	0x200000c0
 80004ac:	20000210 	.word	0x20000210

080004b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004bc:	f7ff fff8 	bl	80004b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480b      	ldr	r0, [pc, #44]	@ (80004f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004c2:	490c      	ldr	r1, [pc, #48]	@ (80004f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004c4:	4a0c      	ldr	r2, [pc, #48]	@ (80004f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a09      	ldr	r2, [pc, #36]	@ (80004fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004d8:	4c09      	ldr	r4, [pc, #36]	@ (8000500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e6:	f001 f91b 	bl	8001720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff fe2f 	bl	800014c <main>
  bx lr
 80004ee:	4770      	bx	lr
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004f8:	080020c4 	.word	0x080020c4
  ldr r2, =_sbss
 80004fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000500:	20000210 	.word	0x20000210

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <HAL_Init+0x28>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	@ (8000530 <HAL_Init+0x28>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f92b 	bl	8000774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	200f      	movs	r0, #15
 8000520:	f000 f808 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f7ff fee4 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f935 	bl	80007c2 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f90b 	bl	800078a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	20000008 	.word	0x20000008
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b05      	ldr	r3, [pc, #20]	@ (80005b0 <HAL_IncTick+0x1c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <HAL_IncTick+0x20>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a03      	ldr	r2, [pc, #12]	@ (80005b4 <HAL_IncTick+0x20>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000008 	.word	0x20000008
 80005b4:	200000c4 	.word	0x200000c4

080005b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b02      	ldr	r3, [pc, #8]	@ (80005c8 <HAL_GetTick+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	200000c4 	.word	0x200000c4

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff fff0 	bl	80005b8 <HAL_GetTick>
 80005d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <HAL_Delay+0x44>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005f2:	bf00      	nop
 80005f4:	f7ff ffe0 	bl	80005b8 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8f7      	bhi.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000008 	.word	0x20000008

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	@ (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	@ (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	@ 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	@ 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000740:	d301      	bcc.n	8000746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2301      	movs	r3, #1
 8000744:	e00f      	b.n	8000766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	4a0a      	ldr	r2, [pc, #40]	@ (8000770 <SysTick_Config+0x40>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074e:	210f      	movs	r1, #15
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f7ff ff90 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <SysTick_Config+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	4b04      	ldr	r3, [pc, #16]	@ (8000770 <SysTick_Config+0x40>)
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010

08000774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff49 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079c:	f7ff ff5e 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff90 	bl	80006cc <NVIC_EncodePriority>
 80007ac:	4602      	mov	r2, r0
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff5f 	bl	8000678 <__NVIC_SetPriority>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffb0 	bl	8000730 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b08b      	sub	sp, #44	@ 0x2c
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ee:	e161      	b.n	8000ab4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007f0:	2201      	movs	r2, #1
 80007f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	4013      	ands	r3, r2
 8000802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	429a      	cmp	r2, r3
 800080a:	f040 8150 	bne.w	8000aae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	4a97      	ldr	r2, [pc, #604]	@ (8000a70 <HAL_GPIO_Init+0x294>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d05e      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 8000818:	4a95      	ldr	r2, [pc, #596]	@ (8000a70 <HAL_GPIO_Init+0x294>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d875      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 800081e:	4a95      	ldr	r2, [pc, #596]	@ (8000a74 <HAL_GPIO_Init+0x298>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d058      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 8000824:	4a93      	ldr	r2, [pc, #588]	@ (8000a74 <HAL_GPIO_Init+0x298>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d86f      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 800082a:	4a93      	ldr	r2, [pc, #588]	@ (8000a78 <HAL_GPIO_Init+0x29c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d052      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 8000830:	4a91      	ldr	r2, [pc, #580]	@ (8000a78 <HAL_GPIO_Init+0x29c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d869      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 8000836:	4a91      	ldr	r2, [pc, #580]	@ (8000a7c <HAL_GPIO_Init+0x2a0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d04c      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 800083c:	4a8f      	ldr	r2, [pc, #572]	@ (8000a7c <HAL_GPIO_Init+0x2a0>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d863      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 8000842:	4a8f      	ldr	r2, [pc, #572]	@ (8000a80 <HAL_GPIO_Init+0x2a4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d046      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
 8000848:	4a8d      	ldr	r2, [pc, #564]	@ (8000a80 <HAL_GPIO_Init+0x2a4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d85d      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 800084e:	2b12      	cmp	r3, #18
 8000850:	d82a      	bhi.n	80008a8 <HAL_GPIO_Init+0xcc>
 8000852:	2b12      	cmp	r3, #18
 8000854:	d859      	bhi.n	800090a <HAL_GPIO_Init+0x12e>
 8000856:	a201      	add	r2, pc, #4	@ (adr r2, 800085c <HAL_GPIO_Init+0x80>)
 8000858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085c:	080008d7 	.word	0x080008d7
 8000860:	080008b1 	.word	0x080008b1
 8000864:	080008c3 	.word	0x080008c3
 8000868:	08000905 	.word	0x08000905
 800086c:	0800090b 	.word	0x0800090b
 8000870:	0800090b 	.word	0x0800090b
 8000874:	0800090b 	.word	0x0800090b
 8000878:	0800090b 	.word	0x0800090b
 800087c:	0800090b 	.word	0x0800090b
 8000880:	0800090b 	.word	0x0800090b
 8000884:	0800090b 	.word	0x0800090b
 8000888:	0800090b 	.word	0x0800090b
 800088c:	0800090b 	.word	0x0800090b
 8000890:	0800090b 	.word	0x0800090b
 8000894:	0800090b 	.word	0x0800090b
 8000898:	0800090b 	.word	0x0800090b
 800089c:	0800090b 	.word	0x0800090b
 80008a0:	080008b9 	.word	0x080008b9
 80008a4:	080008cd 	.word	0x080008cd
 80008a8:	4a76      	ldr	r2, [pc, #472]	@ (8000a84 <HAL_GPIO_Init+0x2a8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d013      	beq.n	80008d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ae:	e02c      	b.n	800090a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	623b      	str	r3, [r7, #32]
          break;
 80008b6:	e029      	b.n	800090c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	3304      	adds	r3, #4
 80008be:	623b      	str	r3, [r7, #32]
          break;
 80008c0:	e024      	b.n	800090c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	3308      	adds	r3, #8
 80008c8:	623b      	str	r3, [r7, #32]
          break;
 80008ca:	e01f      	b.n	800090c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	330c      	adds	r3, #12
 80008d2:	623b      	str	r3, [r7, #32]
          break;
 80008d4:	e01a      	b.n	800090c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008de:	2304      	movs	r3, #4
 80008e0:	623b      	str	r3, [r7, #32]
          break;
 80008e2:	e013      	b.n	800090c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d105      	bne.n	80008f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008ec:	2308      	movs	r3, #8
 80008ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	611a      	str	r2, [r3, #16]
          break;
 80008f6:	e009      	b.n	800090c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008f8:	2308      	movs	r3, #8
 80008fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	615a      	str	r2, [r3, #20]
          break;
 8000902:	e003      	b.n	800090c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
          break;
 8000908:	e000      	b.n	800090c <HAL_GPIO_Init+0x130>
          break;
 800090a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	2bff      	cmp	r3, #255	@ 0xff
 8000910:	d801      	bhi.n	8000916 <HAL_GPIO_Init+0x13a>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	e001      	b.n	800091a <HAL_GPIO_Init+0x13e>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3304      	adds	r3, #4
 800091a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	2bff      	cmp	r3, #255	@ 0xff
 8000920:	d802      	bhi.n	8000928 <HAL_GPIO_Init+0x14c>
 8000922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	e002      	b.n	800092e <HAL_GPIO_Init+0x152>
 8000928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092a:	3b08      	subs	r3, #8
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	210f      	movs	r1, #15
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	401a      	ands	r2, r3
 8000940:	6a39      	ldr	r1, [r7, #32]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	fa01 f303 	lsl.w	r3, r1, r3
 8000948:	431a      	orrs	r2, r3
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 80a9 	beq.w	8000aae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800095c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a88 <HAL_GPIO_Init+0x2ac>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a49      	ldr	r2, [pc, #292]	@ (8000a88 <HAL_GPIO_Init+0x2ac>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b47      	ldr	r3, [pc, #284]	@ (8000a88 <HAL_GPIO_Init+0x2ac>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000974:	4a45      	ldr	r2, [pc, #276]	@ (8000a8c <HAL_GPIO_Init+0x2b0>)
 8000976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a90 <HAL_GPIO_Init+0x2b4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d00d      	beq.n	80009bc <HAL_GPIO_Init+0x1e0>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a3c      	ldr	r2, [pc, #240]	@ (8000a94 <HAL_GPIO_Init+0x2b8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d007      	beq.n	80009b8 <HAL_GPIO_Init+0x1dc>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a3b      	ldr	r2, [pc, #236]	@ (8000a98 <HAL_GPIO_Init+0x2bc>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d101      	bne.n	80009b4 <HAL_GPIO_Init+0x1d8>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e004      	b.n	80009be <HAL_GPIO_Init+0x1e2>
 80009b4:	2303      	movs	r3, #3
 80009b6:	e002      	b.n	80009be <HAL_GPIO_Init+0x1e2>
 80009b8:	2301      	movs	r3, #1
 80009ba:	e000      	b.n	80009be <HAL_GPIO_Init+0x1e2>
 80009bc:	2300      	movs	r3, #0
 80009be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009c0:	f002 0203 	and.w	r2, r2, #3
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	4093      	lsls	r3, r2
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ce:	492f      	ldr	r1, [pc, #188]	@ (8000a8c <HAL_GPIO_Init+0x2b0>)
 80009d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	3302      	adds	r3, #2
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d006      	beq.n	80009f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009e8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	492b      	ldr	r1, [pc, #172]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	608b      	str	r3, [r1, #8]
 80009f4:	e006      	b.n	8000a04 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009f6:	4b29      	ldr	r3, [pc, #164]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	4927      	ldr	r1, [pc, #156]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a00:	4013      	ands	r3, r2
 8000a02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d006      	beq.n	8000a1e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a10:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a12:	68da      	ldr	r2, [r3, #12]
 8000a14:	4921      	ldr	r1, [pc, #132]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	60cb      	str	r3, [r1, #12]
 8000a1c:	e006      	b.n	8000a2c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a20:	68da      	ldr	r2, [r3, #12]
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	491d      	ldr	r1, [pc, #116]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	4917      	ldr	r1, [pc, #92]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	604b      	str	r3, [r1, #4]
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4913      	ldr	r1, [pc, #76]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d01f      	beq.n	8000aa0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	490d      	ldr	r1, [pc, #52]	@ (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	600b      	str	r3, [r1, #0]
 8000a6c:	e01f      	b.n	8000aae <HAL_GPIO_Init+0x2d2>
 8000a6e:	bf00      	nop
 8000a70:	10320000 	.word	0x10320000
 8000a74:	10310000 	.word	0x10310000
 8000a78:	10220000 	.word	0x10220000
 8000a7c:	10210000 	.word	0x10210000
 8000a80:	10120000 	.word	0x10120000
 8000a84:	10110000 	.word	0x10110000
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	40010800 	.word	0x40010800
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	40011000 	.word	0x40011000
 8000a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <HAL_GPIO_Init+0x2f4>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4909      	ldr	r1, [pc, #36]	@ (8000ad0 <HAL_GPIO_Init+0x2f4>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aba:	fa22 f303 	lsr.w	r3, r2, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f47f ae96 	bne.w	80007f0 <HAL_GPIO_Init+0x14>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	372c      	adds	r7, #44	@ 0x2c
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000af0:	e003      	b.n	8000afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	611a      	str	r2, [r3, #16]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e272      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 8087 	beq.w	8000c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b24:	4b92      	ldr	r3, [pc, #584]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 030c 	and.w	r3, r3, #12
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d00c      	beq.n	8000b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b30:	4b8f      	ldr	r3, [pc, #572]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 030c 	and.w	r3, r3, #12
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d112      	bne.n	8000b62 <HAL_RCC_OscConfig+0x5e>
 8000b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b48:	d10b      	bne.n	8000b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4a:	4b89      	ldr	r3, [pc, #548]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d06c      	beq.n	8000c30 <HAL_RCC_OscConfig+0x12c>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d168      	bne.n	8000c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e24c      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b6a:	d106      	bne.n	8000b7a <HAL_RCC_OscConfig+0x76>
 8000b6c:	4b80      	ldr	r3, [pc, #512]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a7f      	ldr	r2, [pc, #508]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	e02e      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x98>
 8000b82:	4b7b      	ldr	r3, [pc, #492]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a7a      	ldr	r2, [pc, #488]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b78      	ldr	r3, [pc, #480]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a77      	ldr	r2, [pc, #476]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e01d      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_RCC_OscConfig+0xbc>
 8000ba6:	4b72      	ldr	r3, [pc, #456]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a71      	ldr	r2, [pc, #452]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	4b6f      	ldr	r3, [pc, #444]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a6e      	ldr	r2, [pc, #440]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e00b      	b.n	8000bd8 <HAL_RCC_OscConfig+0xd4>
 8000bc0:	4b6b      	ldr	r3, [pc, #428]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b68      	ldr	r3, [pc, #416]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a67      	ldr	r2, [pc, #412]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d013      	beq.n	8000c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fcea 	bl	80005b8 <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be8:	f7ff fce6 	bl	80005b8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b64      	cmp	r3, #100	@ 0x64
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e200      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfa:	4b5d      	ldr	r3, [pc, #372]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f0      	beq.n	8000be8 <HAL_RCC_OscConfig+0xe4>
 8000c06:	e014      	b.n	8000c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fcd6 	bl	80005b8 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fcd2 	bl	80005b8 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	@ 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e1ec      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c22:	4b53      	ldr	r3, [pc, #332]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f0      	bne.n	8000c10 <HAL_RCC_OscConfig+0x10c>
 8000c2e:	e000      	b.n	8000c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d063      	beq.n	8000d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00b      	beq.n	8000c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c4a:	4b49      	ldr	r3, [pc, #292]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d11c      	bne.n	8000c90 <HAL_RCC_OscConfig+0x18c>
 8000c56:	4b46      	ldr	r3, [pc, #280]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d116      	bne.n	8000c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c62:	4b43      	ldr	r3, [pc, #268]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <HAL_RCC_OscConfig+0x176>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e1c0      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4939      	ldr	r1, [pc, #228]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8e:	e03a      	b.n	8000d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d020      	beq.n	8000cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c98:	4b36      	ldr	r3, [pc, #216]	@ (8000d74 <HAL_RCC_OscConfig+0x270>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9e:	f7ff fc8b 	bl	80005b8 <HAL_GetTick>
 8000ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ca6:	f7ff fc87 	bl	80005b8 <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e1a1      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f0      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4927      	ldr	r1, [pc, #156]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	600b      	str	r3, [r1, #0]
 8000cd8:	e015      	b.n	8000d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cda:	4b26      	ldr	r3, [pc, #152]	@ (8000d74 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc6a 	bl	80005b8 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fc66 	bl	80005b8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e180      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d03a      	beq.n	8000d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d019      	beq.n	8000d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d20:	f7ff fc4a 	bl	80005b8 <HAL_GetTick>
 8000d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d28:	f7ff fc46 	bl	80005b8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e160      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f0      	beq.n	8000d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d46:	2001      	movs	r0, #1
 8000d48:	f000 face 	bl	80012e8 <RCC_Delay>
 8000d4c:	e01c      	b.n	8000d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_RCC_OscConfig+0x274>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d54:	f7ff fc30 	bl	80005b8 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5a:	e00f      	b.n	8000d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc2c 	bl	80005b8 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d908      	bls.n	8000d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e146      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000
 8000d74:	42420000 	.word	0x42420000
 8000d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d7c:	4b92      	ldr	r3, [pc, #584]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1e9      	bne.n	8000d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 80a6 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10d      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b88      	ldr	r3, [pc, #544]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a87      	ldr	r2, [pc, #540]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b85      	ldr	r3, [pc, #532]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc2:	4b82      	ldr	r3, [pc, #520]	@ (8000fcc <HAL_RCC_OscConfig+0x4c8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d118      	bne.n	8000e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dce:	4b7f      	ldr	r3, [pc, #508]	@ (8000fcc <HAL_RCC_OscConfig+0x4c8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8000fcc <HAL_RCC_OscConfig+0x4c8>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dda:	f7ff fbed 	bl	80005b8 <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de2:	f7ff fbe9 	bl	80005b8 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b64      	cmp	r3, #100	@ 0x64
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e103      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	4b75      	ldr	r3, [pc, #468]	@ (8000fcc <HAL_RCC_OscConfig+0x4c8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d106      	bne.n	8000e16 <HAL_RCC_OscConfig+0x312>
 8000e08:	4b6f      	ldr	r3, [pc, #444]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6213      	str	r3, [r2, #32]
 8000e14:	e02d      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x334>
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	4a69      	ldr	r2, [pc, #420]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	f023 0301 	bic.w	r3, r3, #1
 8000e28:	6213      	str	r3, [r2, #32]
 8000e2a:	4b67      	ldr	r3, [pc, #412]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	4a66      	ldr	r2, [pc, #408]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	f023 0304 	bic.w	r3, r3, #4
 8000e34:	6213      	str	r3, [r2, #32]
 8000e36:	e01c      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d10c      	bne.n	8000e5a <HAL_RCC_OscConfig+0x356>
 8000e40:	4b61      	ldr	r3, [pc, #388]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	4a60      	ldr	r2, [pc, #384]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6213      	str	r3, [r2, #32]
 8000e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	4a5d      	ldr	r2, [pc, #372]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6213      	str	r3, [r2, #32]
 8000e58:	e00b      	b.n	8000e72 <HAL_RCC_OscConfig+0x36e>
 8000e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	6213      	str	r3, [r2, #32]
 8000e66:	4b58      	ldr	r3, [pc, #352]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	4a57      	ldr	r2, [pc, #348]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	f023 0304 	bic.w	r3, r3, #4
 8000e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d015      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fb9d 	bl	80005b8 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	e00a      	b.n	8000e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fb99 	bl	80005b8 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e0b1      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e98:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ee      	beq.n	8000e82 <HAL_RCC_OscConfig+0x37e>
 8000ea4:	e014      	b.n	8000ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fb87 	bl	80005b8 <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fb83 	bl	80005b8 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e09b      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec4:	4b40      	ldr	r3, [pc, #256]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1ee      	bne.n	8000eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d105      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8087 	beq.w	8000ffa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eec:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d061      	beq.n	8000fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d146      	bne.n	8000f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f00:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <HAL_RCC_OscConfig+0x4cc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fb57 	bl	80005b8 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fb53 	bl	80005b8 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e06d      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f20:	4b29      	ldr	r3, [pc, #164]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f34:	d108      	bne.n	8000f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f36:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	4921      	ldr	r1, [pc, #132]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	4313      	orrs	r3, r2
 8000f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f48:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a19      	ldr	r1, [r3, #32]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	491b      	ldr	r1, [pc, #108]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f60:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <HAL_RCC_OscConfig+0x4cc>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fb27 	bl	80005b8 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f6e:	f7ff fb23 	bl	80005b8 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e03d      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x46a>
 8000f8c:	e035      	b.n	8000ffa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <HAL_RCC_OscConfig+0x4cc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fb10 	bl	80005b8 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9c:	f7ff fb0c 	bl	80005b8 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e026      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x498>
 8000fba:	e01e      	b.n	8000ffa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e019      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40007000 	.word	0x40007000
 8000fd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_RCC_OscConfig+0x500>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d001      	beq.n	8000ffa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0d0      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800101c:	4b6a      	ldr	r3, [pc, #424]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d910      	bls.n	800104c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4b67      	ldr	r3, [pc, #412]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 0207 	bic.w	r2, r3, #7
 8001032:	4965      	ldr	r1, [pc, #404]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b63      	ldr	r3, [pc, #396]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0b8      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a58      	ldr	r2, [pc, #352]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800106e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800107c:	4b53      	ldr	r3, [pc, #332]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001088:	4b50      	ldr	r3, [pc, #320]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	494d      	ldr	r1, [pc, #308]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d040      	beq.n	8001128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b47      	ldr	r3, [pc, #284]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d115      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e07f      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c6:	4b41      	ldr	r3, [pc, #260]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e073      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b3d      	ldr	r3, [pc, #244]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e06b      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e6:	4b39      	ldr	r3, [pc, #228]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f023 0203 	bic.w	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4936      	ldr	r1, [pc, #216]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f8:	f7ff fa5e 	bl	80005b8 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff fa5a 	bl	80005b8 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e053      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 020c 	and.w	r2, r3, #12
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	429a      	cmp	r2, r3
 8001126:	d1eb      	bne.n	8001100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001128:	4b27      	ldr	r3, [pc, #156]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d210      	bcs.n	8001158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 0207 	bic.w	r2, r3, #7
 800113e:	4922      	ldr	r1, [pc, #136]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e032      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4916      	ldr	r1, [pc, #88]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	490e      	ldr	r1, [pc, #56]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f821 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	490a      	ldr	r1, [pc, #40]	@ (80011d0 <HAL_RCC_ClockConfig+0x1c8>)
 80011a8:	5ccb      	ldrb	r3, [r1, r3]
 80011aa:	fa22 f303 	lsr.w	r3, r2, r3
 80011ae:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <HAL_RCC_ClockConfig+0x1cc>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_RCC_ClockConfig+0x1d0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9bc 	bl	8000534 <HAL_InitTick>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	0800205c 	.word	0x0800205c
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <HAL_RCC_GetSysClockFreq+0x94>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d002      	beq.n	800120c <HAL_RCC_GetSysClockFreq+0x30>
 8001206:	2b08      	cmp	r3, #8
 8001208:	d003      	beq.n	8001212 <HAL_RCC_GetSysClockFreq+0x36>
 800120a:	e027      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x98>)
 800120e:	613b      	str	r3, [r7, #16]
      break;
 8001210:	e027      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	0c9b      	lsrs	r3, r3, #18
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <HAL_RCC_GetSysClockFreq+0x9c>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d010      	beq.n	800124c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_RCC_GetSysClockFreq+0x94>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	0c5b      	lsrs	r3, r3, #17
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	4a11      	ldr	r2, [pc, #68]	@ (800127c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x98>)
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e004      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	613b      	str	r3, [r7, #16]
      break;
 800125a:	e002      	b.n	8001262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x98>)
 800125e:	613b      	str	r3, [r7, #16]
      break;
 8001260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001262:	693b      	ldr	r3, [r7, #16]
}
 8001264:	4618      	mov	r0, r3
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	007a1200 	.word	0x007a1200
 8001278:	08002074 	.word	0x08002074
 800127c:	08002084 	.word	0x08002084
 8001280:	003d0900 	.word	0x003d0900

08001284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001288:	4b02      	ldr	r3, [pc, #8]	@ (8001294 <HAL_RCC_GetHCLKFreq+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000000 	.word	0x20000000

08001298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800129c:	f7ff fff2 	bl	8001284 <HAL_RCC_GetHCLKFreq>
 80012a0:	4602      	mov	r2, r0
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	4903      	ldr	r1, [pc, #12]	@ (80012bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ae:	5ccb      	ldrb	r3, [r1, r3]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	0800206c 	.word	0x0800206c

080012c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012c4:	f7ff ffde 	bl	8001284 <HAL_RCC_GetHCLKFreq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	0adb      	lsrs	r3, r3, #11
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	4903      	ldr	r1, [pc, #12]	@ (80012e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	0800206c 	.word	0x0800206c

080012e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <RCC_Delay+0x34>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <RCC_Delay+0x38>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	0a5b      	lsrs	r3, r3, #9
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001304:	bf00      	nop
  }
  while (Delay --);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	60fa      	str	r2, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f9      	bne.n	8001304 <RCC_Delay+0x1c>
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	20000000 	.word	0x20000000
 8001320:	10624dd3 	.word	0x10624dd3

08001324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e042      	b.n	80013bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff f802 	bl	8000354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2224      	movs	r2, #36	@ 0x24
 8001354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f91d 	bl	80015a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800137c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800138c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800139c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2220      	movs	r2, #32
 80013a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4613      	mov	r3, r2
 80013d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d16d      	bne.n	80014c0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <HAL_UART_Transmit+0x2c>
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e066      	b.n	80014c2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2221      	movs	r2, #33	@ 0x21
 80013fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001402:	f7ff f8d9 	bl	80005b8 <HAL_GetTick>
 8001406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	88fa      	ldrh	r2, [r7, #6]
 800140c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	88fa      	ldrh	r2, [r7, #6]
 8001412:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800141c:	d108      	bne.n	8001430 <HAL_UART_Transmit+0x6c>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d104      	bne.n	8001430 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	e003      	b.n	8001438 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001438:	e02a      	b.n	8001490 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2200      	movs	r2, #0
 8001442:	2180      	movs	r1, #128	@ 0x80
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 f840 	bl	80014ca <UART_WaitOnFlagUntilTimeout>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e036      	b.n	80014c2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10b      	bne.n	8001472 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	3302      	adds	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	e007      	b.n	8001482 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	781a      	ldrb	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	3301      	adds	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001494:	b29b      	uxth	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1cf      	bne.n	800143a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2200      	movs	r2, #0
 80014a2:	2140      	movs	r1, #64	@ 0x40
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f810 	bl	80014ca <UART_WaitOnFlagUntilTimeout>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e006      	b.n	80014c2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e000      	b.n	80014c2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80014c0:	2302      	movs	r3, #2
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b090      	sub	sp, #64	@ 0x40
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014da:	e050      	b.n	800157e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e2:	d04c      	beq.n	800157e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <UART_WaitOnFlagUntilTimeout+0x30>
 80014ea:	f7ff f865 	bl	80005b8 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d241      	bcs.n	800157e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	330c      	adds	r3, #12
 8001500:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001504:	e853 3f00 	ldrex	r3, [r3]
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001510:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	330c      	adds	r3, #12
 8001518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800151a:	637a      	str	r2, [r7, #52]	@ 0x34
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800151e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001522:	e841 2300 	strex	r3, r2, [r1]
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e5      	bne.n	80014fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3314      	adds	r3, #20
 8001534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	e853 3f00 	ldrex	r3, [r3]
 800153c:	613b      	str	r3, [r7, #16]
   return(result);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3314      	adds	r3, #20
 800154c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800154e:	623a      	str	r2, [r7, #32]
 8001550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001552:	69f9      	ldr	r1, [r7, #28]
 8001554:	6a3a      	ldr	r2, [r7, #32]
 8001556:	e841 2300 	strex	r3, r2, [r1]
 800155a:	61bb      	str	r3, [r7, #24]
   return(result);
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e5      	bne.n	800152e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2220      	movs	r2, #32
 8001566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e00f      	b.n	800159e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4013      	ands	r3, r2
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	429a      	cmp	r2, r3
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	429a      	cmp	r2, r3
 800159a:	d09f      	beq.n	80014dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3740      	adds	r7, #64	@ 0x40
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80015e2:	f023 030c 	bic.w	r3, r3, #12
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a2c      	ldr	r2, [pc, #176]	@ (80016bc <UART_SetConfig+0x114>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d103      	bne.n	8001618 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001610:	f7ff fe56 	bl	80012c0 <HAL_RCC_GetPCLK2Freq>
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	e002      	b.n	800161e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001618:	f7ff fe3e 	bl	8001298 <HAL_RCC_GetPCLK1Freq>
 800161c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	009a      	lsls	r2, r3, #2
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	4a22      	ldr	r2, [pc, #136]	@ (80016c0 <UART_SetConfig+0x118>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	0119      	lsls	r1, r3, #4
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009a      	lsls	r2, r3, #2
 8001648:	441a      	add	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fbb2 f2f3 	udiv	r2, r2, r3
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <UART_SetConfig+0x118>)
 8001656:	fba3 0302 	umull	r0, r3, r3, r2
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2064      	movs	r0, #100	@ 0x64
 800165e:	fb00 f303 	mul.w	r3, r0, r3
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	3332      	adds	r3, #50	@ 0x32
 8001668:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <UART_SetConfig+0x118>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001674:	4419      	add	r1, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009a      	lsls	r2, r3, #2
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fbb2 f2f3 	udiv	r2, r2, r3
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <UART_SetConfig+0x118>)
 800168e:	fba3 0302 	umull	r0, r3, r3, r2
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2064      	movs	r0, #100	@ 0x64
 8001696:	fb00 f303 	mul.w	r3, r0, r3
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	3332      	adds	r3, #50	@ 0x32
 80016a0:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <UART_SetConfig+0x118>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	f003 020f 	and.w	r2, r3, #15
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	440a      	add	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	51eb851f 	.word	0x51eb851f

080016c4 <siprintf>:
 80016c4:	b40e      	push	{r1, r2, r3}
 80016c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80016ca:	b500      	push	{lr}
 80016cc:	b09c      	sub	sp, #112	@ 0x70
 80016ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80016d0:	9002      	str	r0, [sp, #8]
 80016d2:	9006      	str	r0, [sp, #24]
 80016d4:	9107      	str	r1, [sp, #28]
 80016d6:	9104      	str	r1, [sp, #16]
 80016d8:	4808      	ldr	r0, [pc, #32]	@ (80016fc <siprintf+0x38>)
 80016da:	4909      	ldr	r1, [pc, #36]	@ (8001700 <siprintf+0x3c>)
 80016dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80016e0:	9105      	str	r1, [sp, #20]
 80016e2:	6800      	ldr	r0, [r0, #0]
 80016e4:	a902      	add	r1, sp, #8
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	f000 f992 	bl	8001a10 <_svfiprintf_r>
 80016ec:	2200      	movs	r2, #0
 80016ee:	9b02      	ldr	r3, [sp, #8]
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	b01c      	add	sp, #112	@ 0x70
 80016f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80016f8:	b003      	add	sp, #12
 80016fa:	4770      	bx	lr
 80016fc:	2000000c 	.word	0x2000000c
 8001700:	ffff0208 	.word	0xffff0208

08001704 <memset>:
 8001704:	4603      	mov	r3, r0
 8001706:	4402      	add	r2, r0
 8001708:	4293      	cmp	r3, r2
 800170a:	d100      	bne.n	800170e <memset+0xa>
 800170c:	4770      	bx	lr
 800170e:	f803 1b01 	strb.w	r1, [r3], #1
 8001712:	e7f9      	b.n	8001708 <memset+0x4>

08001714 <__errno>:
 8001714:	4b01      	ldr	r3, [pc, #4]	@ (800171c <__errno+0x8>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000000c 	.word	0x2000000c

08001720 <__libc_init_array>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	2600      	movs	r6, #0
 8001724:	4d0c      	ldr	r5, [pc, #48]	@ (8001758 <__libc_init_array+0x38>)
 8001726:	4c0d      	ldr	r4, [pc, #52]	@ (800175c <__libc_init_array+0x3c>)
 8001728:	1b64      	subs	r4, r4, r5
 800172a:	10a4      	asrs	r4, r4, #2
 800172c:	42a6      	cmp	r6, r4
 800172e:	d109      	bne.n	8001744 <__libc_init_array+0x24>
 8001730:	f000 fc78 	bl	8002024 <_init>
 8001734:	2600      	movs	r6, #0
 8001736:	4d0a      	ldr	r5, [pc, #40]	@ (8001760 <__libc_init_array+0x40>)
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <__libc_init_array+0x44>)
 800173a:	1b64      	subs	r4, r4, r5
 800173c:	10a4      	asrs	r4, r4, #2
 800173e:	42a6      	cmp	r6, r4
 8001740:	d105      	bne.n	800174e <__libc_init_array+0x2e>
 8001742:	bd70      	pop	{r4, r5, r6, pc}
 8001744:	f855 3b04 	ldr.w	r3, [r5], #4
 8001748:	4798      	blx	r3
 800174a:	3601      	adds	r6, #1
 800174c:	e7ee      	b.n	800172c <__libc_init_array+0xc>
 800174e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001752:	4798      	blx	r3
 8001754:	3601      	adds	r6, #1
 8001756:	e7f2      	b.n	800173e <__libc_init_array+0x1e>
 8001758:	080020bc 	.word	0x080020bc
 800175c:	080020bc 	.word	0x080020bc
 8001760:	080020bc 	.word	0x080020bc
 8001764:	080020c0 	.word	0x080020c0

08001768 <__retarget_lock_acquire_recursive>:
 8001768:	4770      	bx	lr

0800176a <__retarget_lock_release_recursive>:
 800176a:	4770      	bx	lr

0800176c <_free_r>:
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4605      	mov	r5, r0
 8001770:	2900      	cmp	r1, #0
 8001772:	d040      	beq.n	80017f6 <_free_r+0x8a>
 8001774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001778:	1f0c      	subs	r4, r1, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	bfb8      	it	lt
 800177e:	18e4      	addlt	r4, r4, r3
 8001780:	f000 f8de 	bl	8001940 <__malloc_lock>
 8001784:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <_free_r+0x8c>)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	b933      	cbnz	r3, 8001798 <_free_r+0x2c>
 800178a:	6063      	str	r3, [r4, #4]
 800178c:	6014      	str	r4, [r2, #0]
 800178e:	4628      	mov	r0, r5
 8001790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001794:	f000 b8da 	b.w	800194c <__malloc_unlock>
 8001798:	42a3      	cmp	r3, r4
 800179a:	d908      	bls.n	80017ae <_free_r+0x42>
 800179c:	6820      	ldr	r0, [r4, #0]
 800179e:	1821      	adds	r1, r4, r0
 80017a0:	428b      	cmp	r3, r1
 80017a2:	bf01      	itttt	eq
 80017a4:	6819      	ldreq	r1, [r3, #0]
 80017a6:	685b      	ldreq	r3, [r3, #4]
 80017a8:	1809      	addeq	r1, r1, r0
 80017aa:	6021      	streq	r1, [r4, #0]
 80017ac:	e7ed      	b.n	800178a <_free_r+0x1e>
 80017ae:	461a      	mov	r2, r3
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	b10b      	cbz	r3, 80017b8 <_free_r+0x4c>
 80017b4:	42a3      	cmp	r3, r4
 80017b6:	d9fa      	bls.n	80017ae <_free_r+0x42>
 80017b8:	6811      	ldr	r1, [r2, #0]
 80017ba:	1850      	adds	r0, r2, r1
 80017bc:	42a0      	cmp	r0, r4
 80017be:	d10b      	bne.n	80017d8 <_free_r+0x6c>
 80017c0:	6820      	ldr	r0, [r4, #0]
 80017c2:	4401      	add	r1, r0
 80017c4:	1850      	adds	r0, r2, r1
 80017c6:	4283      	cmp	r3, r0
 80017c8:	6011      	str	r1, [r2, #0]
 80017ca:	d1e0      	bne.n	800178e <_free_r+0x22>
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	4408      	add	r0, r1
 80017d2:	6010      	str	r0, [r2, #0]
 80017d4:	6053      	str	r3, [r2, #4]
 80017d6:	e7da      	b.n	800178e <_free_r+0x22>
 80017d8:	d902      	bls.n	80017e0 <_free_r+0x74>
 80017da:	230c      	movs	r3, #12
 80017dc:	602b      	str	r3, [r5, #0]
 80017de:	e7d6      	b.n	800178e <_free_r+0x22>
 80017e0:	6820      	ldr	r0, [r4, #0]
 80017e2:	1821      	adds	r1, r4, r0
 80017e4:	428b      	cmp	r3, r1
 80017e6:	bf01      	itttt	eq
 80017e8:	6819      	ldreq	r1, [r3, #0]
 80017ea:	685b      	ldreq	r3, [r3, #4]
 80017ec:	1809      	addeq	r1, r1, r0
 80017ee:	6021      	streq	r1, [r4, #0]
 80017f0:	6063      	str	r3, [r4, #4]
 80017f2:	6054      	str	r4, [r2, #4]
 80017f4:	e7cb      	b.n	800178e <_free_r+0x22>
 80017f6:	bd38      	pop	{r3, r4, r5, pc}
 80017f8:	2000020c 	.word	0x2000020c

080017fc <sbrk_aligned>:
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	4e0f      	ldr	r6, [pc, #60]	@ (800183c <sbrk_aligned+0x40>)
 8001800:	460c      	mov	r4, r1
 8001802:	6831      	ldr	r1, [r6, #0]
 8001804:	4605      	mov	r5, r0
 8001806:	b911      	cbnz	r1, 800180e <sbrk_aligned+0x12>
 8001808:	f000 fbaa 	bl	8001f60 <_sbrk_r>
 800180c:	6030      	str	r0, [r6, #0]
 800180e:	4621      	mov	r1, r4
 8001810:	4628      	mov	r0, r5
 8001812:	f000 fba5 	bl	8001f60 <_sbrk_r>
 8001816:	1c43      	adds	r3, r0, #1
 8001818:	d103      	bne.n	8001822 <sbrk_aligned+0x26>
 800181a:	f04f 34ff 	mov.w	r4, #4294967295
 800181e:	4620      	mov	r0, r4
 8001820:	bd70      	pop	{r4, r5, r6, pc}
 8001822:	1cc4      	adds	r4, r0, #3
 8001824:	f024 0403 	bic.w	r4, r4, #3
 8001828:	42a0      	cmp	r0, r4
 800182a:	d0f8      	beq.n	800181e <sbrk_aligned+0x22>
 800182c:	1a21      	subs	r1, r4, r0
 800182e:	4628      	mov	r0, r5
 8001830:	f000 fb96 	bl	8001f60 <_sbrk_r>
 8001834:	3001      	adds	r0, #1
 8001836:	d1f2      	bne.n	800181e <sbrk_aligned+0x22>
 8001838:	e7ef      	b.n	800181a <sbrk_aligned+0x1e>
 800183a:	bf00      	nop
 800183c:	20000208 	.word	0x20000208

08001840 <_malloc_r>:
 8001840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001844:	1ccd      	adds	r5, r1, #3
 8001846:	f025 0503 	bic.w	r5, r5, #3
 800184a:	3508      	adds	r5, #8
 800184c:	2d0c      	cmp	r5, #12
 800184e:	bf38      	it	cc
 8001850:	250c      	movcc	r5, #12
 8001852:	2d00      	cmp	r5, #0
 8001854:	4606      	mov	r6, r0
 8001856:	db01      	blt.n	800185c <_malloc_r+0x1c>
 8001858:	42a9      	cmp	r1, r5
 800185a:	d904      	bls.n	8001866 <_malloc_r+0x26>
 800185c:	230c      	movs	r3, #12
 800185e:	6033      	str	r3, [r6, #0]
 8001860:	2000      	movs	r0, #0
 8001862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001866:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800193c <_malloc_r+0xfc>
 800186a:	f000 f869 	bl	8001940 <__malloc_lock>
 800186e:	f8d8 3000 	ldr.w	r3, [r8]
 8001872:	461c      	mov	r4, r3
 8001874:	bb44      	cbnz	r4, 80018c8 <_malloc_r+0x88>
 8001876:	4629      	mov	r1, r5
 8001878:	4630      	mov	r0, r6
 800187a:	f7ff ffbf 	bl	80017fc <sbrk_aligned>
 800187e:	1c43      	adds	r3, r0, #1
 8001880:	4604      	mov	r4, r0
 8001882:	d158      	bne.n	8001936 <_malloc_r+0xf6>
 8001884:	f8d8 4000 	ldr.w	r4, [r8]
 8001888:	4627      	mov	r7, r4
 800188a:	2f00      	cmp	r7, #0
 800188c:	d143      	bne.n	8001916 <_malloc_r+0xd6>
 800188e:	2c00      	cmp	r4, #0
 8001890:	d04b      	beq.n	800192a <_malloc_r+0xea>
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	4639      	mov	r1, r7
 8001896:	4630      	mov	r0, r6
 8001898:	eb04 0903 	add.w	r9, r4, r3
 800189c:	f000 fb60 	bl	8001f60 <_sbrk_r>
 80018a0:	4581      	cmp	r9, r0
 80018a2:	d142      	bne.n	800192a <_malloc_r+0xea>
 80018a4:	6821      	ldr	r1, [r4, #0]
 80018a6:	4630      	mov	r0, r6
 80018a8:	1a6d      	subs	r5, r5, r1
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7ff ffa6 	bl	80017fc <sbrk_aligned>
 80018b0:	3001      	adds	r0, #1
 80018b2:	d03a      	beq.n	800192a <_malloc_r+0xea>
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	442b      	add	r3, r5
 80018b8:	6023      	str	r3, [r4, #0]
 80018ba:	f8d8 3000 	ldr.w	r3, [r8]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	bb62      	cbnz	r2, 800191c <_malloc_r+0xdc>
 80018c2:	f8c8 7000 	str.w	r7, [r8]
 80018c6:	e00f      	b.n	80018e8 <_malloc_r+0xa8>
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	1b52      	subs	r2, r2, r5
 80018cc:	d420      	bmi.n	8001910 <_malloc_r+0xd0>
 80018ce:	2a0b      	cmp	r2, #11
 80018d0:	d917      	bls.n	8001902 <_malloc_r+0xc2>
 80018d2:	1961      	adds	r1, r4, r5
 80018d4:	42a3      	cmp	r3, r4
 80018d6:	6025      	str	r5, [r4, #0]
 80018d8:	bf18      	it	ne
 80018da:	6059      	strne	r1, [r3, #4]
 80018dc:	6863      	ldr	r3, [r4, #4]
 80018de:	bf08      	it	eq
 80018e0:	f8c8 1000 	streq.w	r1, [r8]
 80018e4:	5162      	str	r2, [r4, r5]
 80018e6:	604b      	str	r3, [r1, #4]
 80018e8:	4630      	mov	r0, r6
 80018ea:	f000 f82f 	bl	800194c <__malloc_unlock>
 80018ee:	f104 000b 	add.w	r0, r4, #11
 80018f2:	1d23      	adds	r3, r4, #4
 80018f4:	f020 0007 	bic.w	r0, r0, #7
 80018f8:	1ac2      	subs	r2, r0, r3
 80018fa:	bf1c      	itt	ne
 80018fc:	1a1b      	subne	r3, r3, r0
 80018fe:	50a3      	strne	r3, [r4, r2]
 8001900:	e7af      	b.n	8001862 <_malloc_r+0x22>
 8001902:	6862      	ldr	r2, [r4, #4]
 8001904:	42a3      	cmp	r3, r4
 8001906:	bf0c      	ite	eq
 8001908:	f8c8 2000 	streq.w	r2, [r8]
 800190c:	605a      	strne	r2, [r3, #4]
 800190e:	e7eb      	b.n	80018e8 <_malloc_r+0xa8>
 8001910:	4623      	mov	r3, r4
 8001912:	6864      	ldr	r4, [r4, #4]
 8001914:	e7ae      	b.n	8001874 <_malloc_r+0x34>
 8001916:	463c      	mov	r4, r7
 8001918:	687f      	ldr	r7, [r7, #4]
 800191a:	e7b6      	b.n	800188a <_malloc_r+0x4a>
 800191c:	461a      	mov	r2, r3
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	42a3      	cmp	r3, r4
 8001922:	d1fb      	bne.n	800191c <_malloc_r+0xdc>
 8001924:	2300      	movs	r3, #0
 8001926:	6053      	str	r3, [r2, #4]
 8001928:	e7de      	b.n	80018e8 <_malloc_r+0xa8>
 800192a:	230c      	movs	r3, #12
 800192c:	4630      	mov	r0, r6
 800192e:	6033      	str	r3, [r6, #0]
 8001930:	f000 f80c 	bl	800194c <__malloc_unlock>
 8001934:	e794      	b.n	8001860 <_malloc_r+0x20>
 8001936:	6005      	str	r5, [r0, #0]
 8001938:	e7d6      	b.n	80018e8 <_malloc_r+0xa8>
 800193a:	bf00      	nop
 800193c:	2000020c 	.word	0x2000020c

08001940 <__malloc_lock>:
 8001940:	4801      	ldr	r0, [pc, #4]	@ (8001948 <__malloc_lock+0x8>)
 8001942:	f7ff bf11 	b.w	8001768 <__retarget_lock_acquire_recursive>
 8001946:	bf00      	nop
 8001948:	20000204 	.word	0x20000204

0800194c <__malloc_unlock>:
 800194c:	4801      	ldr	r0, [pc, #4]	@ (8001954 <__malloc_unlock+0x8>)
 800194e:	f7ff bf0c 	b.w	800176a <__retarget_lock_release_recursive>
 8001952:	bf00      	nop
 8001954:	20000204 	.word	0x20000204

08001958 <__ssputs_r>:
 8001958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800195c:	461f      	mov	r7, r3
 800195e:	688e      	ldr	r6, [r1, #8]
 8001960:	4682      	mov	sl, r0
 8001962:	42be      	cmp	r6, r7
 8001964:	460c      	mov	r4, r1
 8001966:	4690      	mov	r8, r2
 8001968:	680b      	ldr	r3, [r1, #0]
 800196a:	d82d      	bhi.n	80019c8 <__ssputs_r+0x70>
 800196c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001970:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001974:	d026      	beq.n	80019c4 <__ssputs_r+0x6c>
 8001976:	6965      	ldr	r5, [r4, #20]
 8001978:	6909      	ldr	r1, [r1, #16]
 800197a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800197e:	eba3 0901 	sub.w	r9, r3, r1
 8001982:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001986:	1c7b      	adds	r3, r7, #1
 8001988:	444b      	add	r3, r9
 800198a:	106d      	asrs	r5, r5, #1
 800198c:	429d      	cmp	r5, r3
 800198e:	bf38      	it	cc
 8001990:	461d      	movcc	r5, r3
 8001992:	0553      	lsls	r3, r2, #21
 8001994:	d527      	bpl.n	80019e6 <__ssputs_r+0x8e>
 8001996:	4629      	mov	r1, r5
 8001998:	f7ff ff52 	bl	8001840 <_malloc_r>
 800199c:	4606      	mov	r6, r0
 800199e:	b360      	cbz	r0, 80019fa <__ssputs_r+0xa2>
 80019a0:	464a      	mov	r2, r9
 80019a2:	6921      	ldr	r1, [r4, #16]
 80019a4:	f000 fafa 	bl	8001f9c <memcpy>
 80019a8:	89a3      	ldrh	r3, [r4, #12]
 80019aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80019ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019b2:	81a3      	strh	r3, [r4, #12]
 80019b4:	6126      	str	r6, [r4, #16]
 80019b6:	444e      	add	r6, r9
 80019b8:	6026      	str	r6, [r4, #0]
 80019ba:	463e      	mov	r6, r7
 80019bc:	6165      	str	r5, [r4, #20]
 80019be:	eba5 0509 	sub.w	r5, r5, r9
 80019c2:	60a5      	str	r5, [r4, #8]
 80019c4:	42be      	cmp	r6, r7
 80019c6:	d900      	bls.n	80019ca <__ssputs_r+0x72>
 80019c8:	463e      	mov	r6, r7
 80019ca:	4632      	mov	r2, r6
 80019cc:	4641      	mov	r1, r8
 80019ce:	6820      	ldr	r0, [r4, #0]
 80019d0:	f000 faac 	bl	8001f2c <memmove>
 80019d4:	2000      	movs	r0, #0
 80019d6:	68a3      	ldr	r3, [r4, #8]
 80019d8:	1b9b      	subs	r3, r3, r6
 80019da:	60a3      	str	r3, [r4, #8]
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	4433      	add	r3, r6
 80019e0:	6023      	str	r3, [r4, #0]
 80019e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019e6:	462a      	mov	r2, r5
 80019e8:	f000 fae6 	bl	8001fb8 <_realloc_r>
 80019ec:	4606      	mov	r6, r0
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d1e0      	bne.n	80019b4 <__ssputs_r+0x5c>
 80019f2:	4650      	mov	r0, sl
 80019f4:	6921      	ldr	r1, [r4, #16]
 80019f6:	f7ff feb9 	bl	800176c <_free_r>
 80019fa:	230c      	movs	r3, #12
 80019fc:	f8ca 3000 	str.w	r3, [sl]
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	f04f 30ff 	mov.w	r0, #4294967295
 8001a06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a0a:	81a3      	strh	r3, [r4, #12]
 8001a0c:	e7e9      	b.n	80019e2 <__ssputs_r+0x8a>
	...

08001a10 <_svfiprintf_r>:
 8001a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a14:	4698      	mov	r8, r3
 8001a16:	898b      	ldrh	r3, [r1, #12]
 8001a18:	4607      	mov	r7, r0
 8001a1a:	061b      	lsls	r3, r3, #24
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	b09d      	sub	sp, #116	@ 0x74
 8001a22:	d510      	bpl.n	8001a46 <_svfiprintf_r+0x36>
 8001a24:	690b      	ldr	r3, [r1, #16]
 8001a26:	b973      	cbnz	r3, 8001a46 <_svfiprintf_r+0x36>
 8001a28:	2140      	movs	r1, #64	@ 0x40
 8001a2a:	f7ff ff09 	bl	8001840 <_malloc_r>
 8001a2e:	6028      	str	r0, [r5, #0]
 8001a30:	6128      	str	r0, [r5, #16]
 8001a32:	b930      	cbnz	r0, 8001a42 <_svfiprintf_r+0x32>
 8001a34:	230c      	movs	r3, #12
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	b01d      	add	sp, #116	@ 0x74
 8001a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a42:	2340      	movs	r3, #64	@ 0x40
 8001a44:	616b      	str	r3, [r5, #20]
 8001a46:	2300      	movs	r3, #0
 8001a48:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a4a:	2320      	movs	r3, #32
 8001a4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001a50:	2330      	movs	r3, #48	@ 0x30
 8001a52:	f04f 0901 	mov.w	r9, #1
 8001a56:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001bf4 <_svfiprintf_r+0x1e4>
 8001a5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001a62:	4623      	mov	r3, r4
 8001a64:	469a      	mov	sl, r3
 8001a66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a6a:	b10a      	cbz	r2, 8001a70 <_svfiprintf_r+0x60>
 8001a6c:	2a25      	cmp	r2, #37	@ 0x25
 8001a6e:	d1f9      	bne.n	8001a64 <_svfiprintf_r+0x54>
 8001a70:	ebba 0b04 	subs.w	fp, sl, r4
 8001a74:	d00b      	beq.n	8001a8e <_svfiprintf_r+0x7e>
 8001a76:	465b      	mov	r3, fp
 8001a78:	4622      	mov	r2, r4
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	f7ff ff6b 	bl	8001958 <__ssputs_r>
 8001a82:	3001      	adds	r0, #1
 8001a84:	f000 80a7 	beq.w	8001bd6 <_svfiprintf_r+0x1c6>
 8001a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001a8a:	445a      	add	r2, fp
 8001a8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 809f 	beq.w	8001bd6 <_svfiprintf_r+0x1c6>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001aa2:	f10a 0a01 	add.w	sl, sl, #1
 8001aa6:	9304      	str	r3, [sp, #16]
 8001aa8:	9307      	str	r3, [sp, #28]
 8001aaa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001aae:	931a      	str	r3, [sp, #104]	@ 0x68
 8001ab0:	4654      	mov	r4, sl
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ab8:	484e      	ldr	r0, [pc, #312]	@ (8001bf4 <_svfiprintf_r+0x1e4>)
 8001aba:	f000 fa61 	bl	8001f80 <memchr>
 8001abe:	9a04      	ldr	r2, [sp, #16]
 8001ac0:	b9d8      	cbnz	r0, 8001afa <_svfiprintf_r+0xea>
 8001ac2:	06d0      	lsls	r0, r2, #27
 8001ac4:	bf44      	itt	mi
 8001ac6:	2320      	movmi	r3, #32
 8001ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001acc:	0711      	lsls	r1, r2, #28
 8001ace:	bf44      	itt	mi
 8001ad0:	232b      	movmi	r3, #43	@ 0x2b
 8001ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8001ada:	2b2a      	cmp	r3, #42	@ 0x2a
 8001adc:	d015      	beq.n	8001b0a <_svfiprintf_r+0xfa>
 8001ade:	4654      	mov	r4, sl
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f04f 0c0a 	mov.w	ip, #10
 8001ae6:	9a07      	ldr	r2, [sp, #28]
 8001ae8:	4621      	mov	r1, r4
 8001aea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001aee:	3b30      	subs	r3, #48	@ 0x30
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	d94b      	bls.n	8001b8c <_svfiprintf_r+0x17c>
 8001af4:	b1b0      	cbz	r0, 8001b24 <_svfiprintf_r+0x114>
 8001af6:	9207      	str	r2, [sp, #28]
 8001af8:	e014      	b.n	8001b24 <_svfiprintf_r+0x114>
 8001afa:	eba0 0308 	sub.w	r3, r0, r8
 8001afe:	fa09 f303 	lsl.w	r3, r9, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	46a2      	mov	sl, r4
 8001b06:	9304      	str	r3, [sp, #16]
 8001b08:	e7d2      	b.n	8001ab0 <_svfiprintf_r+0xa0>
 8001b0a:	9b03      	ldr	r3, [sp, #12]
 8001b0c:	1d19      	adds	r1, r3, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	9103      	str	r1, [sp, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bfbb      	ittet	lt
 8001b16:	425b      	neglt	r3, r3
 8001b18:	f042 0202 	orrlt.w	r2, r2, #2
 8001b1c:	9307      	strge	r3, [sp, #28]
 8001b1e:	9307      	strlt	r3, [sp, #28]
 8001b20:	bfb8      	it	lt
 8001b22:	9204      	strlt	r2, [sp, #16]
 8001b24:	7823      	ldrb	r3, [r4, #0]
 8001b26:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b28:	d10a      	bne.n	8001b40 <_svfiprintf_r+0x130>
 8001b2a:	7863      	ldrb	r3, [r4, #1]
 8001b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b2e:	d132      	bne.n	8001b96 <_svfiprintf_r+0x186>
 8001b30:	9b03      	ldr	r3, [sp, #12]
 8001b32:	3402      	adds	r4, #2
 8001b34:	1d1a      	adds	r2, r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	9203      	str	r2, [sp, #12]
 8001b3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001b3e:	9305      	str	r3, [sp, #20]
 8001b40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001bf8 <_svfiprintf_r+0x1e8>
 8001b44:	2203      	movs	r2, #3
 8001b46:	4650      	mov	r0, sl
 8001b48:	7821      	ldrb	r1, [r4, #0]
 8001b4a:	f000 fa19 	bl	8001f80 <memchr>
 8001b4e:	b138      	cbz	r0, 8001b60 <_svfiprintf_r+0x150>
 8001b50:	2240      	movs	r2, #64	@ 0x40
 8001b52:	9b04      	ldr	r3, [sp, #16]
 8001b54:	eba0 000a 	sub.w	r0, r0, sl
 8001b58:	4082      	lsls	r2, r0
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	3401      	adds	r4, #1
 8001b5e:	9304      	str	r3, [sp, #16]
 8001b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b64:	2206      	movs	r2, #6
 8001b66:	4825      	ldr	r0, [pc, #148]	@ (8001bfc <_svfiprintf_r+0x1ec>)
 8001b68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001b6c:	f000 fa08 	bl	8001f80 <memchr>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d036      	beq.n	8001be2 <_svfiprintf_r+0x1d2>
 8001b74:	4b22      	ldr	r3, [pc, #136]	@ (8001c00 <_svfiprintf_r+0x1f0>)
 8001b76:	bb1b      	cbnz	r3, 8001bc0 <_svfiprintf_r+0x1b0>
 8001b78:	9b03      	ldr	r3, [sp, #12]
 8001b7a:	3307      	adds	r3, #7
 8001b7c:	f023 0307 	bic.w	r3, r3, #7
 8001b80:	3308      	adds	r3, #8
 8001b82:	9303      	str	r3, [sp, #12]
 8001b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001b86:	4433      	add	r3, r6
 8001b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b8a:	e76a      	b.n	8001a62 <_svfiprintf_r+0x52>
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	2001      	movs	r0, #1
 8001b90:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b94:	e7a8      	b.n	8001ae8 <_svfiprintf_r+0xd8>
 8001b96:	2300      	movs	r3, #0
 8001b98:	f04f 0c0a 	mov.w	ip, #10
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	3401      	adds	r4, #1
 8001ba0:	9305      	str	r3, [sp, #20]
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ba8:	3a30      	subs	r2, #48	@ 0x30
 8001baa:	2a09      	cmp	r2, #9
 8001bac:	d903      	bls.n	8001bb6 <_svfiprintf_r+0x1a6>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0c6      	beq.n	8001b40 <_svfiprintf_r+0x130>
 8001bb2:	9105      	str	r1, [sp, #20]
 8001bb4:	e7c4      	b.n	8001b40 <_svfiprintf_r+0x130>
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	2301      	movs	r3, #1
 8001bba:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bbe:	e7f0      	b.n	8001ba2 <_svfiprintf_r+0x192>
 8001bc0:	ab03      	add	r3, sp, #12
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	462a      	mov	r2, r5
 8001bc6:	4638      	mov	r0, r7
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <_svfiprintf_r+0x1f4>)
 8001bca:	a904      	add	r1, sp, #16
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	1c42      	adds	r2, r0, #1
 8001bd2:	4606      	mov	r6, r0
 8001bd4:	d1d6      	bne.n	8001b84 <_svfiprintf_r+0x174>
 8001bd6:	89ab      	ldrh	r3, [r5, #12]
 8001bd8:	065b      	lsls	r3, r3, #25
 8001bda:	f53f af2d 	bmi.w	8001a38 <_svfiprintf_r+0x28>
 8001bde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001be0:	e72c      	b.n	8001a3c <_svfiprintf_r+0x2c>
 8001be2:	ab03      	add	r3, sp, #12
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	462a      	mov	r2, r5
 8001be8:	4638      	mov	r0, r7
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <_svfiprintf_r+0x1f4>)
 8001bec:	a904      	add	r1, sp, #16
 8001bee:	f000 f87d 	bl	8001cec <_printf_i>
 8001bf2:	e7ed      	b.n	8001bd0 <_svfiprintf_r+0x1c0>
 8001bf4:	08002086 	.word	0x08002086
 8001bf8:	0800208c 	.word	0x0800208c
 8001bfc:	08002090 	.word	0x08002090
 8001c00:	00000000 	.word	0x00000000
 8001c04:	08001959 	.word	0x08001959

08001c08 <_printf_common>:
 8001c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c0c:	4616      	mov	r6, r2
 8001c0e:	4698      	mov	r8, r3
 8001c10:	688a      	ldr	r2, [r1, #8]
 8001c12:	690b      	ldr	r3, [r1, #16]
 8001c14:	4607      	mov	r7, r0
 8001c16:	4293      	cmp	r3, r2
 8001c18:	bfb8      	it	lt
 8001c1a:	4613      	movlt	r3, r2
 8001c1c:	6033      	str	r3, [r6, #0]
 8001c1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001c22:	460c      	mov	r4, r1
 8001c24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001c28:	b10a      	cbz	r2, 8001c2e <_printf_common+0x26>
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	6033      	str	r3, [r6, #0]
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	0699      	lsls	r1, r3, #26
 8001c32:	bf42      	ittt	mi
 8001c34:	6833      	ldrmi	r3, [r6, #0]
 8001c36:	3302      	addmi	r3, #2
 8001c38:	6033      	strmi	r3, [r6, #0]
 8001c3a:	6825      	ldr	r5, [r4, #0]
 8001c3c:	f015 0506 	ands.w	r5, r5, #6
 8001c40:	d106      	bne.n	8001c50 <_printf_common+0x48>
 8001c42:	f104 0a19 	add.w	sl, r4, #25
 8001c46:	68e3      	ldr	r3, [r4, #12]
 8001c48:	6832      	ldr	r2, [r6, #0]
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	42ab      	cmp	r3, r5
 8001c4e:	dc2b      	bgt.n	8001ca8 <_printf_common+0xa0>
 8001c50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	3b00      	subs	r3, #0
 8001c58:	bf18      	it	ne
 8001c5a:	2301      	movne	r3, #1
 8001c5c:	0692      	lsls	r2, r2, #26
 8001c5e:	d430      	bmi.n	8001cc2 <_printf_common+0xba>
 8001c60:	4641      	mov	r1, r8
 8001c62:	4638      	mov	r0, r7
 8001c64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001c68:	47c8      	blx	r9
 8001c6a:	3001      	adds	r0, #1
 8001c6c:	d023      	beq.n	8001cb6 <_printf_common+0xae>
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	6922      	ldr	r2, [r4, #16]
 8001c72:	f003 0306 	and.w	r3, r3, #6
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf14      	ite	ne
 8001c7a:	2500      	movne	r5, #0
 8001c7c:	6833      	ldreq	r3, [r6, #0]
 8001c7e:	f04f 0600 	mov.w	r6, #0
 8001c82:	bf08      	it	eq
 8001c84:	68e5      	ldreq	r5, [r4, #12]
 8001c86:	f104 041a 	add.w	r4, r4, #26
 8001c8a:	bf08      	it	eq
 8001c8c:	1aed      	subeq	r5, r5, r3
 8001c8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001c92:	bf08      	it	eq
 8001c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	bfc4      	itt	gt
 8001c9c:	1a9b      	subgt	r3, r3, r2
 8001c9e:	18ed      	addgt	r5, r5, r3
 8001ca0:	42b5      	cmp	r5, r6
 8001ca2:	d11a      	bne.n	8001cda <_printf_common+0xd2>
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	e008      	b.n	8001cba <_printf_common+0xb2>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	4652      	mov	r2, sl
 8001cac:	4641      	mov	r1, r8
 8001cae:	4638      	mov	r0, r7
 8001cb0:	47c8      	blx	r9
 8001cb2:	3001      	adds	r0, #1
 8001cb4:	d103      	bne.n	8001cbe <_printf_common+0xb6>
 8001cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cbe:	3501      	adds	r5, #1
 8001cc0:	e7c1      	b.n	8001c46 <_printf_common+0x3e>
 8001cc2:	2030      	movs	r0, #48	@ 0x30
 8001cc4:	18e1      	adds	r1, r4, r3
 8001cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001cd0:	4422      	add	r2, r4
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001cd8:	e7c2      	b.n	8001c60 <_printf_common+0x58>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	4622      	mov	r2, r4
 8001cde:	4641      	mov	r1, r8
 8001ce0:	4638      	mov	r0, r7
 8001ce2:	47c8      	blx	r9
 8001ce4:	3001      	adds	r0, #1
 8001ce6:	d0e6      	beq.n	8001cb6 <_printf_common+0xae>
 8001ce8:	3601      	adds	r6, #1
 8001cea:	e7d9      	b.n	8001ca0 <_printf_common+0x98>

08001cec <_printf_i>:
 8001cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf0:	7e0f      	ldrb	r7, [r1, #24]
 8001cf2:	4691      	mov	r9, r2
 8001cf4:	2f78      	cmp	r7, #120	@ 0x78
 8001cf6:	4680      	mov	r8, r0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	469a      	mov	sl, r3
 8001cfc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d02:	d807      	bhi.n	8001d14 <_printf_i+0x28>
 8001d04:	2f62      	cmp	r7, #98	@ 0x62
 8001d06:	d80a      	bhi.n	8001d1e <_printf_i+0x32>
 8001d08:	2f00      	cmp	r7, #0
 8001d0a:	f000 80d3 	beq.w	8001eb4 <_printf_i+0x1c8>
 8001d0e:	2f58      	cmp	r7, #88	@ 0x58
 8001d10:	f000 80ba 	beq.w	8001e88 <_printf_i+0x19c>
 8001d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001d1c:	e03a      	b.n	8001d94 <_printf_i+0xa8>
 8001d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001d22:	2b15      	cmp	r3, #21
 8001d24:	d8f6      	bhi.n	8001d14 <_printf_i+0x28>
 8001d26:	a101      	add	r1, pc, #4	@ (adr r1, 8001d2c <_printf_i+0x40>)
 8001d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d2c:	08001d85 	.word	0x08001d85
 8001d30:	08001d99 	.word	0x08001d99
 8001d34:	08001d15 	.word	0x08001d15
 8001d38:	08001d15 	.word	0x08001d15
 8001d3c:	08001d15 	.word	0x08001d15
 8001d40:	08001d15 	.word	0x08001d15
 8001d44:	08001d99 	.word	0x08001d99
 8001d48:	08001d15 	.word	0x08001d15
 8001d4c:	08001d15 	.word	0x08001d15
 8001d50:	08001d15 	.word	0x08001d15
 8001d54:	08001d15 	.word	0x08001d15
 8001d58:	08001e9b 	.word	0x08001e9b
 8001d5c:	08001dc3 	.word	0x08001dc3
 8001d60:	08001e55 	.word	0x08001e55
 8001d64:	08001d15 	.word	0x08001d15
 8001d68:	08001d15 	.word	0x08001d15
 8001d6c:	08001ebd 	.word	0x08001ebd
 8001d70:	08001d15 	.word	0x08001d15
 8001d74:	08001dc3 	.word	0x08001dc3
 8001d78:	08001d15 	.word	0x08001d15
 8001d7c:	08001d15 	.word	0x08001d15
 8001d80:	08001e5d 	.word	0x08001e5d
 8001d84:	6833      	ldr	r3, [r6, #0]
 8001d86:	1d1a      	adds	r2, r3, #4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6032      	str	r2, [r6, #0]
 8001d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d94:	2301      	movs	r3, #1
 8001d96:	e09e      	b.n	8001ed6 <_printf_i+0x1ea>
 8001d98:	6833      	ldr	r3, [r6, #0]
 8001d9a:	6820      	ldr	r0, [r4, #0]
 8001d9c:	1d19      	adds	r1, r3, #4
 8001d9e:	6031      	str	r1, [r6, #0]
 8001da0:	0606      	lsls	r6, r0, #24
 8001da2:	d501      	bpl.n	8001da8 <_printf_i+0xbc>
 8001da4:	681d      	ldr	r5, [r3, #0]
 8001da6:	e003      	b.n	8001db0 <_printf_i+0xc4>
 8001da8:	0645      	lsls	r5, r0, #25
 8001daa:	d5fb      	bpl.n	8001da4 <_printf_i+0xb8>
 8001dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001db0:	2d00      	cmp	r5, #0
 8001db2:	da03      	bge.n	8001dbc <_printf_i+0xd0>
 8001db4:	232d      	movs	r3, #45	@ 0x2d
 8001db6:	426d      	negs	r5, r5
 8001db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dbc:	230a      	movs	r3, #10
 8001dbe:	4859      	ldr	r0, [pc, #356]	@ (8001f24 <_printf_i+0x238>)
 8001dc0:	e011      	b.n	8001de6 <_printf_i+0xfa>
 8001dc2:	6821      	ldr	r1, [r4, #0]
 8001dc4:	6833      	ldr	r3, [r6, #0]
 8001dc6:	0608      	lsls	r0, r1, #24
 8001dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001dcc:	d402      	bmi.n	8001dd4 <_printf_i+0xe8>
 8001dce:	0649      	lsls	r1, r1, #25
 8001dd0:	bf48      	it	mi
 8001dd2:	b2ad      	uxthmi	r5, r5
 8001dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001dd6:	6033      	str	r3, [r6, #0]
 8001dd8:	bf14      	ite	ne
 8001dda:	230a      	movne	r3, #10
 8001ddc:	2308      	moveq	r3, #8
 8001dde:	4851      	ldr	r0, [pc, #324]	@ (8001f24 <_printf_i+0x238>)
 8001de0:	2100      	movs	r1, #0
 8001de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001de6:	6866      	ldr	r6, [r4, #4]
 8001de8:	2e00      	cmp	r6, #0
 8001dea:	bfa8      	it	ge
 8001dec:	6821      	ldrge	r1, [r4, #0]
 8001dee:	60a6      	str	r6, [r4, #8]
 8001df0:	bfa4      	itt	ge
 8001df2:	f021 0104 	bicge.w	r1, r1, #4
 8001df6:	6021      	strge	r1, [r4, #0]
 8001df8:	b90d      	cbnz	r5, 8001dfe <_printf_i+0x112>
 8001dfa:	2e00      	cmp	r6, #0
 8001dfc:	d04b      	beq.n	8001e96 <_printf_i+0x1aa>
 8001dfe:	4616      	mov	r6, r2
 8001e00:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e04:	fb03 5711 	mls	r7, r3, r1, r5
 8001e08:	5dc7      	ldrb	r7, [r0, r7]
 8001e0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e0e:	462f      	mov	r7, r5
 8001e10:	42bb      	cmp	r3, r7
 8001e12:	460d      	mov	r5, r1
 8001e14:	d9f4      	bls.n	8001e00 <_printf_i+0x114>
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d10b      	bne.n	8001e32 <_printf_i+0x146>
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	07df      	lsls	r7, r3, #31
 8001e1e:	d508      	bpl.n	8001e32 <_printf_i+0x146>
 8001e20:	6923      	ldr	r3, [r4, #16]
 8001e22:	6861      	ldr	r1, [r4, #4]
 8001e24:	4299      	cmp	r1, r3
 8001e26:	bfde      	ittt	le
 8001e28:	2330      	movle	r3, #48	@ 0x30
 8001e2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e32:	1b92      	subs	r2, r2, r6
 8001e34:	6122      	str	r2, [r4, #16]
 8001e36:	464b      	mov	r3, r9
 8001e38:	4621      	mov	r1, r4
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	f8cd a000 	str.w	sl, [sp]
 8001e40:	aa03      	add	r2, sp, #12
 8001e42:	f7ff fee1 	bl	8001c08 <_printf_common>
 8001e46:	3001      	adds	r0, #1
 8001e48:	d14a      	bne.n	8001ee0 <_printf_i+0x1f4>
 8001e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4e:	b004      	add	sp, #16
 8001e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	f043 0320 	orr.w	r3, r3, #32
 8001e5a:	6023      	str	r3, [r4, #0]
 8001e5c:	2778      	movs	r7, #120	@ 0x78
 8001e5e:	4832      	ldr	r0, [pc, #200]	@ (8001f28 <_printf_i+0x23c>)
 8001e60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	6831      	ldr	r1, [r6, #0]
 8001e68:	061f      	lsls	r7, r3, #24
 8001e6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001e6e:	d402      	bmi.n	8001e76 <_printf_i+0x18a>
 8001e70:	065f      	lsls	r7, r3, #25
 8001e72:	bf48      	it	mi
 8001e74:	b2ad      	uxthmi	r5, r5
 8001e76:	6031      	str	r1, [r6, #0]
 8001e78:	07d9      	lsls	r1, r3, #31
 8001e7a:	bf44      	itt	mi
 8001e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8001e80:	6023      	strmi	r3, [r4, #0]
 8001e82:	b11d      	cbz	r5, 8001e8c <_printf_i+0x1a0>
 8001e84:	2310      	movs	r3, #16
 8001e86:	e7ab      	b.n	8001de0 <_printf_i+0xf4>
 8001e88:	4826      	ldr	r0, [pc, #152]	@ (8001f24 <_printf_i+0x238>)
 8001e8a:	e7e9      	b.n	8001e60 <_printf_i+0x174>
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	f023 0320 	bic.w	r3, r3, #32
 8001e92:	6023      	str	r3, [r4, #0]
 8001e94:	e7f6      	b.n	8001e84 <_printf_i+0x198>
 8001e96:	4616      	mov	r6, r2
 8001e98:	e7bd      	b.n	8001e16 <_printf_i+0x12a>
 8001e9a:	6833      	ldr	r3, [r6, #0]
 8001e9c:	6825      	ldr	r5, [r4, #0]
 8001e9e:	1d18      	adds	r0, r3, #4
 8001ea0:	6961      	ldr	r1, [r4, #20]
 8001ea2:	6030      	str	r0, [r6, #0]
 8001ea4:	062e      	lsls	r6, r5, #24
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	d501      	bpl.n	8001eae <_printf_i+0x1c2>
 8001eaa:	6019      	str	r1, [r3, #0]
 8001eac:	e002      	b.n	8001eb4 <_printf_i+0x1c8>
 8001eae:	0668      	lsls	r0, r5, #25
 8001eb0:	d5fb      	bpl.n	8001eaa <_printf_i+0x1be>
 8001eb2:	8019      	strh	r1, [r3, #0]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	4616      	mov	r6, r2
 8001eb8:	6123      	str	r3, [r4, #16]
 8001eba:	e7bc      	b.n	8001e36 <_printf_i+0x14a>
 8001ebc:	6833      	ldr	r3, [r6, #0]
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	1d1a      	adds	r2, r3, #4
 8001ec2:	6032      	str	r2, [r6, #0]
 8001ec4:	681e      	ldr	r6, [r3, #0]
 8001ec6:	6862      	ldr	r2, [r4, #4]
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f000 f859 	bl	8001f80 <memchr>
 8001ece:	b108      	cbz	r0, 8001ed4 <_printf_i+0x1e8>
 8001ed0:	1b80      	subs	r0, r0, r6
 8001ed2:	6060      	str	r0, [r4, #4]
 8001ed4:	6863      	ldr	r3, [r4, #4]
 8001ed6:	6123      	str	r3, [r4, #16]
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ede:	e7aa      	b.n	8001e36 <_printf_i+0x14a>
 8001ee0:	4632      	mov	r2, r6
 8001ee2:	4649      	mov	r1, r9
 8001ee4:	4640      	mov	r0, r8
 8001ee6:	6923      	ldr	r3, [r4, #16]
 8001ee8:	47d0      	blx	sl
 8001eea:	3001      	adds	r0, #1
 8001eec:	d0ad      	beq.n	8001e4a <_printf_i+0x15e>
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	079b      	lsls	r3, r3, #30
 8001ef2:	d413      	bmi.n	8001f1c <_printf_i+0x230>
 8001ef4:	68e0      	ldr	r0, [r4, #12]
 8001ef6:	9b03      	ldr	r3, [sp, #12]
 8001ef8:	4298      	cmp	r0, r3
 8001efa:	bfb8      	it	lt
 8001efc:	4618      	movlt	r0, r3
 8001efe:	e7a6      	b.n	8001e4e <_printf_i+0x162>
 8001f00:	2301      	movs	r3, #1
 8001f02:	4632      	mov	r2, r6
 8001f04:	4649      	mov	r1, r9
 8001f06:	4640      	mov	r0, r8
 8001f08:	47d0      	blx	sl
 8001f0a:	3001      	adds	r0, #1
 8001f0c:	d09d      	beq.n	8001e4a <_printf_i+0x15e>
 8001f0e:	3501      	adds	r5, #1
 8001f10:	68e3      	ldr	r3, [r4, #12]
 8001f12:	9903      	ldr	r1, [sp, #12]
 8001f14:	1a5b      	subs	r3, r3, r1
 8001f16:	42ab      	cmp	r3, r5
 8001f18:	dcf2      	bgt.n	8001f00 <_printf_i+0x214>
 8001f1a:	e7eb      	b.n	8001ef4 <_printf_i+0x208>
 8001f1c:	2500      	movs	r5, #0
 8001f1e:	f104 0619 	add.w	r6, r4, #25
 8001f22:	e7f5      	b.n	8001f10 <_printf_i+0x224>
 8001f24:	08002097 	.word	0x08002097
 8001f28:	080020a8 	.word	0x080020a8

08001f2c <memmove>:
 8001f2c:	4288      	cmp	r0, r1
 8001f2e:	b510      	push	{r4, lr}
 8001f30:	eb01 0402 	add.w	r4, r1, r2
 8001f34:	d902      	bls.n	8001f3c <memmove+0x10>
 8001f36:	4284      	cmp	r4, r0
 8001f38:	4623      	mov	r3, r4
 8001f3a:	d807      	bhi.n	8001f4c <memmove+0x20>
 8001f3c:	1e43      	subs	r3, r0, #1
 8001f3e:	42a1      	cmp	r1, r4
 8001f40:	d008      	beq.n	8001f54 <memmove+0x28>
 8001f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001f4a:	e7f8      	b.n	8001f3e <memmove+0x12>
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	4402      	add	r2, r0
 8001f50:	428a      	cmp	r2, r1
 8001f52:	d100      	bne.n	8001f56 <memmove+0x2a>
 8001f54:	bd10      	pop	{r4, pc}
 8001f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f5e:	e7f7      	b.n	8001f50 <memmove+0x24>

08001f60 <_sbrk_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	2300      	movs	r3, #0
 8001f64:	4d05      	ldr	r5, [pc, #20]	@ (8001f7c <_sbrk_r+0x1c>)
 8001f66:	4604      	mov	r4, r0
 8001f68:	4608      	mov	r0, r1
 8001f6a:	602b      	str	r3, [r5, #0]
 8001f6c:	f7fe fa6a 	bl	8000444 <_sbrk>
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d102      	bne.n	8001f7a <_sbrk_r+0x1a>
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	b103      	cbz	r3, 8001f7a <_sbrk_r+0x1a>
 8001f78:	6023      	str	r3, [r4, #0]
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
 8001f7c:	20000200 	.word	0x20000200

08001f80 <memchr>:
 8001f80:	4603      	mov	r3, r0
 8001f82:	b510      	push	{r4, lr}
 8001f84:	b2c9      	uxtb	r1, r1
 8001f86:	4402      	add	r2, r0
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	d101      	bne.n	8001f92 <memchr+0x12>
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e003      	b.n	8001f9a <memchr+0x1a>
 8001f92:	7804      	ldrb	r4, [r0, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	428c      	cmp	r4, r1
 8001f98:	d1f6      	bne.n	8001f88 <memchr+0x8>
 8001f9a:	bd10      	pop	{r4, pc}

08001f9c <memcpy>:
 8001f9c:	440a      	add	r2, r1
 8001f9e:	4291      	cmp	r1, r2
 8001fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001fa4:	d100      	bne.n	8001fa8 <memcpy+0xc>
 8001fa6:	4770      	bx	lr
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fae:	4291      	cmp	r1, r2
 8001fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fb4:	d1f9      	bne.n	8001faa <memcpy+0xe>
 8001fb6:	bd10      	pop	{r4, pc}

08001fb8 <_realloc_r>:
 8001fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fbc:	4680      	mov	r8, r0
 8001fbe:	4615      	mov	r5, r2
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	b921      	cbnz	r1, 8001fce <_realloc_r+0x16>
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fca:	f7ff bc39 	b.w	8001840 <_malloc_r>
 8001fce:	b92a      	cbnz	r2, 8001fdc <_realloc_r+0x24>
 8001fd0:	f7ff fbcc 	bl	800176c <_free_r>
 8001fd4:	2400      	movs	r4, #0
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fdc:	f000 f81a 	bl	8002014 <_malloc_usable_size_r>
 8001fe0:	4285      	cmp	r5, r0
 8001fe2:	4606      	mov	r6, r0
 8001fe4:	d802      	bhi.n	8001fec <_realloc_r+0x34>
 8001fe6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001fea:	d8f4      	bhi.n	8001fd6 <_realloc_r+0x1e>
 8001fec:	4629      	mov	r1, r5
 8001fee:	4640      	mov	r0, r8
 8001ff0:	f7ff fc26 	bl	8001840 <_malloc_r>
 8001ff4:	4607      	mov	r7, r0
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d0ec      	beq.n	8001fd4 <_realloc_r+0x1c>
 8001ffa:	42b5      	cmp	r5, r6
 8001ffc:	462a      	mov	r2, r5
 8001ffe:	4621      	mov	r1, r4
 8002000:	bf28      	it	cs
 8002002:	4632      	movcs	r2, r6
 8002004:	f7ff ffca 	bl	8001f9c <memcpy>
 8002008:	4621      	mov	r1, r4
 800200a:	4640      	mov	r0, r8
 800200c:	f7ff fbae 	bl	800176c <_free_r>
 8002010:	463c      	mov	r4, r7
 8002012:	e7e0      	b.n	8001fd6 <_realloc_r+0x1e>

08002014 <_malloc_usable_size_r>:
 8002014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002018:	1f18      	subs	r0, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	bfbc      	itt	lt
 800201e:	580b      	ldrlt	r3, [r1, r0]
 8002020:	18c0      	addlt	r0, r0, r3
 8002022:	4770      	bx	lr

08002024 <_init>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr

08002030 <_fini>:
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	bf00      	nop
 8002034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002036:	bc08      	pop	{r3}
 8002038:	469e      	mov	lr, r3
 800203a:	4770      	bx	lr
