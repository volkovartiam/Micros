
31_Potentiometer_Reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002d88  08002d88  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc8  08002dc8  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002dc8  08002dc8  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dc8  08002dc8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc8  08002dc8  00003dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dcc  08002dcc  00003dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002dd0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08002ddc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002ddc  000040a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009524  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aae  00000000  00000000  0000d559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0000f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000864  00000000  00000000  0000fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e16  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c22d  00000000  00000000  00027162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ff9  00000000  00000000  0003338f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba388  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb4  00000000  00000000  000ba3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000bd080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d70 	.word	0x08002d70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002d70 	.word	0x08002d70

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  uint16_t AD_RES = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	80fb      	strh	r3, [r7, #6]

  HAL_Init();
 8000156:	f000 faa5 	bl	80006a4 <HAL_Init>
  SystemClock_Config();
 800015a:	f000 f829 	bl	80001b0 <SystemClock_Config>

  MX_GPIO_Init();
 800015e:	f000 f961 	bl	8000424 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000162:	f000 f881 	bl	8000268 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000166:	f000 f8bd 	bl	80002e4 <MX_TIM1_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800016a:	2100      	movs	r1, #0
 800016c:	480d      	ldr	r0, [pc, #52]	@ (80001a4 <main+0x58>)
 800016e:	f002 f869 	bl	8002244 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000172:	480d      	ldr	r0, [pc, #52]	@ (80001a8 <main+0x5c>)
 8000174:	f000 ff48 	bl	8001008 <HAL_ADCEx_Calibration_Start>

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000178:	480b      	ldr	r0, [pc, #44]	@ (80001a8 <main+0x5c>)
 800017a:	f000 fbf1 	bl	8000960 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 800017e:	2164      	movs	r1, #100	@ 0x64
 8000180:	4809      	ldr	r0, [pc, #36]	@ (80001a8 <main+0x5c>)
 8000182:	f000 fc9b 	bl	8000abc <HAL_ADC_PollForConversion>

	  AD_RES = HAL_ADC_GetValue(&hadc1);
 8000186:	4808      	ldr	r0, [pc, #32]	@ (80001a8 <main+0x5c>)
 8000188:	f000 fd9e 	bl	8000cc8 <HAL_ADC_GetValue>
 800018c:	4603      	mov	r3, r0
 800018e:	80fb      	strh	r3, [r7, #6]
	  TIM1->CCR1 = (AD_RES << 4);
 8000190:	88fb      	ldrh	r3, [r7, #6]
 8000192:	4a06      	ldr	r2, [pc, #24]	@ (80001ac <main+0x60>)
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	6353      	str	r3, [r2, #52]	@ 0x34
	  HAL_Delay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f000 fae5 	bl	8000768 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800019e:	bf00      	nop
 80001a0:	e7ea      	b.n	8000178 <main+0x2c>
 80001a2:	bf00      	nop
 80001a4:	20000058 	.word	0x20000058
 80001a8:	20000028 	.word	0x20000028
 80001ac:	40012c00 	.word	0x40012c00

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b094      	sub	sp, #80	@ 0x50
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001ba:	2228      	movs	r2, #40	@ 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fda9 	bl	8002d16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	f107 0314 	add.w	r3, r7, #20
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
 80001d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e0:	2301      	movs	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000200:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fa0c 	bl	8001624 <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000212:	f000 f929 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000216:	230f      	movs	r3, #15
 8000218:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000226:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fc78 	bl	8001b28 <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800023e:	f000 f913 	bl	8000468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000242:	2302      	movs	r3, #2
 8000244:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800024a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fde4 	bl	8001e1c <HAL_RCCEx_PeriphCLKConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800025a:	f000 f905 	bl	8000468 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3750      	adds	r7, #80	@ 0x50
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000278:	4b18      	ldr	r3, [pc, #96]	@ (80002dc <MX_ADC1_Init+0x74>)
 800027a:	4a19      	ldr	r2, [pc, #100]	@ (80002e0 <MX_ADC1_Init+0x78>)
 800027c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027e:	4b17      	ldr	r3, [pc, #92]	@ (80002dc <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000284:	4b15      	ldr	r3, [pc, #84]	@ (80002dc <MX_ADC1_Init+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028a:	4b14      	ldr	r3, [pc, #80]	@ (80002dc <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <MX_ADC1_Init+0x74>)
 8000292:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000298:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800029e:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <MX_ADC1_Init+0x74>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a4:	480d      	ldr	r0, [pc, #52]	@ (80002dc <MX_ADC1_Init+0x74>)
 80002a6:	f000 fa83 	bl	80007b0 <HAL_ADC_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f8da 	bl	8000468 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	@ (80002dc <MX_ADC1_Init+0x74>)
 80002c6:	f000 fd0b 	bl	8000ce0 <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f8ca 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000028 	.word	0x20000028
 80002e0:	40012400 	.word	0x40012400

080002e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b096      	sub	sp, #88	@ 0x58
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
 8000312:	615a      	str	r2, [r3, #20]
 8000314:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2220      	movs	r2, #32
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f002 fcfa 	bl	8002d16 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000322:	4b3e      	ldr	r3, [pc, #248]	@ (800041c <MX_TIM1_Init+0x138>)
 8000324:	4a3e      	ldr	r2, [pc, #248]	@ (8000420 <MX_TIM1_Init+0x13c>)
 8000326:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000328:	4b3c      	ldr	r3, [pc, #240]	@ (800041c <MX_TIM1_Init+0x138>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032e:	4b3b      	ldr	r3, [pc, #236]	@ (800041c <MX_TIM1_Init+0x138>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000334:	4b39      	ldr	r3, [pc, #228]	@ (800041c <MX_TIM1_Init+0x138>)
 8000336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800033a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033c:	4b37      	ldr	r3, [pc, #220]	@ (800041c <MX_TIM1_Init+0x138>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000342:	4b36      	ldr	r3, [pc, #216]	@ (800041c <MX_TIM1_Init+0x138>)
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000348:	4b34      	ldr	r3, [pc, #208]	@ (800041c <MX_TIM1_Init+0x138>)
 800034a:	2280      	movs	r2, #128	@ 0x80
 800034c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800034e:	4833      	ldr	r0, [pc, #204]	@ (800041c <MX_TIM1_Init+0x138>)
 8000350:	f001 fed0 	bl	80020f4 <HAL_TIM_Base_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800035a:	f000 f885 	bl	8000468 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000362:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000364:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000368:	4619      	mov	r1, r3
 800036a:	482c      	ldr	r0, [pc, #176]	@ (800041c <MX_TIM1_Init+0x138>)
 800036c:	f002 f8c8 	bl	8002500 <HAL_TIM_ConfigClockSource>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000376:	f000 f877 	bl	8000468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800037a:	4828      	ldr	r0, [pc, #160]	@ (800041c <MX_TIM1_Init+0x138>)
 800037c:	f001 ff09 	bl	8002192 <HAL_TIM_PWM_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000386:	f000 f86f 	bl	8000468 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038a:	2300      	movs	r3, #0
 800038c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038e:	2300      	movs	r3, #0
 8000390:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000392:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000396:	4619      	mov	r1, r3
 8000398:	4820      	ldr	r0, [pc, #128]	@ (800041c <MX_TIM1_Init+0x138>)
 800039a:	f002 fc13 	bl	8002bc4 <HAL_TIMEx_MasterConfigSynchronization>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003a4:	f000 f860 	bl	8000468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a8:	2360      	movs	r3, #96	@ 0x60
 80003aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b0:	2300      	movs	r3, #0
 80003b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003b4:	2300      	movs	r3, #0
 80003b6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b8:	2300      	movs	r3, #0
 80003ba:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003bc:	2300      	movs	r3, #0
 80003be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003c0:	2300      	movs	r3, #0
 80003c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003c8:	2200      	movs	r2, #0
 80003ca:	4619      	mov	r1, r3
 80003cc:	4813      	ldr	r0, [pc, #76]	@ (800041c <MX_TIM1_Init+0x138>)
 80003ce:	f001 ffd5 	bl	800237c <HAL_TIM_PWM_ConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80003d8:	f000 f846 	bl	8000468 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4807      	ldr	r0, [pc, #28]	@ (800041c <MX_TIM1_Init+0x138>)
 8000400:	f002 fc38 	bl	8002c74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800040a:	f000 f82d 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800040e:	4803      	ldr	r0, [pc, #12]	@ (800041c <MX_TIM1_Init+0x138>)
 8000410:	f000 f8bc 	bl	800058c <HAL_TIM_MspPostInit>

}
 8000414:	bf00      	nop
 8000416:	3758      	adds	r7, #88	@ 0x58
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000058 	.word	0x20000058
 8000420:	40012c00 	.word	0x40012c00

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800042a:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_GPIO_Init+0x40>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <MX_GPIO_Init+0x40>)
 8000430:	f043 0320 	orr.w	r3, r3, #32
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <MX_GPIO_Init+0x40>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0320 	and.w	r3, r3, #32
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <MX_GPIO_Init+0x40>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a07      	ldr	r2, [pc, #28]	@ (8000464 <MX_GPIO_Init+0x40>)
 8000448:	f043 0304 	orr.w	r3, r3, #4
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <MX_GPIO_Init+0x40>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0304 	and.w	r3, r3, #4
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <Error_Handler+0x8>

08000474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4b15      	ldr	r3, [pc, #84]	@ (80004d0 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a0e      	ldr	r2, [pc, #56]	@ (80004d0 <HAL_MspInit+0x5c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004aa:	4b0a      	ldr	r3, [pc, #40]	@ (80004d4 <HAL_MspInit+0x60>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	4a04      	ldr	r2, [pc, #16]	@ (80004d4 <HAL_MspInit+0x60>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a14      	ldr	r2, [pc, #80]	@ (8000544 <HAL_ADC_MspInit+0x6c>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d121      	bne.n	800053c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004f8:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <HAL_ADC_MspInit+0x70>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a12      	ldr	r2, [pc, #72]	@ (8000548 <HAL_ADC_MspInit+0x70>)
 80004fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <HAL_ADC_MspInit+0x70>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <HAL_ADC_MspInit+0x70>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <HAL_ADC_MspInit+0x70>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <HAL_ADC_MspInit+0x70>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000528:	2301      	movs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052c:	2303      	movs	r3, #3
 800052e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <HAL_ADC_MspInit+0x74>)
 8000538:	f000 fef8 	bl	800132c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40012400 	.word	0x40012400
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800

08000550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <HAL_TIM_Base_MspInit+0x34>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d10b      	bne.n	800057a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000562:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <HAL_TIM_Base_MspInit+0x38>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a08      	ldr	r2, [pc, #32]	@ (8000588 <HAL_TIM_Base_MspInit+0x38>)
 8000568:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <HAL_TIM_Base_MspInit+0x38>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40012c00 	.word	0x40012c00
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <HAL_TIM_MspPostInit+0x5c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d118      	bne.n	80005de <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <HAL_TIM_MspPostInit+0x60>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <HAL_TIM_MspPostInit+0x60>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_TIM_MspPostInit+0x60>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <HAL_TIM_MspPostInit+0x64>)
 80005da:	f000 fea7 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012c00 	.word	0x40012c00
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40010800 	.word	0x40010800

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <NMI_Handler+0x4>

080005fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <MemManage_Handler+0x4>

0800060c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <UsageFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000644:	f000 f874 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff fff8 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065e:	490c      	ldr	r1, [pc, #48]	@ (8000690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a09      	ldr	r2, [pc, #36]	@ (8000698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000674:	4c09      	ldr	r4, [pc, #36]	@ (800069c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f002 fb51 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fd61 	bl	800014c <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000694:	08002dd0 	.word	0x08002dd0
  ldr r2, =_sbss
 8000698:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800069c:	200000a4 	.word	0x200000a4

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 fe05 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff fed8 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fe0f 	bl	8001312 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 fde5 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	@ (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	200000a0 	.word	0x200000a0

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	200000a0 	.word	0x200000a0

08000768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff0 	bl	8000754 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffe0 	bl	8000754 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008

080007b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007b8:	2300      	movs	r3, #0
 80007ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e0be      	b.n	8000950 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d109      	bne.n	80007f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff fe72 	bl	80004d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 fbc5 	bl	8000f84 <ADC_ConversionStop_Disable>
 80007fa:	4603      	mov	r3, r0
 80007fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	2b00      	cmp	r3, #0
 8000808:	f040 8099 	bne.w	800093e <HAL_ADC_Init+0x18e>
 800080c:	7dfb      	ldrb	r3, [r7, #23]
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 8095 	bne.w	800093e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000818:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800081c:	f023 0302 	bic.w	r3, r3, #2
 8000820:	f043 0202 	orr.w	r2, r3, #2
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000830:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7b1b      	ldrb	r3, [r3, #12]
 8000836:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000838:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	4313      	orrs	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000848:	d003      	beq.n	8000852 <HAL_ADC_Init+0xa2>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d102      	bne.n	8000858 <HAL_ADC_Init+0xa8>
 8000852:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000856:	e000      	b.n	800085a <HAL_ADC_Init+0xaa>
 8000858:	2300      	movs	r3, #0
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	4313      	orrs	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7d1b      	ldrb	r3, [r3, #20]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d119      	bne.n	800089c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7b1b      	ldrb	r3, [r3, #12]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d109      	bne.n	8000884 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	3b01      	subs	r3, #1
 8000876:	035a      	lsls	r2, r3, #13
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	4313      	orrs	r3, r2
 800087c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	e00b      	b.n	800089c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000888:	f043 0220 	orr.w	r2, r3, #32
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000894:	f043 0201 	orr.w	r2, r3, #1
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	430a      	orrs	r2, r1
 80008ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	4b28      	ldr	r3, [pc, #160]	@ (8000958 <HAL_ADC_Init+0x1a8>)
 80008b8:	4013      	ands	r3, r2
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	6812      	ldr	r2, [r2, #0]
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008cc:	d003      	beq.n	80008d6 <HAL_ADC_Init+0x126>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d104      	bne.n	80008e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	691b      	ldr	r3, [r3, #16]
 80008da:	3b01      	subs	r3, #1
 80008dc:	051b      	lsls	r3, r3, #20
 80008de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	4b18      	ldr	r3, [pc, #96]	@ (800095c <HAL_ADC_Init+0x1ac>)
 80008fc:	4013      	ands	r3, r2
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	429a      	cmp	r2, r3
 8000902:	d10b      	bne.n	800091c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800090e:	f023 0303 	bic.w	r3, r3, #3
 8000912:	f043 0201 	orr.w	r2, r3, #1
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800091a:	e018      	b.n	800094e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000920:	f023 0312 	bic.w	r3, r3, #18
 8000924:	f043 0210 	orr.w	r2, r3, #16
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000930:	f043 0201 	orr.w	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800093c:	e007      	b.n	800094e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000942:	f043 0210 	orr.w	r2, r3, #16
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800094e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	ffe1f7fd 	.word	0xffe1f7fd
 800095c:	ff1f0efe 	.word	0xff1f0efe

08000960 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000972:	2b01      	cmp	r3, #1
 8000974:	d101      	bne.n	800097a <HAL_ADC_Start+0x1a>
 8000976:	2302      	movs	r3, #2
 8000978:	e098      	b.n	8000aac <HAL_ADC_Start+0x14c>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2201      	movs	r2, #1
 800097e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 faa4 	bl	8000ed0 <ADC_Enable>
 8000988:	4603      	mov	r3, r0
 800098a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b00      	cmp	r3, #0
 8000990:	f040 8087 	bne.w	8000aa2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800099c:	f023 0301 	bic.w	r3, r3, #1
 80009a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a41      	ldr	r2, [pc, #260]	@ (8000ab4 <HAL_ADC_Start+0x154>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d105      	bne.n	80009be <HAL_ADC_Start+0x5e>
 80009b2:	4b41      	ldr	r3, [pc, #260]	@ (8000ab8 <HAL_ADC_Start+0x158>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d115      	bne.n	80009ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d026      	beq.n	8000a26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009dc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80009e0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009e8:	e01d      	b.n	8000a26 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab8 <HAL_ADC_Start+0x158>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d004      	beq.n	8000a0a <HAL_ADC_Start+0xaa>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab4 <HAL_ADC_Start+0x154>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10d      	bne.n	8000a26 <HAL_ADC_Start+0xc6>
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab8 <HAL_ADC_Start+0x158>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d007      	beq.n	8000a26 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	f023 0206 	bic.w	r2, r3, #6
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a3e:	e002      	b.n	8000a46 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f06f 0202 	mvn.w	r2, #2
 8000a56:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000a62:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000a66:	d113      	bne.n	8000a90 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a6c:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <HAL_ADC_Start+0x154>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d105      	bne.n	8000a7e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <HAL_ADC_Start+0x158>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d108      	bne.n	8000a90 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	e00c      	b.n	8000aaa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	e003      	b.n	8000aaa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40012800 	.word	0x40012800
 8000ab8:	40012400 	.word	0x40012400

08000abc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ad2:	f7ff fe3f 	bl	8000754 <HAL_GetTick>
 8000ad6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00b      	beq.n	8000afe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aea:	f043 0220 	orr.w	r2, r3, #32
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e0d3      	b.n	8000ca6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d131      	bne.n	8000b70 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b12:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d12a      	bne.n	8000b70 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b1a:	e021      	b.n	8000b60 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b22:	d01d      	beq.n	8000b60 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <HAL_ADC_PollForConversion+0x7e>
 8000b2a:	f7ff fe13 	bl	8000754 <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d212      	bcs.n	8000b60 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10b      	bne.n	8000b60 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b4c:	f043 0204 	orr.w	r2, r3, #4
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e0a2      	b.n	8000ca6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0d6      	beq.n	8000b1c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b6e:	e070      	b.n	8000c52 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000b70:	4b4f      	ldr	r3, [pc, #316]	@ (8000cb0 <HAL_ADC_PollForConversion+0x1f4>)
 8000b72:	681c      	ldr	r4, [r3, #0]
 8000b74:	2002      	movs	r0, #2
 8000b76:	f001 fa07 	bl	8001f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6919      	ldr	r1, [r3, #16]
 8000b86:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb4 <HAL_ADC_PollForConversion+0x1f8>)
 8000b88:	400b      	ands	r3, r1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d118      	bne.n	8000bc0 <HAL_ADC_PollForConversion+0x104>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68d9      	ldr	r1, [r3, #12]
 8000b94:	4b48      	ldr	r3, [pc, #288]	@ (8000cb8 <HAL_ADC_PollForConversion+0x1fc>)
 8000b96:	400b      	ands	r3, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d111      	bne.n	8000bc0 <HAL_ADC_PollForConversion+0x104>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6919      	ldr	r1, [r3, #16]
 8000ba2:	4b46      	ldr	r3, [pc, #280]	@ (8000cbc <HAL_ADC_PollForConversion+0x200>)
 8000ba4:	400b      	ands	r3, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d108      	bne.n	8000bbc <HAL_ADC_PollForConversion+0x100>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68d9      	ldr	r1, [r3, #12]
 8000bb0:	4b43      	ldr	r3, [pc, #268]	@ (8000cc0 <HAL_ADC_PollForConversion+0x204>)
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <HAL_ADC_PollForConversion+0x100>
 8000bb8:	2314      	movs	r3, #20
 8000bba:	e020      	b.n	8000bfe <HAL_ADC_PollForConversion+0x142>
 8000bbc:	2329      	movs	r3, #41	@ 0x29
 8000bbe:	e01e      	b.n	8000bfe <HAL_ADC_PollForConversion+0x142>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6919      	ldr	r1, [r3, #16]
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8000cbc <HAL_ADC_PollForConversion+0x200>)
 8000bc8:	400b      	ands	r3, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d106      	bne.n	8000bdc <HAL_ADC_PollForConversion+0x120>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68d9      	ldr	r1, [r3, #12]
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc0 <HAL_ADC_PollForConversion+0x204>)
 8000bd6:	400b      	ands	r3, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00d      	beq.n	8000bf8 <HAL_ADC_PollForConversion+0x13c>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6919      	ldr	r1, [r3, #16]
 8000be2:	4b38      	ldr	r3, [pc, #224]	@ (8000cc4 <HAL_ADC_PollForConversion+0x208>)
 8000be4:	400b      	ands	r3, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d108      	bne.n	8000bfc <HAL_ADC_PollForConversion+0x140>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68d9      	ldr	r1, [r3, #12]
 8000bf0:	4b34      	ldr	r3, [pc, #208]	@ (8000cc4 <HAL_ADC_PollForConversion+0x208>)
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_ADC_PollForConversion+0x140>
 8000bf8:	2354      	movs	r3, #84	@ 0x54
 8000bfa:	e000      	b.n	8000bfe <HAL_ADC_PollForConversion+0x142>
 8000bfc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000bfe:	fb02 f303 	mul.w	r3, r2, r3
 8000c02:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c04:	e021      	b.n	8000c4a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0c:	d01a      	beq.n	8000c44 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d007      	beq.n	8000c24 <HAL_ADC_PollForConversion+0x168>
 8000c14:	f7ff fd9e 	bl	8000754 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d20f      	bcs.n	8000c44 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d90b      	bls.n	8000c44 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c30:	f043 0204 	orr.w	r2, r3, #4
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e030      	b.n	8000ca6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d8d9      	bhi.n	8000c06 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f06f 0212 	mvn.w	r2, #18
 8000c5a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c72:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c76:	d115      	bne.n	8000ca4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	24924924 	.word	0x24924924
 8000cb8:	00924924 	.word	0x00924924
 8000cbc:	12492492 	.word	0x12492492
 8000cc0:	00492492 	.word	0x00492492
 8000cc4:	00249249 	.word	0x00249249

08000cc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d101      	bne.n	8000d00 <HAL_ADC_ConfigChannel+0x20>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e0dc      	b.n	8000eba <HAL_ADC_ConfigChannel+0x1da>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b06      	cmp	r3, #6
 8000d0e:	d81c      	bhi.n	8000d4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	3b05      	subs	r3, #5
 8000d22:	221f      	movs	r2, #31
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	4019      	ands	r1, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	3b05      	subs	r3, #5
 8000d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d48:	e03c      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b0c      	cmp	r3, #12
 8000d50:	d81c      	bhi.n	8000d8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	3b23      	subs	r3, #35	@ 0x23
 8000d64:	221f      	movs	r2, #31
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	4019      	ands	r1, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3b23      	subs	r3, #35	@ 0x23
 8000d7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d8a:	e01b      	b.n	8000dc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3b41      	subs	r3, #65	@ 0x41
 8000d9e:	221f      	movs	r2, #31
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4019      	ands	r1, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	4613      	mov	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4413      	add	r3, r2
 8000db6:	3b41      	subs	r3, #65	@ 0x41
 8000db8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b09      	cmp	r3, #9
 8000dca:	d91c      	bls.n	8000e06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68d9      	ldr	r1, [r3, #12]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	3b1e      	subs	r3, #30
 8000dde:	2207      	movs	r2, #7
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4019      	ands	r1, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	6898      	ldr	r0, [r3, #8]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	3b1e      	subs	r3, #30
 8000df8:	fa00 f203 	lsl.w	r2, r0, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	430a      	orrs	r2, r1
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	e019      	b.n	8000e3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6919      	ldr	r1, [r3, #16]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	2207      	movs	r2, #7
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4019      	ands	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	6898      	ldr	r0, [r3, #8]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	d003      	beq.n	8000e4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e46:	2b11      	cmp	r3, #17
 8000e48:	d132      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec4 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d125      	bne.n	8000ea0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d126      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000e70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b10      	cmp	r3, #16
 8000e78:	d11a      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a13      	ldr	r2, [pc, #76]	@ (8000ecc <HAL_ADC_ConfigChannel+0x1ec>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	0c9a      	lsrs	r2, r3, #18
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e90:	e002      	b.n	8000e98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f9      	bne.n	8000e92 <HAL_ADC_ConfigChannel+0x1b2>
 8000e9e:	e007      	b.n	8000eb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea4:	f043 0220 	orr.w	r2, r3, #32
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40012400 	.word	0x40012400
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	431bde83 	.word	0x431bde83

08000ed0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d040      	beq.n	8000f70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f042 0201 	orr.w	r2, r2, #1
 8000efc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000efe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <ADC_Enable+0xac>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1f      	ldr	r2, [pc, #124]	@ (8000f80 <ADC_Enable+0xb0>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	0c9b      	lsrs	r3, r3, #18
 8000f0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f0c:	e002      	b.n	8000f14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f9      	bne.n	8000f0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f1a:	f7ff fc1b 	bl	8000754 <HAL_GetTick>
 8000f1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f20:	e01f      	b.n	8000f62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f22:	f7ff fc17 	bl	8000754 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d918      	bls.n	8000f62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d011      	beq.n	8000f62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f42:	f043 0210 	orr.w	r2, r3, #16
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e007      	b.n	8000f72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d1d8      	bne.n	8000f22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	431bde83 	.word	0x431bde83

08000f84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d12e      	bne.n	8000ffc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0201 	bic.w	r2, r2, #1
 8000fac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fae:	f7ff fbd1 	bl	8000754 <HAL_GetTick>
 8000fb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fb4:	e01b      	b.n	8000fee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fb6:	f7ff fbcd 	bl	8000754 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d914      	bls.n	8000fee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d10d      	bne.n	8000fee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd6:	f043 0210 	orr.w	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e007      	b.n	8000ffe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d0dc      	beq.n	8000fb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADCEx_Calibration_Start+0x1e>
 8001022:	2302      	movs	r3, #2
 8001024:	e097      	b.n	8001156 <HAL_ADCEx_Calibration_Start+0x14e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa8 	bl	8000f84 <ADC_ConversionStop_Disable>
 8001034:	4603      	mov	r3, r0
 8001036:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff49 	bl	8000ed0 <ADC_Enable>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2b00      	cmp	r3, #0
 8001046:	f040 8081 	bne.w	800114c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001052:	f023 0302 	bic.w	r3, r3, #2
 8001056:	f043 0202 	orr.w	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800105e:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <HAL_ADCEx_Calibration_Start+0x158>)
 8001060:	681c      	ldr	r4, [r3, #0]
 8001062:	2002      	movs	r0, #2
 8001064:	f000 ff90 	bl	8001f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8001068:	4603      	mov	r3, r0
 800106a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800106e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001070:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001072:	e002      	b.n	800107a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3b01      	subs	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f9      	bne.n	8001074 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0208 	orr.w	r2, r2, #8
 800108e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001090:	f7ff fb60 	bl	8000754 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001096:	e01b      	b.n	80010d0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001098:	f7ff fb5c 	bl	8000754 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b0a      	cmp	r3, #10
 80010a4:	d914      	bls.n	80010d0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00d      	beq.n	80010d0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b8:	f023 0312 	bic.w	r3, r3, #18
 80010bc:	f043 0210 	orr.w	r2, r3, #16
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e042      	b.n	8001156 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1dc      	bne.n	8001098 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f042 0204 	orr.w	r2, r2, #4
 80010ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80010ee:	f7ff fb31 	bl	8000754 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010f4:	e01b      	b.n	800112e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010f6:	f7ff fb2d 	bl	8000754 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b0a      	cmp	r3, #10
 8001102:	d914      	bls.n	800112e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00d      	beq.n	800112e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001116:	f023 0312 	bic.w	r3, r3, #18
 800111a:	f043 0210 	orr.w	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e013      	b.n	8001156 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1dc      	bne.n	80010f6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001140:	f023 0303 	bic.w	r3, r3, #3
 8001144:	f043 0201 	orr.w	r2, r3, #1
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001154:	7dfb      	ldrb	r3, [r7, #23]
}
 8001156:	4618      	mov	r0, r3
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff90 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff49 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff5e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffb0 	bl	8001280 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b08b      	sub	sp, #44	@ 0x2c
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e161      	b.n	8001604 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001340:	2201      	movs	r2, #1
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8150 	bne.w	80015fe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a97      	ldr	r2, [pc, #604]	@ (80015c0 <HAL_GPIO_Init+0x294>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d05e      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001368:	4a95      	ldr	r2, [pc, #596]	@ (80015c0 <HAL_GPIO_Init+0x294>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d875      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800136e:	4a95      	ldr	r2, [pc, #596]	@ (80015c4 <HAL_GPIO_Init+0x298>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d058      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001374:	4a93      	ldr	r2, [pc, #588]	@ (80015c4 <HAL_GPIO_Init+0x298>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d86f      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800137a:	4a93      	ldr	r2, [pc, #588]	@ (80015c8 <HAL_GPIO_Init+0x29c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d052      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001380:	4a91      	ldr	r2, [pc, #580]	@ (80015c8 <HAL_GPIO_Init+0x29c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d869      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 8001386:	4a91      	ldr	r2, [pc, #580]	@ (80015cc <HAL_GPIO_Init+0x2a0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d04c      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 800138c:	4a8f      	ldr	r2, [pc, #572]	@ (80015cc <HAL_GPIO_Init+0x2a0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d863      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 8001392:	4a8f      	ldr	r2, [pc, #572]	@ (80015d0 <HAL_GPIO_Init+0x2a4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d046      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
 8001398:	4a8d      	ldr	r2, [pc, #564]	@ (80015d0 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d85d      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d82a      	bhi.n	80013f8 <HAL_GPIO_Init+0xcc>
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d859      	bhi.n	800145a <HAL_GPIO_Init+0x12e>
 80013a6:	a201      	add	r2, pc, #4	@ (adr r2, 80013ac <HAL_GPIO_Init+0x80>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	08001427 	.word	0x08001427
 80013b0:	08001401 	.word	0x08001401
 80013b4:	08001413 	.word	0x08001413
 80013b8:	08001455 	.word	0x08001455
 80013bc:	0800145b 	.word	0x0800145b
 80013c0:	0800145b 	.word	0x0800145b
 80013c4:	0800145b 	.word	0x0800145b
 80013c8:	0800145b 	.word	0x0800145b
 80013cc:	0800145b 	.word	0x0800145b
 80013d0:	0800145b 	.word	0x0800145b
 80013d4:	0800145b 	.word	0x0800145b
 80013d8:	0800145b 	.word	0x0800145b
 80013dc:	0800145b 	.word	0x0800145b
 80013e0:	0800145b 	.word	0x0800145b
 80013e4:	0800145b 	.word	0x0800145b
 80013e8:	0800145b 	.word	0x0800145b
 80013ec:	0800145b 	.word	0x0800145b
 80013f0:	08001409 	.word	0x08001409
 80013f4:	0800141d 	.word	0x0800141d
 80013f8:	4a76      	ldr	r2, [pc, #472]	@ (80015d4 <HAL_GPIO_Init+0x2a8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fe:	e02c      	b.n	800145a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	623b      	str	r3, [r7, #32]
          break;
 8001406:	e029      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	3304      	adds	r3, #4
 800140e:	623b      	str	r3, [r7, #32]
          break;
 8001410:	e024      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	3308      	adds	r3, #8
 8001418:	623b      	str	r3, [r7, #32]
          break;
 800141a:	e01f      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	330c      	adds	r3, #12
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e01a      	b.n	800145c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142e:	2304      	movs	r3, #4
 8001430:	623b      	str	r3, [r7, #32]
          break;
 8001432:	e013      	b.n	800145c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	611a      	str	r2, [r3, #16]
          break;
 8001446:	e009      	b.n	800145c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	615a      	str	r2, [r3, #20]
          break;
 8001452:	e003      	b.n	800145c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e000      	b.n	800145c <HAL_GPIO_Init+0x130>
          break;
 800145a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2bff      	cmp	r3, #255	@ 0xff
 8001460:	d801      	bhi.n	8001466 <HAL_GPIO_Init+0x13a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	e001      	b.n	800146a <HAL_GPIO_Init+0x13e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3304      	adds	r3, #4
 800146a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2bff      	cmp	r3, #255	@ 0xff
 8001470:	d802      	bhi.n	8001478 <HAL_GPIO_Init+0x14c>
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	e002      	b.n	800147e <HAL_GPIO_Init+0x152>
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	3b08      	subs	r3, #8
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	210f      	movs	r1, #15
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	6a39      	ldr	r1, [r7, #32]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	431a      	orrs	r2, r3
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 80a9 	beq.w	80015fe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ac:	4b4a      	ldr	r3, [pc, #296]	@ (80015d8 <HAL_GPIO_Init+0x2ac>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_GPIO_Init+0x2ac>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b47      	ldr	r3, [pc, #284]	@ (80015d8 <HAL_GPIO_Init+0x2ac>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c4:	4a45      	ldr	r2, [pc, #276]	@ (80015dc <HAL_GPIO_Init+0x2b0>)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a3d      	ldr	r2, [pc, #244]	@ (80015e0 <HAL_GPIO_Init+0x2b4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00d      	beq.n	800150c <HAL_GPIO_Init+0x1e0>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3c      	ldr	r2, [pc, #240]	@ (80015e4 <HAL_GPIO_Init+0x2b8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d007      	beq.n	8001508 <HAL_GPIO_Init+0x1dc>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3b      	ldr	r2, [pc, #236]	@ (80015e8 <HAL_GPIO_Init+0x2bc>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d101      	bne.n	8001504 <HAL_GPIO_Init+0x1d8>
 8001500:	2302      	movs	r3, #2
 8001502:	e004      	b.n	800150e <HAL_GPIO_Init+0x1e2>
 8001504:	2303      	movs	r3, #3
 8001506:	e002      	b.n	800150e <HAL_GPIO_Init+0x1e2>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_GPIO_Init+0x1e2>
 800150c:	2300      	movs	r3, #0
 800150e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001510:	f002 0203 	and.w	r2, r2, #3
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4093      	lsls	r3, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800151e:	492f      	ldr	r1, [pc, #188]	@ (80015dc <HAL_GPIO_Init+0x2b0>)
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001538:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	492b      	ldr	r1, [pc, #172]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001546:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4927      	ldr	r1, [pc, #156]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 8001550:	4013      	ands	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	4921      	ldr	r1, [pc, #132]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800156e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	491d      	ldr	r1, [pc, #116]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 8001578:	4013      	ands	r3, r2
 800157a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4917      	ldr	r1, [pc, #92]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	4913      	ldr	r1, [pc, #76]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01f      	beq.n	80015f0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	490d      	ldr	r1, [pc, #52]	@ (80015ec <HAL_GPIO_Init+0x2c0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
 80015bc:	e01f      	b.n	80015fe <HAL_GPIO_Init+0x2d2>
 80015be:	bf00      	nop
 80015c0:	10320000 	.word	0x10320000
 80015c4:	10310000 	.word	0x10310000
 80015c8:	10220000 	.word	0x10220000
 80015cc:	10210000 	.word	0x10210000
 80015d0:	10120000 	.word	0x10120000
 80015d4:	10110000 	.word	0x10110000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000
 80015e0:	40010800 	.word	0x40010800
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <HAL_GPIO_Init+0x2f4>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	4909      	ldr	r1, [pc, #36]	@ (8001620 <HAL_GPIO_Init+0x2f4>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	3301      	adds	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f ae96 	bne.w	8001340 <HAL_GPIO_Init+0x14>
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	372c      	adds	r7, #44	@ 0x2c
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e272      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8087 	beq.w	8001752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001644:	4b92      	ldr	r3, [pc, #584]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b04      	cmp	r3, #4
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001650:	4b8f      	ldr	r3, [pc, #572]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d112      	bne.n	8001682 <HAL_RCC_OscConfig+0x5e>
 800165c:	4b8c      	ldr	r3, [pc, #560]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001668:	d10b      	bne.n	8001682 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	4b89      	ldr	r3, [pc, #548]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d06c      	beq.n	8001750 <HAL_RCC_OscConfig+0x12c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d168      	bne.n	8001750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e24c      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x76>
 800168c:	4b80      	ldr	r3, [pc, #512]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a7f      	ldr	r2, [pc, #508]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e02e      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x98>
 80016a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7a      	ldr	r2, [pc, #488]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b78      	ldr	r3, [pc, #480]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a77      	ldr	r2, [pc, #476]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e01d      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0xbc>
 80016c6:	4b72      	ldr	r3, [pc, #456]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a71      	ldr	r2, [pc, #452]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e00b      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 80016e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b68      	ldr	r3, [pc, #416]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a67      	ldr	r2, [pc, #412]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff f828 	bl	8000754 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff f824 	bl	8000754 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	@ 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e200      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b5d      	ldr	r3, [pc, #372]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0xe4>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff f814 	bl	8000754 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff f810 	bl	8000754 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	@ 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1ec      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	4b53      	ldr	r3, [pc, #332]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x10c>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d063      	beq.n	8001826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175e:	4b4c      	ldr	r3, [pc, #304]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800176a:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b08      	cmp	r3, #8
 8001774:	d11c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x18c>
 8001776:	4b46      	ldr	r3, [pc, #280]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	4b43      	ldr	r3, [pc, #268]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x176>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e1c0      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	4b3d      	ldr	r3, [pc, #244]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4939      	ldr	r1, [pc, #228]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e03a      	b.n	8001826 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	4b36      	ldr	r3, [pc, #216]	@ (8001894 <HAL_RCC_OscConfig+0x270>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7fe ffc9 	bl	8000754 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c6:	f7fe ffc5 	bl	8000754 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1a1      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4927      	ldr	r1, [pc, #156]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fa:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <HAL_RCC_OscConfig+0x270>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7fe ffa8 	bl	8000754 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001808:	f7fe ffa4 	bl	8000754 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e180      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d03a      	beq.n	80018a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d019      	beq.n	800186e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <HAL_RCC_OscConfig+0x274>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7fe ff88 	bl	8000754 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001848:	f7fe ff84 	bl	8000754 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e160      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <HAL_RCC_OscConfig+0x26c>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001866:	2001      	movs	r0, #1
 8001868:	f000 faba 	bl	8001de0 <RCC_Delay>
 800186c:	e01c      	b.n	80018a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <HAL_RCC_OscConfig+0x274>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7fe ff6e 	bl	8000754 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187a:	e00f      	b.n	800189c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187c:	f7fe ff6a 	bl	8000754 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d908      	bls.n	800189c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e146      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	42420000 	.word	0x42420000
 8001898:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b92      	ldr	r3, [pc, #584]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1e9      	bne.n	800187c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a6 	beq.w	8001a02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b88      	ldr	r3, [pc, #544]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a87      	ldr	r2, [pc, #540]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b85      	ldr	r3, [pc, #532]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018de:	2301      	movs	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	4b82      	ldr	r3, [pc, #520]	@ (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ee:	4b7f      	ldr	r3, [pc, #508]	@ (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7e      	ldr	r2, [pc, #504]	@ (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fa:	f7fe ff2b 	bl	8000754 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7fe ff27 	bl	8000754 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b64      	cmp	r3, #100	@ 0x64
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e103      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	4b75      	ldr	r3, [pc, #468]	@ (8001aec <HAL_RCC_OscConfig+0x4c8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x312>
 8001928:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6213      	str	r3, [r2, #32]
 8001934:	e02d      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x334>
 800193e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a69      	ldr	r2, [pc, #420]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4b67      	ldr	r3, [pc, #412]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a66      	ldr	r2, [pc, #408]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	e01c      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d10c      	bne.n	800197a <HAL_RCC_OscConfig+0x356>
 8001960:	4b61      	ldr	r3, [pc, #388]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a60      	ldr	r2, [pc, #384]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	e00b      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 800197a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a5a      	ldr	r2, [pc, #360]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6213      	str	r3, [r2, #32]
 8001986:	4b58      	ldr	r3, [pc, #352]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a57      	ldr	r2, [pc, #348]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d015      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7fe fedb 	bl	8000754 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7fe fed7 	bl	8000754 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0b1      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ee      	beq.n	80019a2 <HAL_RCC_OscConfig+0x37e>
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7fe fec5 	bl	8000754 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7fe fec1 	bl	8000754 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e09b      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	4b40      	ldr	r3, [pc, #256]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1ee      	bne.n	80019ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8087 	beq.w	8001b1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d061      	beq.n	8001adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d146      	bne.n	8001aae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7fe fe95 	bl	8000754 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7fe fe91 	bl	8000754 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e06d      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a54:	d108      	bne.n	8001a68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4921      	ldr	r1, [pc, #132]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a19      	ldr	r1, [r3, #32]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	491b      	ldr	r1, [pc, #108]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7fe fe65 	bl	8000754 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7fe fe61 	bl	8000754 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e03d      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46a>
 8001aac:	e035      	b.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7fe fe4e 	bl	8000754 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7fe fe4a 	bl	8000754 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e026      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x498>
 8001ada:	e01e      	b.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e019      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40007000 	.word	0x40007000
 8001af0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_RCC_OscConfig+0x500>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0d0      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d910      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b67      	ldr	r3, [pc, #412]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	4965      	ldr	r1, [pc, #404]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b63      	ldr	r3, [pc, #396]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b84:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a58      	ldr	r2, [pc, #352]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b9c:	4b53      	ldr	r3, [pc, #332]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ba6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b50      	ldr	r3, [pc, #320]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	494d      	ldr	r1, [pc, #308]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d040      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d115      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	4b41      	ldr	r3, [pc, #260]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e073      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06b      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c06:	4b39      	ldr	r3, [pc, #228]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 0203 	bic.w	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4936      	ldr	r1, [pc, #216]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c18:	f7fe fd9c 	bl	8000754 <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7fe fd98 	bl	8000754 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e053      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 020c 	and.w	r2, r3, #12
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d1eb      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c48:	4b27      	ldr	r3, [pc, #156]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d210      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b24      	ldr	r3, [pc, #144]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	4922      	ldr	r1, [pc, #136]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e032      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4916      	ldr	r1, [pc, #88]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ca2:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	490e      	ldr	r1, [pc, #56]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb6:	f000 f821 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	490a      	ldr	r1, [pc, #40]	@ (8001cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a09      	ldr	r2, [pc, #36]	@ (8001cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fcfa 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08002d88 	.word	0x08002d88
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x30>
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x36>
 8001d2a:	e027      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2e:	613b      	str	r3, [r7, #16]
      break;
 8001d30:	e027      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d010      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0c5b      	lsrs	r3, r3, #17
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	4a11      	ldr	r2, [pc, #68]	@ (8001d9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d5e:	fb03 f202 	mul.w	r2, r3, r2
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e004      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	613b      	str	r3, [r7, #16]
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7e:	613b      	str	r3, [r7, #16]
      break;
 8001d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d82:	693b      	ldr	r3, [r7, #16]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	007a1200 	.word	0x007a1200
 8001d98:	08002da0 	.word	0x08002da0
 8001d9c:	08002db0 	.word	0x08002db0
 8001da0:	003d0900 	.word	0x003d0900

08001da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b02      	ldr	r3, [pc, #8]	@ (8001db4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	20000000 	.word	0x20000000

08001db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dbc:	f7ff fff2 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0adb      	lsrs	r3, r3, #11
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	4903      	ldr	r1, [pc, #12]	@ (8001ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08002d98 	.word	0x08002d98

08001de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <RCC_Delay+0x34>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <RCC_Delay+0x38>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a5b      	lsrs	r3, r3, #9
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dfc:	bf00      	nop
  }
  while (Delay --);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	60fa      	str	r2, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f9      	bne.n	8001dfc <RCC_Delay+0x1c>
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000000 	.word	0x20000000
 8001e18:	10624dd3 	.word	0x10624dd3

08001e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d07d      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10d      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	4b4c      	ldr	r3, [pc, #304]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	61d3      	str	r3, [r2, #28]
 8001e54:	4b49      	ldr	r3, [pc, #292]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e60:	2301      	movs	r3, #1
 8001e62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b46      	ldr	r3, [pc, #280]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d118      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e70:	4b43      	ldr	r3, [pc, #268]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a42      	ldr	r2, [pc, #264]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7c:	f7fe fc6a 	bl	8000754 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	e008      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7fe fc66 	bl	8000754 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e06d      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea2:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eaa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d02e      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d027      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ec8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eca:	4b2e      	ldr	r3, [pc, #184]	@ (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ed6:	4a29      	ldr	r2, [pc, #164]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d014      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe fc35 	bl	8000754 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7fe fc31 	bl	8000754 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e036      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ee      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4917      	ldr	r1, [pc, #92]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b14      	ldr	r3, [pc, #80]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	490b      	ldr	r1, [pc, #44]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f5e:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4904      	ldr	r1, [pc, #16]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
 8001f84:	42420440 	.word	0x42420440

08001f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b10      	cmp	r3, #16
 8001fae:	f200 808a 	bhi.w	80020c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d045      	beq.n	8002044 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d075      	beq.n	80020aa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001fbe:	e082      	b.n	80020c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001fc0:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fc6:	4b45      	ldr	r3, [pc, #276]	@ (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d07b      	beq.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0c9b      	lsrs	r3, r3, #18
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	4a41      	ldr	r2, [pc, #260]	@ (80020e0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d015      	beq.n	8002016 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fea:	4b3c      	ldr	r3, [pc, #240]	@ (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0c5b      	lsrs	r3, r3, #17
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	4a3b      	ldr	r2, [pc, #236]	@ (80020e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00d      	beq.n	8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002004:	4a38      	ldr	r2, [pc, #224]	@ (80020e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fbb2 f2f3 	udiv	r2, r2, r3
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	e004      	b.n	8002020 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4a34      	ldr	r2, [pc, #208]	@ (80020ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002020:	4b2e      	ldr	r3, [pc, #184]	@ (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800202c:	d102      	bne.n	8002034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	61bb      	str	r3, [r7, #24]
      break;
 8002032:	e04a      	b.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4a2d      	ldr	r2, [pc, #180]	@ (80020f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
      break;
 8002042:	e042      	b.n	80020ca <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002044:	4b25      	ldr	r3, [pc, #148]	@ (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002054:	d108      	bne.n	8002068 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	e01f      	b.n	80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800206e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002072:	d109      	bne.n	8002088 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002080:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	e00f      	b.n	80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800208e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002092:	d11c      	bne.n	80020ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d016      	beq.n	80020ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80020a0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80020a4:	61bb      	str	r3, [r7, #24]
      break;
 80020a6:	e012      	b.n	80020ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80020a8:	e011      	b.n	80020ce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80020aa:	f7ff fe85 	bl	8001db8 <HAL_RCC_GetPCLK2Freq>
 80020ae:	4602      	mov	r2, r0
 80020b0:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	0b9b      	lsrs	r3, r3, #14
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	3301      	adds	r3, #1
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	61bb      	str	r3, [r7, #24]
      break;
 80020c4:	e004      	b.n	80020d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80020c6:	bf00      	nop
 80020c8:	e002      	b.n	80020d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80020ca:	bf00      	nop
 80020cc:	e000      	b.n	80020d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80020ce:	bf00      	nop
    }
  }
  return (frequency);
 80020d0:	69bb      	ldr	r3, [r7, #24]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08002db4 	.word	0x08002db4
 80020e4:	08002dc4 	.word	0x08002dc4
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	003d0900 	.word	0x003d0900
 80020f0:	aaaaaaab 	.word	0xaaaaaaab

080020f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e041      	b.n	800218a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fa18 	bl	8000550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f000 faac 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e041      	b.n	8002228 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f839 	bl	8002230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f000 fa5d 	bl	8002690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
	...

08002244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_TIM_PWM_Start+0x24>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e022      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d109      	bne.n	8002282 <HAL_TIM_PWM_Start+0x3e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e015      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d109      	bne.n	800229c <HAL_TIM_PWM_Start+0x58>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e008      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e059      	b.n	800236a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <HAL_TIM_PWM_Start+0x82>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022c4:	e013      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x92>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022d4:	e00b      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_PWM_Start+0xa2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022e4:	e003      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fc40 	bl	8002b7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1c      	ldr	r2, [pc, #112]	@ (8002374 <HAL_TIM_PWM_Start+0x130>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d107      	bne.n	8002316 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a16      	ldr	r2, [pc, #88]	@ (8002374 <HAL_TIM_PWM_Start+0x130>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_TIM_PWM_Start+0xf0>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002328:	d004      	beq.n	8002334 <HAL_TIM_PWM_Start+0xf0>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <HAL_TIM_PWM_Start+0x134>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d111      	bne.n	8002358 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d010      	beq.n	8002368 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002356:	e007      	b.n	8002368 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0201 	orr.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40000400 	.word	0x40000400

0800237c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002396:	2302      	movs	r3, #2
 8002398:	e0ae      	b.n	80024f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b0c      	cmp	r3, #12
 80023a6:	f200 809f 	bhi.w	80024e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023aa:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023e5 	.word	0x080023e5
 80023b4:	080024e9 	.word	0x080024e9
 80023b8:	080024e9 	.word	0x080024e9
 80023bc:	080024e9 	.word	0x080024e9
 80023c0:	08002425 	.word	0x08002425
 80023c4:	080024e9 	.word	0x080024e9
 80023c8:	080024e9 	.word	0x080024e9
 80023cc:	080024e9 	.word	0x080024e9
 80023d0:	08002467 	.word	0x08002467
 80023d4:	080024e9 	.word	0x080024e9
 80023d8:	080024e9 	.word	0x080024e9
 80023dc:	080024e9 	.word	0x080024e9
 80023e0:	080024a7 	.word	0x080024a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68b9      	ldr	r1, [r7, #8]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f9a8 	bl	8002740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0208 	orr.w	r2, r2, #8
 80023fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0204 	bic.w	r2, r2, #4
 800240e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6999      	ldr	r1, [r3, #24]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	619a      	str	r2, [r3, #24]
      break;
 8002422:	e064      	b.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f9ee 	bl	800280c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800243e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800244e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6999      	ldr	r1, [r3, #24]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	021a      	lsls	r2, r3, #8
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	619a      	str	r2, [r3, #24]
      break;
 8002464:	e043      	b.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 fa37 	bl	80028e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69da      	ldr	r2, [r3, #28]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0208 	orr.w	r2, r2, #8
 8002480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0204 	bic.w	r2, r2, #4
 8002490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69d9      	ldr	r1, [r3, #28]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	61da      	str	r2, [r3, #28]
      break;
 80024a4:	e023      	b.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fa81 	bl	80029b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69da      	ldr	r2, [r3, #28]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69da      	ldr	r2, [r3, #28]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69d9      	ldr	r1, [r3, #28]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	021a      	lsls	r2, r3, #8
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	61da      	str	r2, [r3, #28]
      break;
 80024e6:	e002      	b.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	75fb      	strb	r3, [r7, #23]
      break;
 80024ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_TIM_ConfigClockSource+0x1c>
 8002518:	2302      	movs	r3, #2
 800251a:	e0b4      	b.n	8002686 <HAL_TIM_ConfigClockSource+0x186>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800253a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002554:	d03e      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800255a:	f200 8087 	bhi.w	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002562:	f000 8086 	beq.w	8002672 <HAL_TIM_ConfigClockSource+0x172>
 8002566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800256a:	d87f      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b70      	cmp	r3, #112	@ 0x70
 800256e:	d01a      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002570:	2b70      	cmp	r3, #112	@ 0x70
 8002572:	d87b      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b60      	cmp	r3, #96	@ 0x60
 8002576:	d050      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x11a>
 8002578:	2b60      	cmp	r3, #96	@ 0x60
 800257a:	d877      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b50      	cmp	r3, #80	@ 0x50
 800257e:	d03c      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0xfa>
 8002580:	2b50      	cmp	r3, #80	@ 0x50
 8002582:	d873      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b40      	cmp	r3, #64	@ 0x40
 8002586:	d058      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x13a>
 8002588:	2b40      	cmp	r3, #64	@ 0x40
 800258a:	d86f      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b30      	cmp	r3, #48	@ 0x30
 800258e:	d064      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 8002590:	2b30      	cmp	r3, #48	@ 0x30
 8002592:	d86b      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b20      	cmp	r3, #32
 8002596:	d060      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 8002598:	2b20      	cmp	r3, #32
 800259a:	d867      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d05c      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d05a      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	e062      	b.n	800266c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025b6:	f000 fac2 	bl	8002b3e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	609a      	str	r2, [r3, #8]
      break;
 80025d2:	e04f      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025e4:	f000 faab 	bl	8002b3e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025f6:	609a      	str	r2, [r3, #8]
      break;
 80025f8:	e03c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002606:	461a      	mov	r2, r3
 8002608:	f000 fa22 	bl	8002a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2150      	movs	r1, #80	@ 0x50
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fa79 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 8002618:	e02c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002626:	461a      	mov	r2, r3
 8002628:	f000 fa40 	bl	8002aac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2160      	movs	r1, #96	@ 0x60
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fa69 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 8002638:	e01c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002646:	461a      	mov	r2, r3
 8002648:	f000 fa02 	bl	8002a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2140      	movs	r1, #64	@ 0x40
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fa59 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 8002658:	e00c      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4619      	mov	r1, r3
 8002664:	4610      	mov	r0, r2
 8002666:	f000 fa50 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 800266a:	e003      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e000      	b.n	8002674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a25      	ldr	r2, [pc, #148]	@ (8002738 <TIM_Base_SetConfig+0xa8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <TIM_Base_SetConfig+0x28>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ae:	d003      	beq.n	80026b8 <TIM_Base_SetConfig+0x28>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a22      	ldr	r2, [pc, #136]	@ (800273c <TIM_Base_SetConfig+0xac>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d108      	bne.n	80026ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002738 <TIM_Base_SetConfig+0xa8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <TIM_Base_SetConfig+0x52>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d8:	d003      	beq.n	80026e2 <TIM_Base_SetConfig+0x52>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a17      	ldr	r2, [pc, #92]	@ (800273c <TIM_Base_SetConfig+0xac>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a07      	ldr	r2, [pc, #28]	@ (8002738 <TIM_Base_SetConfig+0xa8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d103      	bne.n	8002728 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	615a      	str	r2, [r3, #20]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40000400 	.word	0x40000400

08002740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f023 0201 	bic.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f023 0302 	bic.w	r3, r3, #2
 8002788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a1c      	ldr	r2, [pc, #112]	@ (8002808 <TIM_OC1_SetConfig+0xc8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d10c      	bne.n	80027b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f023 0308 	bic.w	r3, r3, #8
 80027a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <TIM_OC1_SetConfig+0xc8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d111      	bne.n	80027e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	621a      	str	r2, [r3, #32]
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40012c00 	.word	0x40012c00

0800280c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f023 0210 	bic.w	r2, r3, #16
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800283a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0320 	bic.w	r3, r3, #32
 8002856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a1d      	ldr	r2, [pc, #116]	@ (80028dc <TIM_OC2_SetConfig+0xd0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d10d      	bne.n	8002888 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002886:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a14      	ldr	r2, [pc, #80]	@ (80028dc <TIM_OC2_SetConfig+0xd0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d113      	bne.n	80028b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800289e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	621a      	str	r2, [r3, #32]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40012c00 	.word	0x40012c00

080028e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0303 	bic.w	r3, r3, #3
 8002916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1d      	ldr	r2, [pc, #116]	@ (80029b0 <TIM_OC3_SetConfig+0xd0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d10d      	bne.n	800295a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a14      	ldr	r2, [pc, #80]	@ (80029b0 <TIM_OC3_SetConfig+0xd0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d113      	bne.n	800298a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	621a      	str	r2, [r3, #32]
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00

080029b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a4c <TIM_OC4_SetConfig+0x98>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d109      	bne.n	8002a28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	019b      	lsls	r3, r3, #6
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	621a      	str	r2, [r3, #32]
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00

08002a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f023 030a 	bic.w	r3, r3, #10
 8002a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0210 	bic.w	r2, r3, #16
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f043 0307 	orr.w	r3, r3, #7
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2201      	movs	r2, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1a      	ldr	r2, [r3, #32]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	621a      	str	r2, [r3, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e041      	b.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a14      	ldr	r2, [pc, #80]	@ (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c28:	d004      	beq.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a10      	ldr	r2, [pc, #64]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10c      	bne.n	8002c4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40000400 	.word	0x40000400

08002c74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e03d      	b.n	8002d0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <memset>:
 8002d16:	4603      	mov	r3, r0
 8002d18:	4402      	add	r2, r0
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d100      	bne.n	8002d20 <memset+0xa>
 8002d1e:	4770      	bx	lr
 8002d20:	f803 1b01 	strb.w	r1, [r3], #1
 8002d24:	e7f9      	b.n	8002d1a <memset+0x4>
	...

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	4d0c      	ldr	r5, [pc, #48]	@ (8002d60 <__libc_init_array+0x38>)
 8002d2e:	4c0d      	ldr	r4, [pc, #52]	@ (8002d64 <__libc_init_array+0x3c>)
 8002d30:	1b64      	subs	r4, r4, r5
 8002d32:	10a4      	asrs	r4, r4, #2
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	f000 f81a 	bl	8002d70 <_init>
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	4d0a      	ldr	r5, [pc, #40]	@ (8002d68 <__libc_init_array+0x40>)
 8002d40:	4c0a      	ldr	r4, [pc, #40]	@ (8002d6c <__libc_init_array+0x44>)
 8002d42:	1b64      	subs	r4, r4, r5
 8002d44:	10a4      	asrs	r4, r4, #2
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002dc8 	.word	0x08002dc8
 8002d64:	08002dc8 	.word	0x08002dc8
 8002d68:	08002dc8 	.word	0x08002dc8
 8002d6c:	08002dcc 	.word	0x08002dcc

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
