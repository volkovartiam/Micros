
ADC_Single_Conversion_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003094  08003094  00004094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d4  080030d4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080030d4  080030d4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030d4  080030d4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030d4  080030d4  000040d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030d8  080030d8  000040d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  080030e8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080030e8  000050ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f9f  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3c  00000000  00000000  0000efd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00010e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008db  00000000  00000000  00011988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fc7  00000000  00000000  00012263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d061  00000000  00000000  0002922a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087216  00000000  00000000  0003628b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd4a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f20  00000000  00000000  000bd4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000c0404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800307c 	.word	0x0800307c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800307c 	.word	0x0800307c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fad2 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f832 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f95e 	bl	8000418 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f93e 	bl	80003dc <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f888 	bl	8000274 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000164:	f000 f8c4 	bl	80002f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000168:	2100      	movs	r1, #0
 800016a:	4808      	ldr	r0, [pc, #32]	@ (800018c <main+0x40>)
 800016c:	f002 fa42 	bl	80025f4 <HAL_TIM_PWM_Start>
  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000170:	4807      	ldr	r0, [pc, #28]	@ (8000190 <main+0x44>)
 8000172:	f000 ff09 	bl	8000f88 <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */
      // Start ADC Conversion
      // Pass (The ADC Instance, Result Buffer Address, Buffer Length)
      HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
 8000176:	2201      	movs	r2, #1
 8000178:	4906      	ldr	r1, [pc, #24]	@ (8000194 <main+0x48>)
 800017a:	4805      	ldr	r0, [pc, #20]	@ (8000190 <main+0x44>)
 800017c:	f000 fc1a 	bl	80009b4 <HAL_ADC_Start_DMA>
      HAL_Delay(1);
 8000180:	2001      	movs	r0, #1
 8000182:	f000 fb1b 	bl	80007bc <HAL_Delay>
      HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
 8000186:	bf00      	nop
 8000188:	e7f5      	b.n	8000176 <main+0x2a>
 800018a:	bf00      	nop
 800018c:	200000a0 	.word	0x200000a0
 8000190:	2000002c 	.word	0x2000002c
 8000194:	20000028 	.word	0x20000028

08000198 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END 3 */
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    // Conversion Complete & DMA Transfer Complete As Well
    // So The AD_RES Is Now Updated & Let's Move IT To The PWM CCR1
    // Update The PWM Duty Cycle With Latest ADC Conversion Result
    TIM2->CCR1 = (AD_RES<<4);
 80001a0:	4b05      	ldr	r3, [pc, #20]	@ (80001b8 <HAL_ADC_ConvCpltCallback+0x20>)
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80001ac:	bf00      	nop
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	20000028 	.word	0x20000028

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	@ 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 ff2a 	bl	8003024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000202:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000206:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000208:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800020c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fbde 	bl	80019d4 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021e:	f000 f91d 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fe4a 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024a:	f000 f907 	bl	800045c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800024e:	2302      	movs	r3, #2
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000256:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f001 ffb6 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000266:	f000 f8f9 	bl	800045c <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3750      	adds	r7, #80	@ 0x50
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000284:	4b18      	ldr	r3, [pc, #96]	@ (80002e8 <MX_ADC1_Init+0x74>)
 8000286:	4a19      	ldr	r2, [pc, #100]	@ (80002ec <MX_ADC1_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800028a:	4b17      	ldr	r3, [pc, #92]	@ (80002e8 <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <MX_ADC1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000296:	4b14      	ldr	r3, [pc, #80]	@ (80002e8 <MX_ADC1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800029c:	4b12      	ldr	r3, [pc, #72]	@ (80002e8 <MX_ADC1_Init+0x74>)
 800029e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a4:	4b10      	ldr	r3, [pc, #64]	@ (80002e8 <MX_ADC1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <MX_ADC1_Init+0x74>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <MX_ADC1_Init+0x74>)
 80002b2:	f000 faa7 	bl	8000804 <HAL_ADC_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002bc:	f000 f8ce 	bl	800045c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002c0:	2301      	movs	r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4619      	mov	r1, r3
 80002d0:	4805      	ldr	r0, [pc, #20]	@ (80002e8 <MX_ADC1_Init+0x74>)
 80002d2:	f000 fc5f 	bl	8000b94 <HAL_ADC_ConfigChannel>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002dc:	f000 f8be 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000002c 	.word	0x2000002c
 80002ec:	40012400 	.word	0x40012400

080002f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08e      	sub	sp, #56	@ 0x38
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000304:	f107 0320 	add.w	r3, r7, #32
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
 800031a:	611a      	str	r2, [r3, #16]
 800031c:	615a      	str	r2, [r3, #20]
 800031e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000320:	4b2d      	ldr	r3, [pc, #180]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000322:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000328:	4b2b      	ldr	r3, [pc, #172]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032e:	4b2a      	ldr	r3, [pc, #168]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000334:	4b28      	ldr	r3, [pc, #160]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800033a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033c:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000342:	4b25      	ldr	r3, [pc, #148]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000348:	4823      	ldr	r0, [pc, #140]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 800034a:	f002 f8ab 	bl	80024a4 <HAL_TIM_Base_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000354:	f000 f882 	bl	800045c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800035c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800035e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000362:	4619      	mov	r1, r3
 8000364:	481c      	ldr	r0, [pc, #112]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000366:	f002 faa3 	bl	80028b0 <HAL_TIM_ConfigClockSource>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000370:	f000 f874 	bl	800045c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000374:	4818      	ldr	r0, [pc, #96]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000376:	f002 f8e4 	bl	8002542 <HAL_TIM_PWM_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000380:	f000 f86c 	bl	800045c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800038c:	f107 0320 	add.w	r3, r7, #32
 8000390:	4619      	mov	r1, r3
 8000392:	4811      	ldr	r0, [pc, #68]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 8000394:	f002 fdee 	bl	8002f74 <HAL_TIMEx_MasterConfigSynchronization>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800039e:	f000 f85d 	bl	800045c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a2:	2360      	movs	r3, #96	@ 0x60
 80003a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	4619      	mov	r1, r3
 80003b8:	4807      	ldr	r0, [pc, #28]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 80003ba:	f002 f9b7 	bl	800272c <HAL_TIM_PWM_ConfigChannel>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80003c4:	f000 f84a 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003c8:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <MX_TIM2_Init+0xe8>)
 80003ca:	f000 f903 	bl	80005d4 <HAL_TIM_MspPostInit>

}
 80003ce:	bf00      	nop
 80003d0:	3738      	adds	r7, #56	@ 0x38
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000a0 	.word	0x200000a0

080003dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <MX_DMA_Init+0x38>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000414 <MX_DMA_Init+0x38>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <MX_DMA_Init+0x38>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	200b      	movs	r0, #11
 8000400:	f000 ff47 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000404:	200b      	movs	r0, #11
 8000406:	f000 ff60 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_GPIO_Init+0x40>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a0d      	ldr	r2, [pc, #52]	@ (8000458 <MX_GPIO_Init+0x40>)
 8000424:	f043 0320 	orr.w	r3, r3, #32
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_GPIO_Init+0x40>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0320 	and.w	r3, r3, #32
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <MX_GPIO_Init+0x40>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a07      	ldr	r2, [pc, #28]	@ (8000458 <MX_GPIO_Init+0x40>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <MX_GPIO_Init+0x40>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <Error_Handler+0x8>

08000468 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800046e:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <HAL_MspInit+0x5c>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a0e      	ldr	r2, [pc, #56]	@ (80004c4 <HAL_MspInit+0x5c>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049e:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <HAL_MspInit+0x60>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	4a04      	ldr	r2, [pc, #16]	@ (80004c8 <HAL_MspInit+0x60>)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010000 	.word	0x40010000

080004cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a28      	ldr	r2, [pc, #160]	@ (8000588 <HAL_ADC_MspInit+0xbc>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d149      	bne.n	8000580 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004ec:	4b27      	ldr	r3, [pc, #156]	@ (800058c <HAL_ADC_MspInit+0xc0>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a26      	ldr	r2, [pc, #152]	@ (800058c <HAL_ADC_MspInit+0xc0>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b24      	ldr	r3, [pc, #144]	@ (800058c <HAL_ADC_MspInit+0xc0>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b21      	ldr	r3, [pc, #132]	@ (800058c <HAL_ADC_MspInit+0xc0>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a20      	ldr	r2, [pc, #128]	@ (800058c <HAL_ADC_MspInit+0xc0>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <HAL_ADC_MspInit+0xc0>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800051c:	2302      	movs	r3, #2
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000520:	2303      	movs	r3, #3
 8000522:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4819      	ldr	r0, [pc, #100]	@ (8000590 <HAL_ADC_MspInit+0xc4>)
 800052c:	f001 f8d6 	bl	80016dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000530:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 8000532:	4a19      	ldr	r2, [pc, #100]	@ (8000598 <HAL_ADC_MspInit+0xcc>)
 8000534:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800053c:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 8000544:	2280      	movs	r2, #128	@ 0x80
 8000546:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000548:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 800054a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800054e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000550:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 8000552:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000556:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000558:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 8000560:	2200      	movs	r2, #0
 8000562:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 8000566:	f000 fecb 	bl	8001300 <HAL_DMA_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000570:	f7ff ff74 	bl	800045c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 8000578:	621a      	str	r2, [r3, #32]
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <HAL_ADC_MspInit+0xc8>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40012400 	.word	0x40012400
 800058c:	40021000 	.word	0x40021000
 8000590:	40010800 	.word	0x40010800
 8000594:	2000005c 	.word	0x2000005c
 8000598:	40020008 	.word	0x40020008

0800059c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005ac:	d10b      	bne.n	80005c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <HAL_TIM_Base_MspInit+0x34>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <HAL_TIM_Base_MspInit+0x34>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <HAL_TIM_Base_MspInit+0x34>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005f2:	d117      	bne.n	8000624 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <HAL_TIM_MspPostInit+0x58>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <HAL_TIM_MspPostInit+0x58>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <HAL_TIM_MspPostInit+0x58>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800060c:	2301      	movs	r3, #1
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	4804      	ldr	r0, [pc, #16]	@ (8000630 <HAL_TIM_MspPostInit+0x5c>)
 8000620:	f001 f85c 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800

08000634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <NMI_Handler+0x4>

0800063c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <MemManage_Handler+0x4>

0800064c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <BusFault_Handler+0x4>

08000654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <UsageFault_Handler+0x4>

0800065c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000684:	f000 f87e 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000690:	4802      	ldr	r0, [pc, #8]	@ (800069c <DMA1_Channel1_IRQHandler+0x10>)
 8000692:	f000 feef 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	2000005c 	.word	0x2000005c

080006a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr

080006ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ac:	f7ff fff8 	bl	80006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006b2:	490c      	ldr	r1, [pc, #48]	@ (80006e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006b4:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a09      	ldr	r2, [pc, #36]	@ (80006ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006c8:	4c09      	ldr	r4, [pc, #36]	@ (80006f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006d6:	f002 fcad 	bl	8003034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006da:	f7ff fd37 	bl	800014c <main>
  bx lr
 80006de:	4770      	bx	lr
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e8:	080030dc 	.word	0x080030dc
  ldr r2, =_sbss
 80006ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f0:	200000ec 	.word	0x200000ec

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <HAL_Init+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a07      	ldr	r2, [pc, #28]	@ (8000720 <HAL_Init+0x28>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 fdb7 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	200f      	movs	r0, #15
 8000710:	f000 f808 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fea8 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <HAL_InitTick+0x54>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <HAL_InitTick+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073a:	fbb3 f3f1 	udiv	r3, r3, r1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fdcf 	bl	80012e6 <HAL_SYSTICK_Config>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e00e      	b.n	8000770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d80a      	bhi.n	800076e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	f000 fd97 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4a06      	ldr	r2, [pc, #24]	@ (8000780 <HAL_InitTick+0x5c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <HAL_IncTick+0x1c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_IncTick+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a03      	ldr	r2, [pc, #12]	@ (80007a4 <HAL_IncTick+0x20>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000008 	.word	0x20000008
 80007a4:	200000e8 	.word	0x200000e8

080007a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	@ (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	200000e8 	.word	0x200000e8

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff fff0 	bl	80007a8 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <HAL_Delay+0x44>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e2:	bf00      	nop
 80007e4:	f7ff ffe0 	bl	80007a8 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008

08000804 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800080c:	2300      	movs	r3, #0
 800080e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e0be      	b.n	80009a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000830:	2b00      	cmp	r3, #0
 8000832:	d109      	bne.n	8000848 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fe42 	bl	80004cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 faf5 	bl	8000e38 <ADC_ConversionStop_Disable>
 800084e:	4603      	mov	r3, r0
 8000850:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	2b00      	cmp	r3, #0
 800085c:	f040 8099 	bne.w	8000992 <HAL_ADC_Init+0x18e>
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	2b00      	cmp	r3, #0
 8000864:	f040 8095 	bne.w	8000992 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800086c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000870:	f023 0302 	bic.w	r3, r3, #2
 8000874:	f043 0202 	orr.w	r2, r3, #2
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000884:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7b1b      	ldrb	r3, [r3, #12]
 800088a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800088c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	4313      	orrs	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800089c:	d003      	beq.n	80008a6 <HAL_ADC_Init+0xa2>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d102      	bne.n	80008ac <HAL_ADC_Init+0xa8>
 80008a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008aa:	e000      	b.n	80008ae <HAL_ADC_Init+0xaa>
 80008ac:	2300      	movs	r3, #0
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	7d1b      	ldrb	r3, [r3, #20]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d119      	bne.n	80008f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7b1b      	ldrb	r3, [r3, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d109      	bne.n	80008d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	3b01      	subs	r3, #1
 80008ca:	035a      	lsls	r2, r3, #13
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	e00b      	b.n	80008f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008dc:	f043 0220 	orr.w	r2, r3, #32
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e8:	f043 0201 	orr.w	r2, r3, #1
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	430a      	orrs	r2, r1
 8000902:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <HAL_ADC_Init+0x1a8>)
 800090c:	4013      	ands	r3, r2
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	6812      	ldr	r2, [r2, #0]
 8000912:	68b9      	ldr	r1, [r7, #8]
 8000914:	430b      	orrs	r3, r1
 8000916:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000920:	d003      	beq.n	800092a <HAL_ADC_Init+0x126>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d104      	bne.n	8000934 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	3b01      	subs	r3, #1
 8000930:	051b      	lsls	r3, r3, #20
 8000932:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	430a      	orrs	r2, r1
 8000946:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <HAL_ADC_Init+0x1ac>)
 8000950:	4013      	ands	r3, r2
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	429a      	cmp	r2, r3
 8000956:	d10b      	bne.n	8000970 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000962:	f023 0303 	bic.w	r3, r3, #3
 8000966:	f043 0201 	orr.w	r2, r3, #1
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800096e:	e018      	b.n	80009a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000974:	f023 0312 	bic.w	r3, r3, #18
 8000978:	f043 0210 	orr.w	r2, r3, #16
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000984:	f043 0201 	orr.w	r2, r3, #1
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000990:	e007      	b.n	80009a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000996:	f043 0210 	orr.w	r2, r3, #16
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	ffe1f7fd 	.word	0xffe1f7fd
 80009b0:	ff1f0efe 	.word	0xff1f0efe

080009b4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c0:	2300      	movs	r3, #0
 80009c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a64      	ldr	r2, [pc, #400]	@ (8000b5c <HAL_ADC_Start_DMA+0x1a8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d004      	beq.n	80009d8 <HAL_ADC_Start_DMA+0x24>
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a63      	ldr	r2, [pc, #396]	@ (8000b60 <HAL_ADC_Start_DMA+0x1ac>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d106      	bne.n	80009e6 <HAL_ADC_Start_DMA+0x32>
 80009d8:	4b60      	ldr	r3, [pc, #384]	@ (8000b5c <HAL_ADC_Start_DMA+0x1a8>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f040 80b3 	bne.w	8000b4c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d101      	bne.n	80009f4 <HAL_ADC_Start_DMA+0x40>
 80009f0:	2302      	movs	r3, #2
 80009f2:	e0ae      	b.n	8000b52 <HAL_ADC_Start_DMA+0x19e>
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	2201      	movs	r2, #1
 80009f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 f9c1 	bl	8000d84 <ADC_Enable>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f040 809a 	bne.w	8000b42 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000a16:	f023 0301 	bic.w	r3, r3, #1
 8000a1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a4e      	ldr	r2, [pc, #312]	@ (8000b60 <HAL_ADC_Start_DMA+0x1ac>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d105      	bne.n	8000a38 <HAL_ADC_Start_DMA+0x84>
 8000a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b5c <HAL_ADC_Start_DMA+0x1a8>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d115      	bne.n	8000a64 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d026      	beq.n	8000aa0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a62:	e01d      	b.n	8000aa0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a68:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a39      	ldr	r2, [pc, #228]	@ (8000b5c <HAL_ADC_Start_DMA+0x1a8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d004      	beq.n	8000a84 <HAL_ADC_Start_DMA+0xd0>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a38      	ldr	r2, [pc, #224]	@ (8000b60 <HAL_ADC_Start_DMA+0x1ac>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d10d      	bne.n	8000aa0 <HAL_ADC_Start_DMA+0xec>
 8000a84:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <HAL_ADC_Start_DMA+0x1a8>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab0:	f023 0206 	bic.w	r2, r3, #6
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ab8:	e002      	b.n	8000ac0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	4a25      	ldr	r2, [pc, #148]	@ (8000b64 <HAL_ADC_Start_DMA+0x1b0>)
 8000ace:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <HAL_ADC_Start_DMA+0x1b4>)
 8000ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6a1b      	ldr	r3, [r3, #32]
 8000adc:	4a23      	ldr	r2, [pc, #140]	@ (8000b6c <HAL_ADC_Start_DMA+0x1b8>)
 8000ade:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f06f 0202 	mvn.w	r2, #2
 8000ae8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000af8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a18      	ldr	r0, [r3, #32]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	334c      	adds	r3, #76	@ 0x4c
 8000b04:	4619      	mov	r1, r3
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f000 fc53 	bl	80013b4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b18:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b1c:	d108      	bne.n	8000b30 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000b2c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b2e:	e00f      	b.n	8000b50 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000b3e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b40:	e006      	b.n	8000b50 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000b4a:	e001      	b.n	8000b50 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40012400 	.word	0x40012400
 8000b60:	40012800 	.word	0x40012800
 8000b64:	08000ebb 	.word	0x08000ebb
 8000b68:	08000f37 	.word	0x08000f37
 8000b6c:	08000f53 	.word	0x08000f53

08000b70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d101      	bne.n	8000bb4 <HAL_ADC_ConfigChannel+0x20>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e0dc      	b.n	8000d6e <HAL_ADC_ConfigChannel+0x1da>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d81c      	bhi.n	8000bfe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3b05      	subs	r3, #5
 8000bd6:	221f      	movs	r2, #31
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4019      	ands	r1, r3
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	4613      	mov	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	3b05      	subs	r3, #5
 8000bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bfc:	e03c      	b.n	8000c78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2b0c      	cmp	r3, #12
 8000c04:	d81c      	bhi.n	8000c40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	3b23      	subs	r3, #35	@ 0x23
 8000c18:	221f      	movs	r2, #31
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4019      	ands	r1, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	3b23      	subs	r3, #35	@ 0x23
 8000c32:	fa00 f203 	lsl.w	r2, r0, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c3e:	e01b      	b.n	8000c78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	3b41      	subs	r3, #65	@ 0x41
 8000c52:	221f      	movs	r2, #31
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	4019      	ands	r1, r3
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	3b41      	subs	r3, #65	@ 0x41
 8000c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b09      	cmp	r3, #9
 8000c7e:	d91c      	bls.n	8000cba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68d9      	ldr	r1, [r3, #12]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	3b1e      	subs	r3, #30
 8000c92:	2207      	movs	r2, #7
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	4019      	ands	r1, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	6898      	ldr	r0, [r3, #8]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	3b1e      	subs	r3, #30
 8000cac:	fa00 f203 	lsl.w	r2, r0, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	e019      	b.n	8000cee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6919      	ldr	r1, [r3, #16]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	2207      	movs	r2, #7
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4019      	ands	r1, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	6898      	ldr	r0, [r3, #8]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	430a      	orrs	r2, r1
 8000cec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b10      	cmp	r3, #16
 8000cf4:	d003      	beq.n	8000cfe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cfa:	2b11      	cmp	r3, #17
 8000cfc:	d132      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1d      	ldr	r2, [pc, #116]	@ (8000d78 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d125      	bne.n	8000d54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d126      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000d24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	d11a      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <HAL_ADC_ConfigChannel+0x1e8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a13      	ldr	r2, [pc, #76]	@ (8000d80 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	0c9a      	lsrs	r2, r3, #18
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d44:	e002      	b.n	8000d4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f9      	bne.n	8000d46 <HAL_ADC_ConfigChannel+0x1b2>
 8000d52:	e007      	b.n	8000d64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d58:	f043 0220 	orr.w	r2, r3, #32
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	40012400 	.word	0x40012400
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	431bde83 	.word	0x431bde83

08000d84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d040      	beq.n	8000e24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f042 0201 	orr.w	r2, r2, #1
 8000db0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <ADC_Enable+0xac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e34 <ADC_Enable+0xb0>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	0c9b      	lsrs	r3, r3, #18
 8000dbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dc0:	e002      	b.n	8000dc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f9      	bne.n	8000dc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dce:	f7ff fceb 	bl	80007a8 <HAL_GetTick>
 8000dd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000dd4:	e01f      	b.n	8000e16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000dd6:	f7ff fce7 	bl	80007a8 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d918      	bls.n	8000e16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d011      	beq.n	8000e16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df6:	f043 0210 	orr.w	r2, r3, #16
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e007      	b.n	8000e26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d1d8      	bne.n	8000dd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000000 	.word	0x20000000
 8000e34:	431bde83 	.word	0x431bde83

08000e38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d12e      	bne.n	8000eb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0201 	bic.w	r2, r2, #1
 8000e60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e62:	f7ff fca1 	bl	80007a8 <HAL_GetTick>
 8000e66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e68:	e01b      	b.n	8000ea2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e6a:	f7ff fc9d 	bl	80007a8 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d914      	bls.n	8000ea2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d10d      	bne.n	8000ea2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e8a:	f043 0210 	orr.w	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e007      	b.n	8000eb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d0dc      	beq.n	8000e6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ecc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d127      	bne.n	8000f24 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000eea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000eee:	d115      	bne.n	8000f1c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d111      	bne.n	8000f1c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d105      	bne.n	8000f1c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f14:	f043 0201 	orr.w	r2, r3, #1
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff f93b 	bl	8000198 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f22:	e004      	b.n	8000f2e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	4798      	blx	r3
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f42:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff fe13 	bl	8000b70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	f043 0204 	orr.w	r2, r3, #4
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff fe02 	bl	8000b82 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADCEx_Calibration_Start+0x1e>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e097      	b.n	80010d6 <HAL_ADCEx_Calibration_Start+0x14e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff42 	bl	8000e38 <ADC_ConversionStop_Disable>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fee3 	bl	8000d84 <ADC_Enable>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f040 8081 	bne.w	80010cc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fd2:	f023 0302 	bic.w	r3, r3, #2
 8000fd6:	f043 0202 	orr.w	r2, r3, #2
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fde:	4b40      	ldr	r3, [pc, #256]	@ (80010e0 <HAL_ADCEx_Calibration_Start+0x158>)
 8000fe0:	681c      	ldr	r4, [r3, #0]
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f001 f9a8 	bl	8002338 <HAL_RCCEx_GetPeriphCLKFreq>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000fee:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000ff0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000ff2:	e002      	b.n	8000ffa <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f9      	bne.n	8000ff4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0208 	orr.w	r2, r2, #8
 800100e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001010:	f7ff fbca 	bl	80007a8 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001016:	e01b      	b.n	8001050 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001018:	f7ff fbc6 	bl	80007a8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b0a      	cmp	r3, #10
 8001024:	d914      	bls.n	8001050 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00d      	beq.n	8001050 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001038:	f023 0312 	bic.w	r3, r3, #18
 800103c:	f043 0210 	orr.w	r2, r3, #16
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e042      	b.n	80010d6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1dc      	bne.n	8001018 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0204 	orr.w	r2, r2, #4
 800106c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800106e:	f7ff fb9b 	bl	80007a8 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001074:	e01b      	b.n	80010ae <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001076:	f7ff fb97 	bl	80007a8 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b0a      	cmp	r3, #10
 8001082:	d914      	bls.n	80010ae <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00d      	beq.n	80010ae <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001096:	f023 0312 	bic.w	r3, r3, #18
 800109a:	f043 0210 	orr.w	r2, r3, #16
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e013      	b.n	80010d6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1dc      	bne.n	8001076 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c0:	f023 0303 	bic.w	r3, r3, #3
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	371c      	adds	r7, #28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000000 	.word	0x20000000

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4906      	ldr	r1, [pc, #24]	@ (800117c <__NVIC_EnableIRQ+0x34>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	@ (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	@ (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff90 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff2d 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff42 	bl	800112c <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff90 	bl	80011d4 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5f 	bl	8001180 <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff35 	bl	8001148 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e043      	b.n	800139e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <HAL_DMA_Init+0xa8>)
 800131e:	4413      	add	r3, r2
 8001320:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <HAL_DMA_Init+0xac>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	009a      	lsls	r2, r3, #2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1f      	ldr	r2, [pc, #124]	@ (80013b0 <HAL_DMA_Init+0xb0>)
 8001332:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2202      	movs	r2, #2
 8001338:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800134a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800134e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	bffdfff8 	.word	0xbffdfff8
 80013ac:	cccccccd 	.word	0xcccccccd
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_DMA_Start_IT+0x20>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e04b      	b.n	800146c <HAL_DMA_Start_IT+0xb8>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d13a      	bne.n	800145e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f937 	bl	8001680 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d008      	beq.n	800142c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 020e 	orr.w	r2, r2, #14
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e00f      	b.n	800144c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 020a 	orr.w	r2, r2, #10
 800144a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e005      	b.n	800146a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001466:	2302      	movs	r3, #2
 8001468:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800146a:	7dfb      	ldrb	r3, [r7, #23]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	2204      	movs	r2, #4
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d04f      	beq.n	800153c <HAL_DMA_IRQHandler+0xc8>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d04a      	beq.n	800153c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0320 	and.w	r3, r3, #32
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d107      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0204 	bic.w	r2, r2, #4
 80014c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a66      	ldr	r2, [pc, #408]	@ (8001664 <HAL_DMA_IRQHandler+0x1f0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d029      	beq.n	8001522 <HAL_DMA_IRQHandler+0xae>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a65      	ldr	r2, [pc, #404]	@ (8001668 <HAL_DMA_IRQHandler+0x1f4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d022      	beq.n	800151e <HAL_DMA_IRQHandler+0xaa>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a63      	ldr	r2, [pc, #396]	@ (800166c <HAL_DMA_IRQHandler+0x1f8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d01a      	beq.n	8001518 <HAL_DMA_IRQHandler+0xa4>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a62      	ldr	r2, [pc, #392]	@ (8001670 <HAL_DMA_IRQHandler+0x1fc>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_IRQHandler+0x9e>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a60      	ldr	r2, [pc, #384]	@ (8001674 <HAL_DMA_IRQHandler+0x200>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00a      	beq.n	800150c <HAL_DMA_IRQHandler+0x98>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001678 <HAL_DMA_IRQHandler+0x204>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d102      	bne.n	8001506 <HAL_DMA_IRQHandler+0x92>
 8001500:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001504:	e00e      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 8001506:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800150a:	e00b      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 800150c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001510:	e008      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 8001512:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001516:	e005      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 8001518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800151c:	e002      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 800151e:	2340      	movs	r3, #64	@ 0x40
 8001520:	e000      	b.n	8001524 <HAL_DMA_IRQHandler+0xb0>
 8001522:	2304      	movs	r3, #4
 8001524:	4a55      	ldr	r2, [pc, #340]	@ (800167c <HAL_DMA_IRQHandler+0x208>)
 8001526:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8094 	beq.w	800165a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800153a:	e08e      	b.n	800165a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	2202      	movs	r2, #2
 8001542:	409a      	lsls	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d056      	beq.n	80015fa <HAL_DMA_IRQHandler+0x186>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d051      	beq.n	80015fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10b      	bne.n	800157c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020a 	bic.w	r2, r2, #10
 8001572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a38      	ldr	r2, [pc, #224]	@ (8001664 <HAL_DMA_IRQHandler+0x1f0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d029      	beq.n	80015da <HAL_DMA_IRQHandler+0x166>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a37      	ldr	r2, [pc, #220]	@ (8001668 <HAL_DMA_IRQHandler+0x1f4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d022      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x162>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a35      	ldr	r2, [pc, #212]	@ (800166c <HAL_DMA_IRQHandler+0x1f8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d01a      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x15c>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a34      	ldr	r2, [pc, #208]	@ (8001670 <HAL_DMA_IRQHandler+0x1fc>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d012      	beq.n	80015ca <HAL_DMA_IRQHandler+0x156>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a32      	ldr	r2, [pc, #200]	@ (8001674 <HAL_DMA_IRQHandler+0x200>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00a      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x150>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a31      	ldr	r2, [pc, #196]	@ (8001678 <HAL_DMA_IRQHandler+0x204>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d102      	bne.n	80015be <HAL_DMA_IRQHandler+0x14a>
 80015b8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015bc:	e00e      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015c2:	e00b      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015c8:	e008      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ce:	e005      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015d4:	e002      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015d6:	2320      	movs	r3, #32
 80015d8:	e000      	b.n	80015dc <HAL_DMA_IRQHandler+0x168>
 80015da:	2302      	movs	r3, #2
 80015dc:	4a27      	ldr	r2, [pc, #156]	@ (800167c <HAL_DMA_IRQHandler+0x208>)
 80015de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d034      	beq.n	800165a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015f8:	e02f      	b.n	800165a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	2208      	movs	r2, #8
 8001600:	409a      	lsls	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d028      	beq.n	800165c <HAL_DMA_IRQHandler+0x1e8>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 020e 	bic.w	r2, r2, #14
 8001622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	4798      	blx	r3
    }
  }
  return;
 800165a:	bf00      	nop
 800165c:	bf00      	nop
}
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020008 	.word	0x40020008
 8001668:	4002001c 	.word	0x4002001c
 800166c:	40020030 	.word	0x40020030
 8001670:	40020044 	.word	0x40020044
 8001674:	40020058 	.word	0x40020058
 8001678:	4002006c 	.word	0x4002006c
 800167c:	40020000 	.word	0x40020000

08001680 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d108      	bne.n	80016c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016be:	e007      	b.n	80016d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b08b      	sub	sp, #44	@ 0x2c
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	e161      	b.n	80019b4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f0:	2201      	movs	r2, #1
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	429a      	cmp	r2, r3
 800170a:	f040 8150 	bne.w	80019ae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a97      	ldr	r2, [pc, #604]	@ (8001970 <HAL_GPIO_Init+0x294>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d05e      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001718:	4a95      	ldr	r2, [pc, #596]	@ (8001970 <HAL_GPIO_Init+0x294>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d875      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800171e:	4a95      	ldr	r2, [pc, #596]	@ (8001974 <HAL_GPIO_Init+0x298>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d058      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001724:	4a93      	ldr	r2, [pc, #588]	@ (8001974 <HAL_GPIO_Init+0x298>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d86f      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800172a:	4a93      	ldr	r2, [pc, #588]	@ (8001978 <HAL_GPIO_Init+0x29c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d052      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001730:	4a91      	ldr	r2, [pc, #580]	@ (8001978 <HAL_GPIO_Init+0x29c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d869      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001736:	4a91      	ldr	r2, [pc, #580]	@ (800197c <HAL_GPIO_Init+0x2a0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d04c      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 800173c:	4a8f      	ldr	r2, [pc, #572]	@ (800197c <HAL_GPIO_Init+0x2a0>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d863      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001742:	4a8f      	ldr	r2, [pc, #572]	@ (8001980 <HAL_GPIO_Init+0x2a4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d046      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
 8001748:	4a8d      	ldr	r2, [pc, #564]	@ (8001980 <HAL_GPIO_Init+0x2a4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d85d      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 800174e:	2b12      	cmp	r3, #18
 8001750:	d82a      	bhi.n	80017a8 <HAL_GPIO_Init+0xcc>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d859      	bhi.n	800180a <HAL_GPIO_Init+0x12e>
 8001756:	a201      	add	r2, pc, #4	@ (adr r2, 800175c <HAL_GPIO_Init+0x80>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	080017d7 	.word	0x080017d7
 8001760:	080017b1 	.word	0x080017b1
 8001764:	080017c3 	.word	0x080017c3
 8001768:	08001805 	.word	0x08001805
 800176c:	0800180b 	.word	0x0800180b
 8001770:	0800180b 	.word	0x0800180b
 8001774:	0800180b 	.word	0x0800180b
 8001778:	0800180b 	.word	0x0800180b
 800177c:	0800180b 	.word	0x0800180b
 8001780:	0800180b 	.word	0x0800180b
 8001784:	0800180b 	.word	0x0800180b
 8001788:	0800180b 	.word	0x0800180b
 800178c:	0800180b 	.word	0x0800180b
 8001790:	0800180b 	.word	0x0800180b
 8001794:	0800180b 	.word	0x0800180b
 8001798:	0800180b 	.word	0x0800180b
 800179c:	0800180b 	.word	0x0800180b
 80017a0:	080017b9 	.word	0x080017b9
 80017a4:	080017cd 	.word	0x080017cd
 80017a8:	4a76      	ldr	r2, [pc, #472]	@ (8001984 <HAL_GPIO_Init+0x2a8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ae:	e02c      	b.n	800180a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e029      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	3304      	adds	r3, #4
 80017be:	623b      	str	r3, [r7, #32]
          break;
 80017c0:	e024      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	3308      	adds	r3, #8
 80017c8:	623b      	str	r3, [r7, #32]
          break;
 80017ca:	e01f      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	330c      	adds	r3, #12
 80017d2:	623b      	str	r3, [r7, #32]
          break;
 80017d4:	e01a      	b.n	800180c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017de:	2304      	movs	r3, #4
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e013      	b.n	800180c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ec:	2308      	movs	r3, #8
 80017ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	611a      	str	r2, [r3, #16]
          break;
 80017f6:	e009      	b.n	800180c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	615a      	str	r2, [r3, #20]
          break;
 8001802:	e003      	b.n	800180c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x130>
          break;
 800180a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2bff      	cmp	r3, #255	@ 0xff
 8001810:	d801      	bhi.n	8001816 <HAL_GPIO_Init+0x13a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	e001      	b.n	800181a <HAL_GPIO_Init+0x13e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3304      	adds	r3, #4
 800181a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	@ 0xff
 8001820:	d802      	bhi.n	8001828 <HAL_GPIO_Init+0x14c>
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x152>
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	3b08      	subs	r3, #8
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	210f      	movs	r1, #15
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	6a39      	ldr	r1, [r7, #32]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80a9 	beq.w	80019ae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800185c:	4b4a      	ldr	r3, [pc, #296]	@ (8001988 <HAL_GPIO_Init+0x2ac>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	4a49      	ldr	r2, [pc, #292]	@ (8001988 <HAL_GPIO_Init+0x2ac>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6193      	str	r3, [r2, #24]
 8001868:	4b47      	ldr	r3, [pc, #284]	@ (8001988 <HAL_GPIO_Init+0x2ac>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001874:	4a45      	ldr	r2, [pc, #276]	@ (800198c <HAL_GPIO_Init+0x2b0>)
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001880:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a3d      	ldr	r2, [pc, #244]	@ (8001990 <HAL_GPIO_Init+0x2b4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d00d      	beq.n	80018bc <HAL_GPIO_Init+0x1e0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001994 <HAL_GPIO_Init+0x2b8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001998 <HAL_GPIO_Init+0x2bc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d101      	bne.n	80018b4 <HAL_GPIO_Init+0x1d8>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e004      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <HAL_GPIO_Init+0x1e2>
 80018bc:	2300      	movs	r3, #0
 80018be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c0:	f002 0203 	and.w	r2, r2, #3
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	4093      	lsls	r3, r2
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ce:	492f      	ldr	r1, [pc, #188]	@ (800198c <HAL_GPIO_Init+0x2b0>)
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e8:	4b2c      	ldr	r3, [pc, #176]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	492b      	ldr	r1, [pc, #172]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018f6:	4b29      	ldr	r3, [pc, #164]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4927      	ldr	r1, [pc, #156]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001900:	4013      	ands	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001910:	4b22      	ldr	r3, [pc, #136]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4921      	ldr	r1, [pc, #132]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800191e:	4b1f      	ldr	r3, [pc, #124]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	43db      	mvns	r3, r3
 8001926:	491d      	ldr	r1, [pc, #116]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001928:	4013      	ands	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001938:	4b18      	ldr	r3, [pc, #96]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4917      	ldr	r1, [pc, #92]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	43db      	mvns	r3, r3
 800194e:	4913      	ldr	r1, [pc, #76]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001950:	4013      	ands	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01f      	beq.n	80019a0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001960:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	490d      	ldr	r1, [pc, #52]	@ (800199c <HAL_GPIO_Init+0x2c0>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]
 800196c:	e01f      	b.n	80019ae <HAL_GPIO_Init+0x2d2>
 800196e:	bf00      	nop
 8001970:	10320000 	.word	0x10320000
 8001974:	10310000 	.word	0x10310000
 8001978:	10220000 	.word	0x10220000
 800197c:	10210000 	.word	0x10210000
 8001980:	10120000 	.word	0x10120000
 8001984:	10110000 	.word	0x10110000
 8001988:	40021000 	.word	0x40021000
 800198c:	40010000 	.word	0x40010000
 8001990:	40010800 	.word	0x40010800
 8001994:	40010c00 	.word	0x40010c00
 8001998:	40011000 	.word	0x40011000
 800199c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_GPIO_Init+0x2f4>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4909      	ldr	r1, [pc, #36]	@ (80019d0 <HAL_GPIO_Init+0x2f4>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	3301      	adds	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	fa22 f303 	lsr.w	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f47f ae96 	bne.w	80016f0 <HAL_GPIO_Init+0x14>
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	372c      	adds	r7, #44	@ 0x2c
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e272      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8087 	beq.w	8001b02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f4:	4b92      	ldr	r3, [pc, #584]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d00c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a00:	4b8f      	ldr	r3, [pc, #572]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d112      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e>
 8001a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b89      	ldr	r3, [pc, #548]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d06c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x12c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d168      	bne.n	8001b00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e24c      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x76>
 8001a3c:	4b80      	ldr	r3, [pc, #512]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a7f      	ldr	r2, [pc, #508]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e02e      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x98>
 8001a52:	4b7b      	ldr	r3, [pc, #492]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7a      	ldr	r2, [pc, #488]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b78      	ldr	r3, [pc, #480]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a77      	ldr	r2, [pc, #476]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e01d      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0xbc>
 8001a76:	4b72      	ldr	r3, [pc, #456]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a71      	ldr	r2, [pc, #452]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b6f      	ldr	r3, [pc, #444]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0xd4>
 8001a90:	4b6b      	ldr	r3, [pc, #428]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a6a      	ldr	r2, [pc, #424]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	4b68      	ldr	r3, [pc, #416]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a67      	ldr	r2, [pc, #412]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d013      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7fe fe7a 	bl	80007a8 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7fe fe76 	bl	80007a8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	@ 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e200      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	4b5d      	ldr	r3, [pc, #372]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0xe4>
 8001ad6:	e014      	b.n	8001b02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe fe66 	bl	80007a8 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7fe fe62 	bl	80007a8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	@ 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1ec      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x10c>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d063      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b1a:	4b49      	ldr	r3, [pc, #292]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d11c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x18c>
 8001b26:	4b46      	ldr	r3, [pc, #280]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e1c0      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4939      	ldr	r1, [pc, #228]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5e:	e03a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b68:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe fe1b 	bl	80007a8 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b76:	f7fe fe17 	bl	80007a8 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e1a1      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	4b2d      	ldr	r3, [pc, #180]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b94:	4b2a      	ldr	r3, [pc, #168]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4927      	ldr	r1, [pc, #156]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e015      	b.n	8001bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001baa:	4b26      	ldr	r3, [pc, #152]	@ (8001c44 <HAL_RCC_OscConfig+0x270>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fdfa 	bl	80007a8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb8:	f7fe fdf6 	bl	80007a8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e180      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	4b1d      	ldr	r3, [pc, #116]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d03a      	beq.n	8001c58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d019      	beq.n	8001c1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7fe fdda 	bl	80007a8 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7fe fdd6 	bl	80007a8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e160      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f000 faba 	bl	8002190 <RCC_Delay>
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_RCC_OscConfig+0x274>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c24:	f7fe fdc0 	bl	80007a8 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7fe fdbc 	bl	80007a8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d908      	bls.n	8001c4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e146      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	42420000 	.word	0x42420000
 8001c48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	4b92      	ldr	r3, [pc, #584]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e9      	bne.n	8001c2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80a6 	beq.w	8001db2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10d      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b88      	ldr	r3, [pc, #544]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a87      	ldr	r2, [pc, #540]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b85      	ldr	r3, [pc, #532]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b82      	ldr	r3, [pc, #520]	@ (8001e9c <HAL_RCC_OscConfig+0x4c8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e9c <HAL_RCC_OscConfig+0x4c8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7e      	ldr	r2, [pc, #504]	@ (8001e9c <HAL_RCC_OscConfig+0x4c8>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7fe fd7d 	bl	80007a8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7fe fd79 	bl	80007a8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b64      	cmp	r3, #100	@ 0x64
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e103      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b75      	ldr	r3, [pc, #468]	@ (8001e9c <HAL_RCC_OscConfig+0x4c8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x312>
 8001cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a6e      	ldr	r2, [pc, #440]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x334>
 8001cee:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a69      	ldr	r2, [pc, #420]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b67      	ldr	r3, [pc, #412]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a66      	ldr	r2, [pc, #408]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	e01c      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b05      	cmp	r3, #5
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x356>
 8001d10:	4b61      	ldr	r3, [pc, #388]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4a60      	ldr	r2, [pc, #384]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6213      	str	r3, [r2, #32]
 8001d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a5d      	ldr	r2, [pc, #372]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	e00b      	b.n	8001d42 <HAL_RCC_OscConfig+0x36e>
 8001d2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	4a5a      	ldr	r2, [pc, #360]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6213      	str	r3, [r2, #32]
 8001d36:	4b58      	ldr	r3, [pc, #352]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a57      	ldr	r2, [pc, #348]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7fe fd2d 	bl	80007a8 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe fd29 	bl	80007a8 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0b1      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	4b4b      	ldr	r3, [pc, #300]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ee      	beq.n	8001d52 <HAL_RCC_OscConfig+0x37e>
 8001d74:	e014      	b.n	8001da0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7fe fd17 	bl	80007a8 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7fe fd13 	bl	80007a8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e09b      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	4b40      	ldr	r3, [pc, #256]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001da0:	7dfb      	ldrb	r3, [r7, #23]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d105      	bne.n	8001db2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b3c      	ldr	r3, [pc, #240]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a3b      	ldr	r2, [pc, #236]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8087 	beq.w	8001eca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dbc:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d061      	beq.n	8001e8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d146      	bne.n	8001e5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	4b33      	ldr	r3, [pc, #204]	@ (8001ea0 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd6:	f7fe fce7 	bl	80007a8 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dde:	f7fe fce3 	bl	80007a8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e06d      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e04:	d108      	bne.n	8001e18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e06:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4921      	ldr	r1, [pc, #132]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e18:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a19      	ldr	r1, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	491b      	ldr	r1, [pc, #108]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_RCC_OscConfig+0x4cc>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fcb7 	bl	80007a8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7fe fcb3 	bl	80007a8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e03d      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46a>
 8001e5c:	e035      	b.n	8001eca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_RCC_OscConfig+0x4cc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fca0 	bl	80007a8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe fc9c 	bl	80007a8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e026      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x498>
 8001e8a:	e01e      	b.n	8001eca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e019      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <HAL_RCC_OscConfig+0x500>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0d0      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b6a      	ldr	r3, [pc, #424]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d910      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b67      	ldr	r3, [pc, #412]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4965      	ldr	r1, [pc, #404]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b63      	ldr	r3, [pc, #396]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0b8      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d020      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f34:	4b59      	ldr	r3, [pc, #356]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a58      	ldr	r2, [pc, #352]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f4c:	4b53      	ldr	r3, [pc, #332]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a52      	ldr	r2, [pc, #328]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f58:	4b50      	ldr	r3, [pc, #320]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	494d      	ldr	r1, [pc, #308]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d040      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d107      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7e:	4b47      	ldr	r3, [pc, #284]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d115      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e07f      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f96:	4b41      	ldr	r3, [pc, #260]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d109      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e073      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06b      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fb6:	4b39      	ldr	r3, [pc, #228]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f023 0203 	bic.w	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4936      	ldr	r1, [pc, #216]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fbee 	bl	80007a8 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd0:	f7fe fbea 	bl	80007a8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e053      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 020c 	and.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d1eb      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d210      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4922      	ldr	r1, [pc, #136]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e032      	b.n	800208e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4916      	ldr	r1, [pc, #88]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002052:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	490e      	ldr	r1, [pc, #56]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002066:	f000 f821 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800206a:	4602      	mov	r2, r0
 800206c:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	490a      	ldr	r1, [pc, #40]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002078:	5ccb      	ldrb	r3, [r1, r3]
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	4a09      	ldr	r2, [pc, #36]	@ (80020a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002082:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fb4c 	bl	8000724 <HAL_InitTick>

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40022000 	.word	0x40022000
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003094 	.word	0x08003094
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000004 	.word	0x20000004

080020ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x94>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x30>
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x36>
 80020da:	e027      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020dc:	4b19      	ldr	r3, [pc, #100]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x98>)
 80020de:	613b      	str	r3, [r7, #16]
      break;
 80020e0:	e027      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	0c9b      	lsrs	r3, r3, #18
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	4a17      	ldr	r2, [pc, #92]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d010      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <HAL_RCC_GetSysClockFreq+0x94>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	0c5b      	lsrs	r3, r3, #17
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	4a11      	ldr	r2, [pc, #68]	@ (800214c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002106:	5cd3      	ldrb	r3, [r2, r3]
 8002108:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x98>)
 800210e:	fb03 f202 	mul.w	r2, r3, r2
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e004      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	613b      	str	r3, [r7, #16]
      break;
 800212a:	e002      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x98>)
 800212e:	613b      	str	r3, [r7, #16]
      break;
 8002130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002132:	693b      	ldr	r3, [r7, #16]
}
 8002134:	4618      	mov	r0, r3
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	007a1200 	.word	0x007a1200
 8002148:	080030ac 	.word	0x080030ac
 800214c:	080030bc 	.word	0x080030bc
 8002150:	003d0900 	.word	0x003d0900

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b02      	ldr	r3, [pc, #8]	@ (8002164 <HAL_RCC_GetHCLKFreq+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff fff2 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	@ (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	080030a4 	.word	0x080030a4

08002190 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002198:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <RCC_Delay+0x34>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <RCC_Delay+0x38>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a5b      	lsrs	r3, r3, #9
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ac:	bf00      	nop
  }
  while (Delay --);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	60fa      	str	r2, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f9      	bne.n	80021ac <RCC_Delay+0x1c>
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000000 	.word	0x20000000
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d07d      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ec:	4b4f      	ldr	r3, [pc, #316]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	4b4c      	ldr	r3, [pc, #304]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	4a4b      	ldr	r2, [pc, #300]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002202:	61d3      	str	r3, [r2, #28]
 8002204:	4b49      	ldr	r3, [pc, #292]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	4b46      	ldr	r3, [pc, #280]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d118      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002220:	4b43      	ldr	r3, [pc, #268]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a42      	ldr	r2, [pc, #264]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222c:	f7fe fabc 	bl	80007a8 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	e008      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002234:	f7fe fab8 	bl	80007a8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	@ 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e06d      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b3a      	ldr	r3, [pc, #232]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002252:	4b36      	ldr	r3, [pc, #216]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800225a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d02e      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d027      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002270:	4b2e      	ldr	r3, [pc, #184]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002278:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800227a:	4b2e      	ldr	r3, [pc, #184]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002280:	4b2c      	ldr	r3, [pc, #176]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002286:	4a29      	ldr	r2, [pc, #164]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d014      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fa87 	bl	80007a8 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	e00a      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229e:	f7fe fa83 	bl	80007a8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e036      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b4:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ee      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022c0:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4917      	ldr	r1, [pc, #92]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b14      	ldr	r3, [pc, #80]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	4a13      	ldr	r2, [pc, #76]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	490b      	ldr	r1, [pc, #44]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800230e:	4b07      	ldr	r3, [pc, #28]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4904      	ldr	r1, [pc, #16]	@ (800232c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40007000 	.word	0x40007000
 8002334:	42420440 	.word	0x42420440

08002338 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b10      	cmp	r3, #16
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b10      	cmp	r3, #16
 800235e:	f200 808a 	bhi.w	8002476 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d045      	beq.n	80023f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d075      	beq.n	800245a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800236e:	e082      	b.n	8002476 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002370:	4b46      	ldr	r3, [pc, #280]	@ (800248c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002376:	4b45      	ldr	r3, [pc, #276]	@ (800248c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d07b      	beq.n	800247a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0c9b      	lsrs	r3, r3, #18
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a41      	ldr	r2, [pc, #260]	@ (8002490 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d015      	beq.n	80023c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800239a:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0c5b      	lsrs	r3, r3, #17
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002494 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80023a6:	5cd3      	ldrb	r3, [r2, r3]
 80023a8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80023b4:	4a38      	ldr	r2, [pc, #224]	@ (8002498 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	e004      	b.n	80023d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a34      	ldr	r2, [pc, #208]	@ (800249c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80023d0:	4b2e      	ldr	r3, [pc, #184]	@ (800248c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023dc:	d102      	bne.n	80023e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	61bb      	str	r3, [r7, #24]
      break;
 80023e2:	e04a      	b.n	800247a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]
      break;
 80023f2:	e042      	b.n	800247a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80023f4:	4b25      	ldr	r3, [pc, #148]	@ (800248c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002404:	d108      	bne.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	e01f      	b.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800241e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002422:	d109      	bne.n	8002438 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002424:	4b19      	ldr	r3, [pc, #100]	@ (800248c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002430:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	e00f      	b.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800243e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002442:	d11c      	bne.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002450:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002454:	61bb      	str	r3, [r7, #24]
      break;
 8002456:	e012      	b.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002458:	e011      	b.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800245a:	f7ff fe85 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0b9b      	lsrs	r3, r3, #14
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	61bb      	str	r3, [r7, #24]
      break;
 8002474:	e004      	b.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002476:	bf00      	nop
 8002478:	e002      	b.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800247e:	bf00      	nop
    }
  }
  return (frequency);
 8002480:	69bb      	ldr	r3, [r7, #24]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	080030c0 	.word	0x080030c0
 8002494:	080030d0 	.word	0x080030d0
 8002498:	007a1200 	.word	0x007a1200
 800249c:	003d0900 	.word	0x003d0900
 80024a0:	aaaaaaab 	.word	0xaaaaaaab

080024a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e041      	b.n	800253a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe f866 	bl	800059c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f000 faac 	bl	8002a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e041      	b.n	80025d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f839 	bl	80025e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2202      	movs	r2, #2
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f000 fa5d 	bl	8002a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_TIM_PWM_Start+0x24>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e022      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b04      	cmp	r3, #4
 800261c:	d109      	bne.n	8002632 <HAL_TIM_PWM_Start+0x3e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e015      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d109      	bne.n	800264c <HAL_TIM_PWM_Start+0x58>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e008      	b.n	800265e <HAL_TIM_PWM_Start+0x6a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e059      	b.n	800271a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_TIM_PWM_Start+0x82>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002674:	e013      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d104      	bne.n	8002686 <HAL_TIM_PWM_Start+0x92>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002684:	e00b      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start+0xa2>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002694:	e003      	b.n	800269e <HAL_TIM_PWM_Start+0xaa>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2201      	movs	r2, #1
 80026a4:	6839      	ldr	r1, [r7, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fc40 	bl	8002f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002724 <HAL_TIM_PWM_Start+0x130>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d107      	bne.n	80026c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a16      	ldr	r2, [pc, #88]	@ (8002724 <HAL_TIM_PWM_Start+0x130>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_TIM_PWM_Start+0xf0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d8:	d004      	beq.n	80026e4 <HAL_TIM_PWM_Start+0xf0>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <HAL_TIM_PWM_Start+0x134>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d111      	bne.n	8002708 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d010      	beq.n	8002718 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002706:	e007      	b.n	8002718 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40000400 	.word	0x40000400

0800272c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002746:	2302      	movs	r3, #2
 8002748:	e0ae      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	f200 809f 	bhi.w	8002898 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800275a:	a201      	add	r2, pc, #4	@ (adr r2, 8002760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002795 	.word	0x08002795
 8002764:	08002899 	.word	0x08002899
 8002768:	08002899 	.word	0x08002899
 800276c:	08002899 	.word	0x08002899
 8002770:	080027d5 	.word	0x080027d5
 8002774:	08002899 	.word	0x08002899
 8002778:	08002899 	.word	0x08002899
 800277c:	08002899 	.word	0x08002899
 8002780:	08002817 	.word	0x08002817
 8002784:	08002899 	.word	0x08002899
 8002788:	08002899 	.word	0x08002899
 800278c:	08002899 	.word	0x08002899
 8002790:	08002857 	.word	0x08002857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 f9a8 	bl	8002af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0204 	bic.w	r2, r2, #4
 80027be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6999      	ldr	r1, [r3, #24]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	619a      	str	r2, [r3, #24]
      break;
 80027d2:	e064      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f9ee 	bl	8002bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6999      	ldr	r1, [r3, #24]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	021a      	lsls	r2, r3, #8
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	619a      	str	r2, [r3, #24]
      break;
 8002814:	e043      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fa37 	bl	8002c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0208 	orr.w	r2, r2, #8
 8002830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0204 	bic.w	r2, r2, #4
 8002840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69d9      	ldr	r1, [r3, #28]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	61da      	str	r2, [r3, #28]
      break;
 8002854:	e023      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fa81 	bl	8002d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69da      	ldr	r2, [r3, #28]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69d9      	ldr	r1, [r3, #28]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	021a      	lsls	r2, r3, #8
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	61da      	str	r2, [r3, #28]
      break;
 8002896:	e002      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	75fb      	strb	r3, [r7, #23]
      break;
 800289c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_TIM_ConfigClockSource+0x1c>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0b4      	b.n	8002a36 <HAL_TIM_ConfigClockSource+0x186>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002904:	d03e      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0xd4>
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800290a:	f200 8087 	bhi.w	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800290e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002912:	f000 8086 	beq.w	8002a22 <HAL_TIM_ConfigClockSource+0x172>
 8002916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800291a:	d87f      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b70      	cmp	r3, #112	@ 0x70
 800291e:	d01a      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0xa6>
 8002920:	2b70      	cmp	r3, #112	@ 0x70
 8002922:	d87b      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b60      	cmp	r3, #96	@ 0x60
 8002926:	d050      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x11a>
 8002928:	2b60      	cmp	r3, #96	@ 0x60
 800292a:	d877      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800292c:	2b50      	cmp	r3, #80	@ 0x50
 800292e:	d03c      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0xfa>
 8002930:	2b50      	cmp	r3, #80	@ 0x50
 8002932:	d873      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 8002934:	2b40      	cmp	r3, #64	@ 0x40
 8002936:	d058      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x13a>
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d86f      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800293c:	2b30      	cmp	r3, #48	@ 0x30
 800293e:	d064      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x15a>
 8002940:	2b30      	cmp	r3, #48	@ 0x30
 8002942:	d86b      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 8002944:	2b20      	cmp	r3, #32
 8002946:	d060      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x15a>
 8002948:	2b20      	cmp	r3, #32
 800294a:	d867      	bhi.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05c      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x15a>
 8002950:	2b10      	cmp	r3, #16
 8002952:	d05a      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x15a>
 8002954:	e062      	b.n	8002a1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002966:	f000 fac2 	bl	8002eee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	609a      	str	r2, [r3, #8]
      break;
 8002982:	e04f      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002994:	f000 faab 	bl	8002eee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029a6:	609a      	str	r2, [r3, #8]
      break;
 80029a8:	e03c      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b6:	461a      	mov	r2, r3
 80029b8:	f000 fa22 	bl	8002e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2150      	movs	r1, #80	@ 0x50
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fa79 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 80029c8:	e02c      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029d6:	461a      	mov	r2, r3
 80029d8:	f000 fa40 	bl	8002e5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2160      	movs	r1, #96	@ 0x60
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fa69 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 80029e8:	e01c      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f6:	461a      	mov	r2, r3
 80029f8:	f000 fa02 	bl	8002e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2140      	movs	r1, #64	@ 0x40
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fa59 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 8002a08:	e00c      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f000 fa50 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 8002a1a:	e003      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a20:	e000      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a25      	ldr	r2, [pc, #148]	@ (8002ae8 <TIM_Base_SetConfig+0xa8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <TIM_Base_SetConfig+0x28>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0x28>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <TIM_Base_SetConfig+0xac>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d108      	bne.n	8002a7a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae8 <TIM_Base_SetConfig+0xa8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <TIM_Base_SetConfig+0x52>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a88:	d003      	beq.n	8002a92 <TIM_Base_SetConfig+0x52>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a17      	ldr	r2, [pc, #92]	@ (8002aec <TIM_Base_SetConfig+0xac>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d108      	bne.n	8002aa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a07      	ldr	r2, [pc, #28]	@ (8002ae8 <TIM_Base_SetConfig+0xa8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d103      	bne.n	8002ad8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	615a      	str	r2, [r3, #20]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40000400 	.word	0x40000400

08002af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f023 0201 	bic.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f023 0302 	bic.w	r3, r3, #2
 8002b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <TIM_OC1_SetConfig+0xc8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10c      	bne.n	8002b66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0308 	bic.w	r3, r3, #8
 8002b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a13      	ldr	r2, [pc, #76]	@ (8002bb8 <TIM_OC1_SetConfig+0xc8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d111      	bne.n	8002b92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	621a      	str	r2, [r3, #32]
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40012c00 	.word	0x40012c00

08002bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f023 0210 	bic.w	r2, r3, #16
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0320 	bic.w	r3, r3, #32
 8002c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <TIM_OC2_SetConfig+0xd0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10d      	bne.n	8002c38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a14      	ldr	r2, [pc, #80]	@ (8002c8c <TIM_OC2_SetConfig+0xd0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d113      	bne.n	8002c68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40012c00 	.word	0x40012c00

08002c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d60 <TIM_OC3_SetConfig+0xd0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10d      	bne.n	8002d0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <TIM_OC3_SetConfig+0xd0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d113      	bne.n	8002d3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	621a      	str	r2, [r3, #32]
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00

08002d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	031b      	lsls	r3, r3, #12
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002dfc <TIM_OC4_SetConfig+0x98>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d109      	bne.n	8002dd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	019b      	lsls	r3, r3, #6
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40012c00 	.word	0x40012c00

08002e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	f023 0201 	bic.w	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f023 030a 	bic.w	r3, r3, #10
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f023 0210 	bic.w	r2, r3, #16
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	031b      	lsls	r3, r3, #12
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	621a      	str	r2, [r3, #32]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f043 0307 	orr.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b087      	sub	sp, #28
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	021a      	lsls	r2, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	609a      	str	r2, [r3, #8]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2201      	movs	r2, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	401a      	ands	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e041      	b.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a14      	ldr	r2, [pc, #80]	@ (800301c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd8:	d004      	beq.n	8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a10      	ldr	r2, [pc, #64]	@ (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10c      	bne.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40000400 	.word	0x40000400

08003024 <memset>:
 8003024:	4603      	mov	r3, r0
 8003026:	4402      	add	r2, r0
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	f803 1b01 	strb.w	r1, [r3], #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <__libc_init_array>:
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	2600      	movs	r6, #0
 8003038:	4d0c      	ldr	r5, [pc, #48]	@ (800306c <__libc_init_array+0x38>)
 800303a:	4c0d      	ldr	r4, [pc, #52]	@ (8003070 <__libc_init_array+0x3c>)
 800303c:	1b64      	subs	r4, r4, r5
 800303e:	10a4      	asrs	r4, r4, #2
 8003040:	42a6      	cmp	r6, r4
 8003042:	d109      	bne.n	8003058 <__libc_init_array+0x24>
 8003044:	f000 f81a 	bl	800307c <_init>
 8003048:	2600      	movs	r6, #0
 800304a:	4d0a      	ldr	r5, [pc, #40]	@ (8003074 <__libc_init_array+0x40>)
 800304c:	4c0a      	ldr	r4, [pc, #40]	@ (8003078 <__libc_init_array+0x44>)
 800304e:	1b64      	subs	r4, r4, r5
 8003050:	10a4      	asrs	r4, r4, #2
 8003052:	42a6      	cmp	r6, r4
 8003054:	d105      	bne.n	8003062 <__libc_init_array+0x2e>
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	f855 3b04 	ldr.w	r3, [r5], #4
 800305c:	4798      	blx	r3
 800305e:	3601      	adds	r6, #1
 8003060:	e7ee      	b.n	8003040 <__libc_init_array+0xc>
 8003062:	f855 3b04 	ldr.w	r3, [r5], #4
 8003066:	4798      	blx	r3
 8003068:	3601      	adds	r6, #1
 800306a:	e7f2      	b.n	8003052 <__libc_init_array+0x1e>
 800306c:	080030d4 	.word	0x080030d4
 8003070:	080030d4 	.word	0x080030d4
 8003074:	080030d4 	.word	0x080030d4
 8003078:	080030d8 	.word	0x080030d8

0800307c <_init>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	bf00      	nop
 8003080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003082:	bc08      	pop	{r3}
 8003084:	469e      	mov	lr, r3
 8003086:	4770      	bx	lr

08003088 <_fini>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	bf00      	nop
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr
