
Dinamic_IND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002614  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002720  08002720  00003720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002744  08002744  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002744  08002744  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002744  08002744  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002744  08002744  00003744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800274c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  0800275c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800275c  0000407c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ecc  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001769  00000000  00000000  0000bf05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000d670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000739  00000000  00000000  0000dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016493  00000000  00000000  0000e709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a11f  00000000  00000000  00024b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082350  00000000  00000000  0002ecbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b100b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002640  00000000  00000000  000b1050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b3690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002708 	.word	0x08002708

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002708 	.word	0x08002708

0800014c <ledprint>:

uint8_t R1=0, R2=0, R3=0, R4=0;
uint8_t delay = 500;

void ledprint(uint16_t number)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	R1 = number%10;
 8000156:	88fa      	ldrh	r2, [r7, #6]
 8000158:	4b63      	ldr	r3, [pc, #396]	@ (80002e8 <ledprint+0x19c>)
 800015a:	fba3 1302 	umull	r1, r3, r3, r2
 800015e:	08d9      	lsrs	r1, r3, #3
 8000160:	460b      	mov	r3, r1
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	440b      	add	r3, r1
 8000166:	005b      	lsls	r3, r3, #1
 8000168:	1ad3      	subs	r3, r2, r3
 800016a:	b29b      	uxth	r3, r3
 800016c:	b2da      	uxtb	r2, r3
 800016e:	4b5f      	ldr	r3, [pc, #380]	@ (80002ec <ledprint+0x1a0>)
 8000170:	701a      	strb	r2, [r3, #0]
	R2 = number%100/10;
 8000172:	88fb      	ldrh	r3, [r7, #6]
 8000174:	4a5e      	ldr	r2, [pc, #376]	@ (80002f0 <ledprint+0x1a4>)
 8000176:	fba2 1203 	umull	r1, r2, r2, r3
 800017a:	0952      	lsrs	r2, r2, #5
 800017c:	2164      	movs	r1, #100	@ 0x64
 800017e:	fb01 f202 	mul.w	r2, r1, r2
 8000182:	1a9b      	subs	r3, r3, r2
 8000184:	b29b      	uxth	r3, r3
 8000186:	4a58      	ldr	r2, [pc, #352]	@ (80002e8 <ledprint+0x19c>)
 8000188:	fba2 2303 	umull	r2, r3, r2, r3
 800018c:	08db      	lsrs	r3, r3, #3
 800018e:	b29b      	uxth	r3, r3
 8000190:	b2da      	uxtb	r2, r3
 8000192:	4b58      	ldr	r3, [pc, #352]	@ (80002f4 <ledprint+0x1a8>)
 8000194:	701a      	strb	r2, [r3, #0]
	R3 = number%1000/100;
 8000196:	88fb      	ldrh	r3, [r7, #6]
 8000198:	4a57      	ldr	r2, [pc, #348]	@ (80002f8 <ledprint+0x1ac>)
 800019a:	fba2 1203 	umull	r1, r2, r2, r3
 800019e:	0992      	lsrs	r2, r2, #6
 80001a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80001a4:	fb01 f202 	mul.w	r2, r1, r2
 80001a8:	1a9b      	subs	r3, r3, r2
 80001aa:	b29b      	uxth	r3, r3
 80001ac:	4a50      	ldr	r2, [pc, #320]	@ (80002f0 <ledprint+0x1a4>)
 80001ae:	fba2 2303 	umull	r2, r3, r2, r3
 80001b2:	095b      	lsrs	r3, r3, #5
 80001b4:	b29b      	uxth	r3, r3
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	4b50      	ldr	r3, [pc, #320]	@ (80002fc <ledprint+0x1b0>)
 80001ba:	701a      	strb	r2, [r3, #0]
	R4 = number/1000;
 80001bc:	88fb      	ldrh	r3, [r7, #6]
 80001be:	4a4e      	ldr	r2, [pc, #312]	@ (80002f8 <ledprint+0x1ac>)
 80001c0:	fba2 2303 	umull	r2, r3, r2, r3
 80001c4:	099b      	lsrs	r3, r3, #6
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	4b4d      	ldr	r3, [pc, #308]	@ (8000300 <ledprint+0x1b4>)
 80001cc:	701a      	strb	r2, [r3, #0]

	LED_ON_1_RESET;
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d4:	484b      	ldr	r0, [pc, #300]	@ (8000304 <ledprint+0x1b8>)
 80001d6:	f000 ffe3 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_2_SET;
 80001da:	2201      	movs	r2, #1
 80001dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001e0:	4848      	ldr	r0, [pc, #288]	@ (8000304 <ledprint+0x1b8>)
 80001e2:	f000 ffdd 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_3_SET;
 80001e6:	2201      	movs	r2, #1
 80001e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ec:	4845      	ldr	r0, [pc, #276]	@ (8000304 <ledprint+0x1b8>)
 80001ee:	f000 ffd7 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_4_SET;
 80001f2:	2201      	movs	r2, #1
 80001f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001f8:	4842      	ldr	r0, [pc, #264]	@ (8000304 <ledprint+0x1b8>)
 80001fa:	f000 ffd1 	bl	80011a0 <HAL_GPIO_WritePin>
	segchar(R4);
 80001fe:	4b40      	ldr	r3, [pc, #256]	@ (8000300 <ledprint+0x1b4>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f882 	bl	800030c <segchar>
	HAL_Delay(delay);
 8000208:	4b3f      	ldr	r3, [pc, #252]	@ (8000308 <ledprint+0x1bc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	4618      	mov	r0, r3
 800020e:	f000 fd19 	bl	8000c44 <HAL_Delay>

	LED_ON_1_SET;
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000218:	483a      	ldr	r0, [pc, #232]	@ (8000304 <ledprint+0x1b8>)
 800021a:	f000 ffc1 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_2_RESET;
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000224:	4837      	ldr	r0, [pc, #220]	@ (8000304 <ledprint+0x1b8>)
 8000226:	f000 ffbb 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_3_SET;
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000230:	4834      	ldr	r0, [pc, #208]	@ (8000304 <ledprint+0x1b8>)
 8000232:	f000 ffb5 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_4_SET;
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800023c:	4831      	ldr	r0, [pc, #196]	@ (8000304 <ledprint+0x1b8>)
 800023e:	f000 ffaf 	bl	80011a0 <HAL_GPIO_WritePin>
	segchar(R3);
 8000242:	4b2e      	ldr	r3, [pc, #184]	@ (80002fc <ledprint+0x1b0>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f860 	bl	800030c <segchar>
	HAL_Delay(delay);
 800024c:	4b2e      	ldr	r3, [pc, #184]	@ (8000308 <ledprint+0x1bc>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fcf7 	bl	8000c44 <HAL_Delay>

	LED_ON_1_SET;
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800025c:	4829      	ldr	r0, [pc, #164]	@ (8000304 <ledprint+0x1b8>)
 800025e:	f000 ff9f 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_2_SET;
 8000262:	2201      	movs	r2, #1
 8000264:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000268:	4826      	ldr	r0, [pc, #152]	@ (8000304 <ledprint+0x1b8>)
 800026a:	f000 ff99 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_3_RESET;
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000274:	4823      	ldr	r0, [pc, #140]	@ (8000304 <ledprint+0x1b8>)
 8000276:	f000 ff93 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_4_SET;
 800027a:	2201      	movs	r2, #1
 800027c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000280:	4820      	ldr	r0, [pc, #128]	@ (8000304 <ledprint+0x1b8>)
 8000282:	f000 ff8d 	bl	80011a0 <HAL_GPIO_WritePin>
	segchar(R2);
 8000286:	4b1b      	ldr	r3, [pc, #108]	@ (80002f4 <ledprint+0x1a8>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f83e 	bl	800030c <segchar>
	HAL_Delay(delay);
 8000290:	4b1d      	ldr	r3, [pc, #116]	@ (8000308 <ledprint+0x1bc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fcd5 	bl	8000c44 <HAL_Delay>

	LED_ON_1_SET;
 800029a:	2201      	movs	r2, #1
 800029c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002a0:	4818      	ldr	r0, [pc, #96]	@ (8000304 <ledprint+0x1b8>)
 80002a2:	f000 ff7d 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_2_SET;
 80002a6:	2201      	movs	r2, #1
 80002a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ac:	4815      	ldr	r0, [pc, #84]	@ (8000304 <ledprint+0x1b8>)
 80002ae:	f000 ff77 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_3_SET;
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002b8:	4812      	ldr	r0, [pc, #72]	@ (8000304 <ledprint+0x1b8>)
 80002ba:	f000 ff71 	bl	80011a0 <HAL_GPIO_WritePin>
	LED_ON_4_RESET;
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002c4:	480f      	ldr	r0, [pc, #60]	@ (8000304 <ledprint+0x1b8>)
 80002c6:	f000 ff6b 	bl	80011a0 <HAL_GPIO_WritePin>
	segchar(R1);
 80002ca:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <ledprint+0x1a0>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f81c 	bl	800030c <segchar>
	HAL_Delay(delay);
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <ledprint+0x1bc>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fcb3 	bl	8000c44 <HAL_Delay>

}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	cccccccd 	.word	0xcccccccd
 80002ec:	2000002c 	.word	0x2000002c
 80002f0:	51eb851f 	.word	0x51eb851f
 80002f4:	2000002d 	.word	0x2000002d
 80002f8:	10624dd3 	.word	0x10624dd3
 80002fc:	2000002e 	.word	0x2000002e
 8000300:	2000002f 	.word	0x2000002f
 8000304:	40010800 	.word	0x40010800
 8000308:	20000000 	.word	0x20000000

0800030c <segchar>:


void segchar (uint8_t seg)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
	switch(seg)
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b09      	cmp	r3, #9
 800031a:	f200 81b1 	bhi.w	8000680 <segchar+0x374>
 800031e:	a201      	add	r2, pc, #4	@ (adr r2, 8000324 <segchar+0x18>)
 8000320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000324:	0800062f 	.word	0x0800062f
 8000328:	0800034d 	.word	0x0800034d
 800032c:	0800039f 	.word	0x0800039f
 8000330:	080003f1 	.word	0x080003f1
 8000334:	08000443 	.word	0x08000443
 8000338:	08000495 	.word	0x08000495
 800033c:	080004e7 	.word	0x080004e7
 8000340:	08000539 	.word	0x08000539
 8000344:	0800058b 	.word	0x0800058b
 8000348:	080005dd 	.word	0x080005dd
	{
		case 1:
			SA_RESET;SB_SET;SC_SET;SD_RESET;SE_RESET;SF_RESET;SG_RESET;SH_RESET;
 800034c:	2201      	movs	r2, #1
 800034e:	2101      	movs	r1, #1
 8000350:	48cd      	ldr	r0, [pc, #820]	@ (8000688 <segchar+0x37c>)
 8000352:	f000 ff25 	bl	80011a0 <HAL_GPIO_WritePin>
 8000356:	2200      	movs	r2, #0
 8000358:	2102      	movs	r1, #2
 800035a:	48cb      	ldr	r0, [pc, #812]	@ (8000688 <segchar+0x37c>)
 800035c:	f000 ff20 	bl	80011a0 <HAL_GPIO_WritePin>
 8000360:	2200      	movs	r2, #0
 8000362:	2104      	movs	r1, #4
 8000364:	48c8      	ldr	r0, [pc, #800]	@ (8000688 <segchar+0x37c>)
 8000366:	f000 ff1b 	bl	80011a0 <HAL_GPIO_WritePin>
 800036a:	2201      	movs	r2, #1
 800036c:	2108      	movs	r1, #8
 800036e:	48c6      	ldr	r0, [pc, #792]	@ (8000688 <segchar+0x37c>)
 8000370:	f000 ff16 	bl	80011a0 <HAL_GPIO_WritePin>
 8000374:	2201      	movs	r2, #1
 8000376:	2110      	movs	r1, #16
 8000378:	48c3      	ldr	r0, [pc, #780]	@ (8000688 <segchar+0x37c>)
 800037a:	f000 ff11 	bl	80011a0 <HAL_GPIO_WritePin>
 800037e:	2201      	movs	r2, #1
 8000380:	2120      	movs	r1, #32
 8000382:	48c1      	ldr	r0, [pc, #772]	@ (8000688 <segchar+0x37c>)
 8000384:	f000 ff0c 	bl	80011a0 <HAL_GPIO_WritePin>
 8000388:	2201      	movs	r2, #1
 800038a:	2140      	movs	r1, #64	@ 0x40
 800038c:	48be      	ldr	r0, [pc, #760]	@ (8000688 <segchar+0x37c>)
 800038e:	f000 ff07 	bl	80011a0 <HAL_GPIO_WritePin>
 8000392:	2201      	movs	r2, #1
 8000394:	2180      	movs	r1, #128	@ 0x80
 8000396:	48bc      	ldr	r0, [pc, #752]	@ (8000688 <segchar+0x37c>)
 8000398:	f000 ff02 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 800039c:	e170      	b.n	8000680 <segchar+0x374>
		case 2:
			SA_SET;SB_SET;SC_RESET;SD_SET;SE_SET;SF_RESET;SG_SET;SH_RESET;
 800039e:	2200      	movs	r2, #0
 80003a0:	2101      	movs	r1, #1
 80003a2:	48b9      	ldr	r0, [pc, #740]	@ (8000688 <segchar+0x37c>)
 80003a4:	f000 fefc 	bl	80011a0 <HAL_GPIO_WritePin>
 80003a8:	2200      	movs	r2, #0
 80003aa:	2102      	movs	r1, #2
 80003ac:	48b6      	ldr	r0, [pc, #728]	@ (8000688 <segchar+0x37c>)
 80003ae:	f000 fef7 	bl	80011a0 <HAL_GPIO_WritePin>
 80003b2:	2201      	movs	r2, #1
 80003b4:	2104      	movs	r1, #4
 80003b6:	48b4      	ldr	r0, [pc, #720]	@ (8000688 <segchar+0x37c>)
 80003b8:	f000 fef2 	bl	80011a0 <HAL_GPIO_WritePin>
 80003bc:	2200      	movs	r2, #0
 80003be:	2108      	movs	r1, #8
 80003c0:	48b1      	ldr	r0, [pc, #708]	@ (8000688 <segchar+0x37c>)
 80003c2:	f000 feed 	bl	80011a0 <HAL_GPIO_WritePin>
 80003c6:	2200      	movs	r2, #0
 80003c8:	2110      	movs	r1, #16
 80003ca:	48af      	ldr	r0, [pc, #700]	@ (8000688 <segchar+0x37c>)
 80003cc:	f000 fee8 	bl	80011a0 <HAL_GPIO_WritePin>
 80003d0:	2201      	movs	r2, #1
 80003d2:	2120      	movs	r1, #32
 80003d4:	48ac      	ldr	r0, [pc, #688]	@ (8000688 <segchar+0x37c>)
 80003d6:	f000 fee3 	bl	80011a0 <HAL_GPIO_WritePin>
 80003da:	2200      	movs	r2, #0
 80003dc:	2140      	movs	r1, #64	@ 0x40
 80003de:	48aa      	ldr	r0, [pc, #680]	@ (8000688 <segchar+0x37c>)
 80003e0:	f000 fede 	bl	80011a0 <HAL_GPIO_WritePin>
 80003e4:	2201      	movs	r2, #1
 80003e6:	2180      	movs	r1, #128	@ 0x80
 80003e8:	48a7      	ldr	r0, [pc, #668]	@ (8000688 <segchar+0x37c>)
 80003ea:	f000 fed9 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 80003ee:	e147      	b.n	8000680 <segchar+0x374>
		case 3:
			SA_SET;SB_SET;SC_SET;SD_SET;SE_RESET;SF_RESET;SG_SET;SH_RESET;
 80003f0:	2200      	movs	r2, #0
 80003f2:	2101      	movs	r1, #1
 80003f4:	48a4      	ldr	r0, [pc, #656]	@ (8000688 <segchar+0x37c>)
 80003f6:	f000 fed3 	bl	80011a0 <HAL_GPIO_WritePin>
 80003fa:	2200      	movs	r2, #0
 80003fc:	2102      	movs	r1, #2
 80003fe:	48a2      	ldr	r0, [pc, #648]	@ (8000688 <segchar+0x37c>)
 8000400:	f000 fece 	bl	80011a0 <HAL_GPIO_WritePin>
 8000404:	2200      	movs	r2, #0
 8000406:	2104      	movs	r1, #4
 8000408:	489f      	ldr	r0, [pc, #636]	@ (8000688 <segchar+0x37c>)
 800040a:	f000 fec9 	bl	80011a0 <HAL_GPIO_WritePin>
 800040e:	2200      	movs	r2, #0
 8000410:	2108      	movs	r1, #8
 8000412:	489d      	ldr	r0, [pc, #628]	@ (8000688 <segchar+0x37c>)
 8000414:	f000 fec4 	bl	80011a0 <HAL_GPIO_WritePin>
 8000418:	2201      	movs	r2, #1
 800041a:	2110      	movs	r1, #16
 800041c:	489a      	ldr	r0, [pc, #616]	@ (8000688 <segchar+0x37c>)
 800041e:	f000 febf 	bl	80011a0 <HAL_GPIO_WritePin>
 8000422:	2201      	movs	r2, #1
 8000424:	2120      	movs	r1, #32
 8000426:	4898      	ldr	r0, [pc, #608]	@ (8000688 <segchar+0x37c>)
 8000428:	f000 feba 	bl	80011a0 <HAL_GPIO_WritePin>
 800042c:	2200      	movs	r2, #0
 800042e:	2140      	movs	r1, #64	@ 0x40
 8000430:	4895      	ldr	r0, [pc, #596]	@ (8000688 <segchar+0x37c>)
 8000432:	f000 feb5 	bl	80011a0 <HAL_GPIO_WritePin>
 8000436:	2201      	movs	r2, #1
 8000438:	2180      	movs	r1, #128	@ 0x80
 800043a:	4893      	ldr	r0, [pc, #588]	@ (8000688 <segchar+0x37c>)
 800043c:	f000 feb0 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 8000440:	e11e      	b.n	8000680 <segchar+0x374>
		case 4:
			SA_RESET;SB_SET;SC_SET;SD_RESET;SE_RESET;SF_SET;SG_SET;SH_RESET;
 8000442:	2201      	movs	r2, #1
 8000444:	2101      	movs	r1, #1
 8000446:	4890      	ldr	r0, [pc, #576]	@ (8000688 <segchar+0x37c>)
 8000448:	f000 feaa 	bl	80011a0 <HAL_GPIO_WritePin>
 800044c:	2200      	movs	r2, #0
 800044e:	2102      	movs	r1, #2
 8000450:	488d      	ldr	r0, [pc, #564]	@ (8000688 <segchar+0x37c>)
 8000452:	f000 fea5 	bl	80011a0 <HAL_GPIO_WritePin>
 8000456:	2200      	movs	r2, #0
 8000458:	2104      	movs	r1, #4
 800045a:	488b      	ldr	r0, [pc, #556]	@ (8000688 <segchar+0x37c>)
 800045c:	f000 fea0 	bl	80011a0 <HAL_GPIO_WritePin>
 8000460:	2201      	movs	r2, #1
 8000462:	2108      	movs	r1, #8
 8000464:	4888      	ldr	r0, [pc, #544]	@ (8000688 <segchar+0x37c>)
 8000466:	f000 fe9b 	bl	80011a0 <HAL_GPIO_WritePin>
 800046a:	2201      	movs	r2, #1
 800046c:	2110      	movs	r1, #16
 800046e:	4886      	ldr	r0, [pc, #536]	@ (8000688 <segchar+0x37c>)
 8000470:	f000 fe96 	bl	80011a0 <HAL_GPIO_WritePin>
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	4883      	ldr	r0, [pc, #524]	@ (8000688 <segchar+0x37c>)
 800047a:	f000 fe91 	bl	80011a0 <HAL_GPIO_WritePin>
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	@ 0x40
 8000482:	4881      	ldr	r0, [pc, #516]	@ (8000688 <segchar+0x37c>)
 8000484:	f000 fe8c 	bl	80011a0 <HAL_GPIO_WritePin>
 8000488:	2201      	movs	r2, #1
 800048a:	2180      	movs	r1, #128	@ 0x80
 800048c:	487e      	ldr	r0, [pc, #504]	@ (8000688 <segchar+0x37c>)
 800048e:	f000 fe87 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 8000492:	e0f5      	b.n	8000680 <segchar+0x374>
		case 5:
			SA_SET;SB_RESET;SC_SET;SD_SET;SE_RESET;SF_SET;SG_SET;SH_RESET;
 8000494:	2200      	movs	r2, #0
 8000496:	2101      	movs	r1, #1
 8000498:	487b      	ldr	r0, [pc, #492]	@ (8000688 <segchar+0x37c>)
 800049a:	f000 fe81 	bl	80011a0 <HAL_GPIO_WritePin>
 800049e:	2201      	movs	r2, #1
 80004a0:	2102      	movs	r1, #2
 80004a2:	4879      	ldr	r0, [pc, #484]	@ (8000688 <segchar+0x37c>)
 80004a4:	f000 fe7c 	bl	80011a0 <HAL_GPIO_WritePin>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2104      	movs	r1, #4
 80004ac:	4876      	ldr	r0, [pc, #472]	@ (8000688 <segchar+0x37c>)
 80004ae:	f000 fe77 	bl	80011a0 <HAL_GPIO_WritePin>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2108      	movs	r1, #8
 80004b6:	4874      	ldr	r0, [pc, #464]	@ (8000688 <segchar+0x37c>)
 80004b8:	f000 fe72 	bl	80011a0 <HAL_GPIO_WritePin>
 80004bc:	2201      	movs	r2, #1
 80004be:	2110      	movs	r1, #16
 80004c0:	4871      	ldr	r0, [pc, #452]	@ (8000688 <segchar+0x37c>)
 80004c2:	f000 fe6d 	bl	80011a0 <HAL_GPIO_WritePin>
 80004c6:	2200      	movs	r2, #0
 80004c8:	2120      	movs	r1, #32
 80004ca:	486f      	ldr	r0, [pc, #444]	@ (8000688 <segchar+0x37c>)
 80004cc:	f000 fe68 	bl	80011a0 <HAL_GPIO_WritePin>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2140      	movs	r1, #64	@ 0x40
 80004d4:	486c      	ldr	r0, [pc, #432]	@ (8000688 <segchar+0x37c>)
 80004d6:	f000 fe63 	bl	80011a0 <HAL_GPIO_WritePin>
 80004da:	2201      	movs	r2, #1
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	486a      	ldr	r0, [pc, #424]	@ (8000688 <segchar+0x37c>)
 80004e0:	f000 fe5e 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 80004e4:	e0cc      	b.n	8000680 <segchar+0x374>
		case 6:
			SA_SET;SB_RESET;SC_SET;SD_SET;SE_SET;SF_SET;SG_SET;SH_RESET;
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	4867      	ldr	r0, [pc, #412]	@ (8000688 <segchar+0x37c>)
 80004ec:	f000 fe58 	bl	80011a0 <HAL_GPIO_WritePin>
 80004f0:	2201      	movs	r2, #1
 80004f2:	2102      	movs	r1, #2
 80004f4:	4864      	ldr	r0, [pc, #400]	@ (8000688 <segchar+0x37c>)
 80004f6:	f000 fe53 	bl	80011a0 <HAL_GPIO_WritePin>
 80004fa:	2200      	movs	r2, #0
 80004fc:	2104      	movs	r1, #4
 80004fe:	4862      	ldr	r0, [pc, #392]	@ (8000688 <segchar+0x37c>)
 8000500:	f000 fe4e 	bl	80011a0 <HAL_GPIO_WritePin>
 8000504:	2200      	movs	r2, #0
 8000506:	2108      	movs	r1, #8
 8000508:	485f      	ldr	r0, [pc, #380]	@ (8000688 <segchar+0x37c>)
 800050a:	f000 fe49 	bl	80011a0 <HAL_GPIO_WritePin>
 800050e:	2200      	movs	r2, #0
 8000510:	2110      	movs	r1, #16
 8000512:	485d      	ldr	r0, [pc, #372]	@ (8000688 <segchar+0x37c>)
 8000514:	f000 fe44 	bl	80011a0 <HAL_GPIO_WritePin>
 8000518:	2200      	movs	r2, #0
 800051a:	2120      	movs	r1, #32
 800051c:	485a      	ldr	r0, [pc, #360]	@ (8000688 <segchar+0x37c>)
 800051e:	f000 fe3f 	bl	80011a0 <HAL_GPIO_WritePin>
 8000522:	2200      	movs	r2, #0
 8000524:	2140      	movs	r1, #64	@ 0x40
 8000526:	4858      	ldr	r0, [pc, #352]	@ (8000688 <segchar+0x37c>)
 8000528:	f000 fe3a 	bl	80011a0 <HAL_GPIO_WritePin>
 800052c:	2201      	movs	r2, #1
 800052e:	2180      	movs	r1, #128	@ 0x80
 8000530:	4855      	ldr	r0, [pc, #340]	@ (8000688 <segchar+0x37c>)
 8000532:	f000 fe35 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 8000536:	e0a3      	b.n	8000680 <segchar+0x374>
		case 7:
			SA_SET;SB_SET;SC_SET;SD_RESET;SE_RESET;SF_RESET;SG_RESET;SH_RESET;
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	4852      	ldr	r0, [pc, #328]	@ (8000688 <segchar+0x37c>)
 800053e:	f000 fe2f 	bl	80011a0 <HAL_GPIO_WritePin>
 8000542:	2200      	movs	r2, #0
 8000544:	2102      	movs	r1, #2
 8000546:	4850      	ldr	r0, [pc, #320]	@ (8000688 <segchar+0x37c>)
 8000548:	f000 fe2a 	bl	80011a0 <HAL_GPIO_WritePin>
 800054c:	2200      	movs	r2, #0
 800054e:	2104      	movs	r1, #4
 8000550:	484d      	ldr	r0, [pc, #308]	@ (8000688 <segchar+0x37c>)
 8000552:	f000 fe25 	bl	80011a0 <HAL_GPIO_WritePin>
 8000556:	2201      	movs	r2, #1
 8000558:	2108      	movs	r1, #8
 800055a:	484b      	ldr	r0, [pc, #300]	@ (8000688 <segchar+0x37c>)
 800055c:	f000 fe20 	bl	80011a0 <HAL_GPIO_WritePin>
 8000560:	2201      	movs	r2, #1
 8000562:	2110      	movs	r1, #16
 8000564:	4848      	ldr	r0, [pc, #288]	@ (8000688 <segchar+0x37c>)
 8000566:	f000 fe1b 	bl	80011a0 <HAL_GPIO_WritePin>
 800056a:	2201      	movs	r2, #1
 800056c:	2120      	movs	r1, #32
 800056e:	4846      	ldr	r0, [pc, #280]	@ (8000688 <segchar+0x37c>)
 8000570:	f000 fe16 	bl	80011a0 <HAL_GPIO_WritePin>
 8000574:	2201      	movs	r2, #1
 8000576:	2140      	movs	r1, #64	@ 0x40
 8000578:	4843      	ldr	r0, [pc, #268]	@ (8000688 <segchar+0x37c>)
 800057a:	f000 fe11 	bl	80011a0 <HAL_GPIO_WritePin>
 800057e:	2201      	movs	r2, #1
 8000580:	2180      	movs	r1, #128	@ 0x80
 8000582:	4841      	ldr	r0, [pc, #260]	@ (8000688 <segchar+0x37c>)
 8000584:	f000 fe0c 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 8000588:	e07a      	b.n	8000680 <segchar+0x374>
		case 8:
			SA_SET;SB_SET;SC_SET;SD_SET;SE_SET;SF_SET;SG_SET;SH_RESET;
 800058a:	2200      	movs	r2, #0
 800058c:	2101      	movs	r1, #1
 800058e:	483e      	ldr	r0, [pc, #248]	@ (8000688 <segchar+0x37c>)
 8000590:	f000 fe06 	bl	80011a0 <HAL_GPIO_WritePin>
 8000594:	2200      	movs	r2, #0
 8000596:	2102      	movs	r1, #2
 8000598:	483b      	ldr	r0, [pc, #236]	@ (8000688 <segchar+0x37c>)
 800059a:	f000 fe01 	bl	80011a0 <HAL_GPIO_WritePin>
 800059e:	2200      	movs	r2, #0
 80005a0:	2104      	movs	r1, #4
 80005a2:	4839      	ldr	r0, [pc, #228]	@ (8000688 <segchar+0x37c>)
 80005a4:	f000 fdfc 	bl	80011a0 <HAL_GPIO_WritePin>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2108      	movs	r1, #8
 80005ac:	4836      	ldr	r0, [pc, #216]	@ (8000688 <segchar+0x37c>)
 80005ae:	f000 fdf7 	bl	80011a0 <HAL_GPIO_WritePin>
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	4834      	ldr	r0, [pc, #208]	@ (8000688 <segchar+0x37c>)
 80005b8:	f000 fdf2 	bl	80011a0 <HAL_GPIO_WritePin>
 80005bc:	2200      	movs	r2, #0
 80005be:	2120      	movs	r1, #32
 80005c0:	4831      	ldr	r0, [pc, #196]	@ (8000688 <segchar+0x37c>)
 80005c2:	f000 fded 	bl	80011a0 <HAL_GPIO_WritePin>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2140      	movs	r1, #64	@ 0x40
 80005ca:	482f      	ldr	r0, [pc, #188]	@ (8000688 <segchar+0x37c>)
 80005cc:	f000 fde8 	bl	80011a0 <HAL_GPIO_WritePin>
 80005d0:	2201      	movs	r2, #1
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	482c      	ldr	r0, [pc, #176]	@ (8000688 <segchar+0x37c>)
 80005d6:	f000 fde3 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 80005da:	e051      	b.n	8000680 <segchar+0x374>
		case 9:
			SA_SET;SB_SET;SC_SET;SD_SET;SE_RESET;SF_SET;SG_SET;SH_RESET;
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4829      	ldr	r0, [pc, #164]	@ (8000688 <segchar+0x37c>)
 80005e2:	f000 fddd 	bl	80011a0 <HAL_GPIO_WritePin>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2102      	movs	r1, #2
 80005ea:	4827      	ldr	r0, [pc, #156]	@ (8000688 <segchar+0x37c>)
 80005ec:	f000 fdd8 	bl	80011a0 <HAL_GPIO_WritePin>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	4824      	ldr	r0, [pc, #144]	@ (8000688 <segchar+0x37c>)
 80005f6:	f000 fdd3 	bl	80011a0 <HAL_GPIO_WritePin>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	4822      	ldr	r0, [pc, #136]	@ (8000688 <segchar+0x37c>)
 8000600:	f000 fdce 	bl	80011a0 <HAL_GPIO_WritePin>
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	481f      	ldr	r0, [pc, #124]	@ (8000688 <segchar+0x37c>)
 800060a:	f000 fdc9 	bl	80011a0 <HAL_GPIO_WritePin>
 800060e:	2200      	movs	r2, #0
 8000610:	2120      	movs	r1, #32
 8000612:	481d      	ldr	r0, [pc, #116]	@ (8000688 <segchar+0x37c>)
 8000614:	f000 fdc4 	bl	80011a0 <HAL_GPIO_WritePin>
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	481a      	ldr	r0, [pc, #104]	@ (8000688 <segchar+0x37c>)
 800061e:	f000 fdbf 	bl	80011a0 <HAL_GPIO_WritePin>
 8000622:	2201      	movs	r2, #1
 8000624:	2180      	movs	r1, #128	@ 0x80
 8000626:	4818      	ldr	r0, [pc, #96]	@ (8000688 <segchar+0x37c>)
 8000628:	f000 fdba 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 800062c:	e028      	b.n	8000680 <segchar+0x374>
		case 0:
			SA_SET;SB_SET;SC_SET;SD_SET;SE_SET;SF_SET;SG_RESET;SH_RESET;
 800062e:	2200      	movs	r2, #0
 8000630:	2101      	movs	r1, #1
 8000632:	4815      	ldr	r0, [pc, #84]	@ (8000688 <segchar+0x37c>)
 8000634:	f000 fdb4 	bl	80011a0 <HAL_GPIO_WritePin>
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4812      	ldr	r0, [pc, #72]	@ (8000688 <segchar+0x37c>)
 800063e:	f000 fdaf 	bl	80011a0 <HAL_GPIO_WritePin>
 8000642:	2200      	movs	r2, #0
 8000644:	2104      	movs	r1, #4
 8000646:	4810      	ldr	r0, [pc, #64]	@ (8000688 <segchar+0x37c>)
 8000648:	f000 fdaa 	bl	80011a0 <HAL_GPIO_WritePin>
 800064c:	2200      	movs	r2, #0
 800064e:	2108      	movs	r1, #8
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <segchar+0x37c>)
 8000652:	f000 fda5 	bl	80011a0 <HAL_GPIO_WritePin>
 8000656:	2200      	movs	r2, #0
 8000658:	2110      	movs	r1, #16
 800065a:	480b      	ldr	r0, [pc, #44]	@ (8000688 <segchar+0x37c>)
 800065c:	f000 fda0 	bl	80011a0 <HAL_GPIO_WritePin>
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	4808      	ldr	r0, [pc, #32]	@ (8000688 <segchar+0x37c>)
 8000666:	f000 fd9b 	bl	80011a0 <HAL_GPIO_WritePin>
 800066a:	2201      	movs	r2, #1
 800066c:	2140      	movs	r1, #64	@ 0x40
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <segchar+0x37c>)
 8000670:	f000 fd96 	bl	80011a0 <HAL_GPIO_WritePin>
 8000674:	2201      	movs	r2, #1
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <segchar+0x37c>)
 800067a:	f000 fd91 	bl	80011a0 <HAL_GPIO_WritePin>
			break;
 800067e:	bf00      	nop
	}
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40010800 	.word	0x40010800

0800068c <initSeg>:

void initSeg(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	SA_RESET;SB_RESET;SC_RESET;SD_RESET;SE_RESET;SF_RESET;SG_RESET;SH_RESET;
 8000690:	2201      	movs	r2, #1
 8000692:	2101      	movs	r1, #1
 8000694:	4813      	ldr	r0, [pc, #76]	@ (80006e4 <initSeg+0x58>)
 8000696:	f000 fd83 	bl	80011a0 <HAL_GPIO_WritePin>
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <initSeg+0x58>)
 80006a0:	f000 fd7e 	bl	80011a0 <HAL_GPIO_WritePin>
 80006a4:	2201      	movs	r2, #1
 80006a6:	2104      	movs	r1, #4
 80006a8:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <initSeg+0x58>)
 80006aa:	f000 fd79 	bl	80011a0 <HAL_GPIO_WritePin>
 80006ae:	2201      	movs	r2, #1
 80006b0:	2108      	movs	r1, #8
 80006b2:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <initSeg+0x58>)
 80006b4:	f000 fd74 	bl	80011a0 <HAL_GPIO_WritePin>
 80006b8:	2201      	movs	r2, #1
 80006ba:	2110      	movs	r1, #16
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <initSeg+0x58>)
 80006be:	f000 fd6f 	bl	80011a0 <HAL_GPIO_WritePin>
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <initSeg+0x58>)
 80006c8:	f000 fd6a 	bl	80011a0 <HAL_GPIO_WritePin>
 80006cc:	2201      	movs	r2, #1
 80006ce:	2140      	movs	r1, #64	@ 0x40
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <initSeg+0x58>)
 80006d2:	f000 fd65 	bl	80011a0 <HAL_GPIO_WritePin>
 80006d6:	2201      	movs	r2, #1
 80006d8:	2180      	movs	r1, #128	@ 0x80
 80006da:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <initSeg+0x58>)
 80006dc:	f000 fd60 	bl	80011a0 <HAL_GPIO_WritePin>
	//SA_SET;SB_SET;SC_SET;SD_SET;SE_SET;SF_SET;SG_SET;SH_SET;
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40010800 	.word	0x40010800

080006e8 <main>:

uint32_t i=0;


int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  HAL_Init();
 80006ec:	f000 fa48 	bl	8000b80 <HAL_Init>
  SystemClock_Config();
 80006f0:	f000 f810 	bl	8000714 <SystemClock_Config>

  MX_GPIO_Init();
 80006f4:	f000 f8e6 	bl	80008c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006f8:	f000 f84e 	bl	8000798 <MX_TIM2_Init>

  initSeg();
 80006fc:	f7ff ffc6 	bl	800068c <initSeg>

  HAL_TIM_Base_Start_IT(&htim2);
 8000700:	4803      	ldr	r0, [pc, #12]	@ (8000710 <main+0x28>)
 8000702:	f001 f993 	bl	8001a2c <HAL_TIM_Base_Start_IT>
  LED_ON_4_RESET;
  */

  while (1)
  {
	  ledprint(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff fd20 	bl	800014c <ledprint>
  {
 800070c:	bf00      	nop
 800070e:	e7fa      	b.n	8000706 <main+0x1e>
 8000710:	20000030 	.word	0x20000030

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b090      	sub	sp, #64	@ 0x40
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	2228      	movs	r2, #40	@ 0x28
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f001 ffc4 	bl	80026b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	2301      	movs	r3, #1
 800073c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073e:	2310      	movs	r3, #16
 8000740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000746:	2300      	movs	r3, #0
 8000748:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800074a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800074e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fd3b 	bl	80011d0 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000760:	f000 f8f0 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f000 ffa8 	bl	80016d4 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800078a:	f000 f8db 	bl	8000944 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3740      	adds	r7, #64	@ 0x40
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	@ 0x38
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c8:	4b3d      	ldr	r3, [pc, #244]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 250;
 80007d0:	4b3b      	ldr	r3, [pc, #236]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80007d2:	22fa      	movs	r2, #250	@ 0xfa
 80007d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b3a      	ldr	r3, [pc, #232]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 750;
 80007dc:	4b38      	ldr	r3, [pc, #224]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80007de:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80007e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b36      	ldr	r3, [pc, #216]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b35      	ldr	r3, [pc, #212]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f0:	4833      	ldr	r0, [pc, #204]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80007f2:	f001 f8cb 	bl	800198c <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007fc:	f000 f8a2 	bl	8000944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000806:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800080a:	4619      	mov	r1, r3
 800080c:	482c      	ldr	r0, [pc, #176]	@ (80008c0 <MX_TIM2_Init+0x128>)
 800080e:	f001 fb7b 	bl	8001f08 <HAL_TIM_ConfigClockSource>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000818:	f000 f894 	bl	8000944 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800081c:	4828      	ldr	r0, [pc, #160]	@ (80008c0 <MX_TIM2_Init+0x128>)
 800081e:	f001 f951 	bl	8001ac4 <HAL_TIM_PWM_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000828:	f000 f88c 	bl	8000944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4619      	mov	r1, r3
 800083a:	4821      	ldr	r0, [pc, #132]	@ (80008c0 <MX_TIM2_Init+0x128>)
 800083c:	f001 fece 	bl	80025dc <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000846:	f000 f87d 	bl	8000944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084a:	2360      	movs	r3, #96	@ 0x60
 800084c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	4619      	mov	r1, r3
 8000860:	4817      	ldr	r0, [pc, #92]	@ (80008c0 <MX_TIM2_Init+0x128>)
 8000862:	f001 fa8f 	bl	8001d84 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800086c:	f000 f86a 	bl	8000944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2204      	movs	r2, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <MX_TIM2_Init+0x128>)
 8000878:	f001 fa84 	bl	8001d84 <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000882:	f000 f85f 	bl	8000944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2208      	movs	r2, #8
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <MX_TIM2_Init+0x128>)
 800088e:	f001 fa79 	bl	8001d84 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000898:	f000 f854 	bl	8000944 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	220c      	movs	r2, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80008a4:	f001 fa6e 	bl	8001d84 <HAL_TIM_PWM_ConfigChannel>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80008ae:	f000 f849 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b2:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <MX_TIM2_Init+0x128>)
 80008b4:	f000 f8a2 	bl	80009fc <HAL_TIM_MspPostInit>

}
 80008b8:	bf00      	nop
 80008ba:	3738      	adds	r7, #56	@ 0x38
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000030 	.word	0x20000030

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_GPIO_Init+0x78>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a17      	ldr	r2, [pc, #92]	@ (800093c <MX_GPIO_Init+0x78>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_GPIO_Init+0x78>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_GPIO_Init+0x78>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a11      	ldr	r2, [pc, #68]	@ (800093c <MX_GPIO_Init+0x78>)
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_GPIO_Init+0x78>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000908:	2200      	movs	r2, #0
 800090a:	f640 71ff 	movw	r1, #4095	@ 0xfff
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <MX_GPIO_Init+0x7c>)
 8000910:	f000 fc46 	bl	80011a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000914:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000918:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2302      	movs	r3, #2
 8000924:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0308 	add.w	r3, r7, #8
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_GPIO_Init+0x7c>)
 800092e:	f000 fabb 	bl	8000ea8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	40010800 	.word	0x40010800

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <Error_Handler+0x8>

08000950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <HAL_MspInit+0x5c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_MspInit+0x5c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <HAL_MspInit+0x5c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_MspInit+0x5c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000986:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <HAL_MspInit+0x60>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_MspInit+0x60>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c4:	d113      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009c6:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <HAL_TIM_Base_MspInit+0x44>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <HAL_TIM_Base_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_TIM_Base_MspInit+0x44>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	201c      	movs	r0, #28
 80009e4:	f000 fa29 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e8:	201c      	movs	r0, #28
 80009ea:	f000 fa42 	bl	8000e72 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a1a:	d143      	bne.n	8000aa4 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a22:	f043 0308 	orr.w	r3, r3, #8
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b20      	ldr	r3, [pc, #128]	@ (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0308 	and.w	r3, r3, #8
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a1c      	ldr	r2, [pc, #112]	@ (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <HAL_TIM_MspPostInit+0xb0>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8000a4c:	f640 4308 	movw	r3, #3080	@ 0xc08
 8000a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4813      	ldr	r0, [pc, #76]	@ (8000ab0 <HAL_TIM_MspPostInit+0xb4>)
 8000a62:	f000 fa21 	bl	8000ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <HAL_TIM_MspPostInit+0xb8>)
 8000a7c:	f000 fa14 	bl	8000ea8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <HAL_TIM_MspPostInit+0xbc>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a90:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a9e:	4a06      	ldr	r2, [pc, #24]	@ (8000ab8 <HAL_TIM_MspPostInit+0xbc>)
 8000aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	@ 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40010000 	.word	0x40010000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f87e 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim2);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <TIM2_IRQHandler+0x10>)
 8000b1a:	f001 f82b 	bl	8001b74 <HAL_TIM_IRQHandler>
  if (n_count>3){
	  n_count=0;
  }
  */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000030 	.word	0x20000030

08000b28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b34:	f7ff fff8 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480b      	ldr	r0, [pc, #44]	@ (8000b68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b3a:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a09      	ldr	r2, [pc, #36]	@ (8000b74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b50:	4c09      	ldr	r4, [pc, #36]	@ (8000b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f001 fdaf 	bl	80026c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b62:	f7ff fdc1 	bl	80006e8 <main>
  bx lr
 8000b66:	4770      	bx	lr
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b70:	0800274c 	.word	0x0800274c
  ldr r2, =_sbss
 8000b74:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b78:	2000007c 	.word	0x2000007c

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x28>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x28>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f947 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fed8 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f95f 	bl	8000e8e <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f927 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000004 	.word	0x20000004
 8000c04:	2000000c 	.word	0x2000000c
 8000c08:	20000008 	.word	0x20000008

08000c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <HAL_IncTick+0x1c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a03      	ldr	r2, [pc, #12]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	20000078 	.word	0x20000078

08000c30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b02      	ldr	r3, [pc, #8]	@ (8000c40 <HAL_GetTick+0x10>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000078 	.word	0x20000078

08000c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c4c:	f7ff fff0 	bl	8000c30 <HAL_GetTick>
 8000c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5c:	d005      	beq.n	8000c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_Delay+0x44>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4413      	add	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6a:	bf00      	nop
 8000c6c:	f7ff ffe0 	bl	8000c30 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f7      	bhi.n	8000c6c <HAL_Delay+0x28>
  {
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000000c 	.word	0x2000000c

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4906      	ldr	r1, [pc, #24]	@ (8000d24 <__NVIC_EnableIRQ+0x34>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	@ (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	@ (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	@ 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff90 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff2d 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff42 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff90 	bl	8000d7c <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5f 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff35 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b08b      	sub	sp, #44	@ 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eba:	e161      	b.n	8001180 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8150 	bne.w	800117a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4a97      	ldr	r2, [pc, #604]	@ (800113c <HAL_GPIO_Init+0x294>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d05e      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000ee4:	4a95      	ldr	r2, [pc, #596]	@ (800113c <HAL_GPIO_Init+0x294>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d875      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000eea:	4a95      	ldr	r2, [pc, #596]	@ (8001140 <HAL_GPIO_Init+0x298>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d058      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000ef0:	4a93      	ldr	r2, [pc, #588]	@ (8001140 <HAL_GPIO_Init+0x298>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d86f      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000ef6:	4a93      	ldr	r2, [pc, #588]	@ (8001144 <HAL_GPIO_Init+0x29c>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d052      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000efc:	4a91      	ldr	r2, [pc, #580]	@ (8001144 <HAL_GPIO_Init+0x29c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d869      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000f02:	4a91      	ldr	r2, [pc, #580]	@ (8001148 <HAL_GPIO_Init+0x2a0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d04c      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000f08:	4a8f      	ldr	r2, [pc, #572]	@ (8001148 <HAL_GPIO_Init+0x2a0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d863      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000f0e:	4a8f      	ldr	r2, [pc, #572]	@ (800114c <HAL_GPIO_Init+0x2a4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d046      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000f14:	4a8d      	ldr	r2, [pc, #564]	@ (800114c <HAL_GPIO_Init+0x2a4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d85d      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d82a      	bhi.n	8000f74 <HAL_GPIO_Init+0xcc>
 8000f1e:	2b12      	cmp	r3, #18
 8000f20:	d859      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000f22:	a201      	add	r2, pc, #4	@ (adr r2, 8000f28 <HAL_GPIO_Init+0x80>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000fa3 	.word	0x08000fa3
 8000f2c:	08000f7d 	.word	0x08000f7d
 8000f30:	08000f8f 	.word	0x08000f8f
 8000f34:	08000fd1 	.word	0x08000fd1
 8000f38:	08000fd7 	.word	0x08000fd7
 8000f3c:	08000fd7 	.word	0x08000fd7
 8000f40:	08000fd7 	.word	0x08000fd7
 8000f44:	08000fd7 	.word	0x08000fd7
 8000f48:	08000fd7 	.word	0x08000fd7
 8000f4c:	08000fd7 	.word	0x08000fd7
 8000f50:	08000fd7 	.word	0x08000fd7
 8000f54:	08000fd7 	.word	0x08000fd7
 8000f58:	08000fd7 	.word	0x08000fd7
 8000f5c:	08000fd7 	.word	0x08000fd7
 8000f60:	08000fd7 	.word	0x08000fd7
 8000f64:	08000fd7 	.word	0x08000fd7
 8000f68:	08000fd7 	.word	0x08000fd7
 8000f6c:	08000f85 	.word	0x08000f85
 8000f70:	08000f99 	.word	0x08000f99
 8000f74:	4a76      	ldr	r2, [pc, #472]	@ (8001150 <HAL_GPIO_Init+0x2a8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f7a:	e02c      	b.n	8000fd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	623b      	str	r3, [r7, #32]
          break;
 8000f82:	e029      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	623b      	str	r3, [r7, #32]
          break;
 8000f8c:	e024      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	3308      	adds	r3, #8
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e01f      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	623b      	str	r3, [r7, #32]
          break;
 8000fa0:	e01a      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000faa:	2304      	movs	r3, #4
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e013      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d105      	bne.n	8000fc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	611a      	str	r2, [r3, #16]
          break;
 8000fc2:	e009      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	615a      	str	r2, [r3, #20]
          break;
 8000fce:	e003      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e000      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          break;
 8000fd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2bff      	cmp	r3, #255	@ 0xff
 8000fdc:	d801      	bhi.n	8000fe2 <HAL_GPIO_Init+0x13a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	e001      	b.n	8000fe6 <HAL_GPIO_Init+0x13e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2bff      	cmp	r3, #255	@ 0xff
 8000fec:	d802      	bhi.n	8000ff4 <HAL_GPIO_Init+0x14c>
 8000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff6:	3b08      	subs	r3, #8
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	210f      	movs	r1, #15
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	6a39      	ldr	r1, [r7, #32]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	431a      	orrs	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 80a9 	beq.w	800117a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001028:	4b4a      	ldr	r3, [pc, #296]	@ (8001154 <HAL_GPIO_Init+0x2ac>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a49      	ldr	r2, [pc, #292]	@ (8001154 <HAL_GPIO_Init+0x2ac>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b47      	ldr	r3, [pc, #284]	@ (8001154 <HAL_GPIO_Init+0x2ac>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001040:	4a45      	ldr	r2, [pc, #276]	@ (8001158 <HAL_GPIO_Init+0x2b0>)
 8001042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800104e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a3d      	ldr	r2, [pc, #244]	@ (800115c <HAL_GPIO_Init+0x2b4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x1e0>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a3c      	ldr	r2, [pc, #240]	@ (8001160 <HAL_GPIO_Init+0x2b8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x1dc>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a3b      	ldr	r2, [pc, #236]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x1d8>
 800107c:	2302      	movs	r3, #2
 800107e:	e004      	b.n	800108a <HAL_GPIO_Init+0x1e2>
 8001080:	2303      	movs	r3, #3
 8001082:	e002      	b.n	800108a <HAL_GPIO_Init+0x1e2>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <HAL_GPIO_Init+0x1e2>
 8001088:	2300      	movs	r3, #0
 800108a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800108c:	f002 0203 	and.w	r2, r2, #3
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4093      	lsls	r3, r2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800109a:	492f      	ldr	r1, [pc, #188]	@ (8001158 <HAL_GPIO_Init+0x2b0>)
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	492b      	ldr	r1, [pc, #172]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	608b      	str	r3, [r1, #8]
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010c2:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4927      	ldr	r1, [pc, #156]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	4921      	ldr	r1, [pc, #132]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	60cb      	str	r3, [r1, #12]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	491d      	ldr	r1, [pc, #116]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001104:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	4917      	ldr	r1, [pc, #92]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	4913      	ldr	r1, [pc, #76]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 800111c:	4013      	ands	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01f      	beq.n	800116c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	490d      	ldr	r1, [pc, #52]	@ (8001168 <HAL_GPIO_Init+0x2c0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
 8001138:	e01f      	b.n	800117a <HAL_GPIO_Init+0x2d2>
 800113a:	bf00      	nop
 800113c:	10320000 	.word	0x10320000
 8001140:	10310000 	.word	0x10310000
 8001144:	10220000 	.word	0x10220000
 8001148:	10210000 	.word	0x10210000
 800114c:	10120000 	.word	0x10120000
 8001150:	10110000 	.word	0x10110000
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	40010800 	.word	0x40010800
 8001160:	40010c00 	.word	0x40010c00
 8001164:	40011000 	.word	0x40011000
 8001168:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <HAL_GPIO_Init+0x2f4>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	43db      	mvns	r3, r3
 8001174:	4909      	ldr	r1, [pc, #36]	@ (800119c <HAL_GPIO_Init+0x2f4>)
 8001176:	4013      	ands	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800117a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117c:	3301      	adds	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001186:	fa22 f303 	lsr.w	r3, r2, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	f47f ae96 	bne.w	8000ebc <HAL_GPIO_Init+0x14>
  }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	372c      	adds	r7, #44	@ 0x2c
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	611a      	str	r2, [r3, #16]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e272      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8087 	beq.w	80012fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f0:	4b92      	ldr	r3, [pc, #584]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d00c      	beq.n	8001216 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011fc:	4b8f      	ldr	r3, [pc, #572]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b08      	cmp	r3, #8
 8001206:	d112      	bne.n	800122e <HAL_RCC_OscConfig+0x5e>
 8001208:	4b8c      	ldr	r3, [pc, #560]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001214:	d10b      	bne.n	800122e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001216:	4b89      	ldr	r3, [pc, #548]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d06c      	beq.n	80012fc <HAL_RCC_OscConfig+0x12c>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d168      	bne.n	80012fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e24c      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001236:	d106      	bne.n	8001246 <HAL_RCC_OscConfig+0x76>
 8001238:	4b80      	ldr	r3, [pc, #512]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a7f      	ldr	r2, [pc, #508]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800123e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e02e      	b.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b7b      	ldr	r3, [pc, #492]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a7a      	ldr	r2, [pc, #488]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b78      	ldr	r3, [pc, #480]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a77      	ldr	r2, [pc, #476]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0xbc>
 8001272:	4b72      	ldr	r3, [pc, #456]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a71      	ldr	r2, [pc, #452]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b6f      	ldr	r3, [pc, #444]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a6e      	ldr	r2, [pc, #440]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xd4>
 800128c:	4b6b      	ldr	r3, [pc, #428]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6a      	ldr	r2, [pc, #424]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b68      	ldr	r3, [pc, #416]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a67      	ldr	r2, [pc, #412]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fcc0 	bl	8000c30 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fcbc 	bl	8000c30 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	@ 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e200      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b5d      	ldr	r3, [pc, #372]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0xe4>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcac 	bl	8000c30 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fca8 	bl	8000c30 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	@ 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1ec      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	4b53      	ldr	r3, [pc, #332]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x10c>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130a:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b08      	cmp	r3, #8
 8001320:	d11c      	bne.n	800135c <HAL_RCC_OscConfig+0x18c>
 8001322:	4b46      	ldr	r3, [pc, #280]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	4b43      	ldr	r3, [pc, #268]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x176>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1c0      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4939      	ldr	r1, [pc, #228]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	e03a      	b.n	80013d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fc61 	bl	8000c30 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fc5d 	bl	8000c30 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1a1      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4927      	ldr	r1, [pc, #156]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
 80013a4:	e015      	b.n	80013d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <HAL_RCC_OscConfig+0x270>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc40 	bl	8000c30 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc3c 	bl	8000c30 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e180      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d03a      	beq.n	8001454 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d019      	beq.n	800141a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <HAL_RCC_OscConfig+0x274>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fc20 	bl	8000c30 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc1c 	bl	8000c30 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e160      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <HAL_RCC_OscConfig+0x26c>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001412:	2001      	movs	r0, #1
 8001414:	f000 fa9c 	bl	8001950 <RCC_Delay>
 8001418:	e01c      	b.n	8001454 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_RCC_OscConfig+0x274>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff fc06 	bl	8000c30 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001426:	e00f      	b.n	8001448 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fc02 	bl	8000c30 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d908      	bls.n	8001448 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e146      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	42420000 	.word	0x42420000
 8001444:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	4b92      	ldr	r3, [pc, #584]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e9      	bne.n	8001428 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a6 	beq.w	80015ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001466:	4b8b      	ldr	r3, [pc, #556]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10d      	bne.n	800148e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b88      	ldr	r3, [pc, #544]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a87      	ldr	r2, [pc, #540]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b85      	ldr	r3, [pc, #532]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148a:	2301      	movs	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148e:	4b82      	ldr	r3, [pc, #520]	@ (8001698 <HAL_RCC_OscConfig+0x4c8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d118      	bne.n	80014cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149a:	4b7f      	ldr	r3, [pc, #508]	@ (8001698 <HAL_RCC_OscConfig+0x4c8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7e      	ldr	r2, [pc, #504]	@ (8001698 <HAL_RCC_OscConfig+0x4c8>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fbc3 	bl	8000c30 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ae:	f7ff fbbf 	bl	8000c30 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b64      	cmp	r3, #100	@ 0x64
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e103      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c0:	4b75      	ldr	r3, [pc, #468]	@ (8001698 <HAL_RCC_OscConfig+0x4c8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x312>
 80014d4:	4b6f      	ldr	r3, [pc, #444]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a6e      	ldr	r2, [pc, #440]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6213      	str	r3, [r2, #32]
 80014e0:	e02d      	b.n	800153e <HAL_RCC_OscConfig+0x36e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x334>
 80014ea:	4b6a      	ldr	r3, [pc, #424]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a69      	ldr	r2, [pc, #420]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	4b67      	ldr	r3, [pc, #412]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a66      	ldr	r2, [pc, #408]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	6213      	str	r3, [r2, #32]
 8001502:	e01c      	b.n	800153e <HAL_RCC_OscConfig+0x36e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x356>
 800150c:	4b61      	ldr	r3, [pc, #388]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a60      	ldr	r2, [pc, #384]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	4b5e      	ldr	r3, [pc, #376]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a5d      	ldr	r2, [pc, #372]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x36e>
 8001526:	4b5b      	ldr	r3, [pc, #364]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a5a      	ldr	r2, [pc, #360]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	4b58      	ldr	r3, [pc, #352]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a57      	ldr	r2, [pc, #348]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d015      	beq.n	8001572 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fb73 	bl	8000c30 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fb6f 	bl	8000c30 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0b1      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	4b4b      	ldr	r3, [pc, #300]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ee      	beq.n	800154e <HAL_RCC_OscConfig+0x37e>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff fb5d 	bl	8000c30 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff fb59 	bl	8000c30 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e09b      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	4b40      	ldr	r3, [pc, #256]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ee      	bne.n	800157a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8087 	beq.w	80016c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b8:	4b36      	ldr	r3, [pc, #216]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d061      	beq.n	8001688 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d146      	bne.n	800165a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015cc:	4b33      	ldr	r3, [pc, #204]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb2d 	bl	8000c30 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015da:	f7ff fb29 	bl	8000c30 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e06d      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001600:	d108      	bne.n	8001614 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4921      	ldr	r1, [pc, #132]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a19      	ldr	r1, [r3, #32]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001624:	430b      	orrs	r3, r1
 8001626:	491b      	ldr	r1, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fafd 	bl	8000c30 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163a:	f7ff faf9 	bl	8000c30 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e03d      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x46a>
 8001658:	e035      	b.n	80016c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fae6 	bl	8000c30 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fae2 	bl	8000c30 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e026      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x498>
 8001686:	e01e      	b.n	80016c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e019      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
 8001694:	40021000 	.word	0x40021000
 8001698:	40007000 	.word	0x40007000
 800169c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <HAL_RCC_OscConfig+0x500>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0d0      	b.n	800188a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d910      	bls.n	8001718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b67      	ldr	r3, [pc, #412]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 0207 	bic.w	r2, r3, #7
 80016fe:	4965      	ldr	r1, [pc, #404]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b63      	ldr	r3, [pc, #396]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0b8      	b.n	800188a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d020      	beq.n	8001766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001730:	4b59      	ldr	r3, [pc, #356]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a58      	ldr	r2, [pc, #352]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800173a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001748:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a52      	ldr	r2, [pc, #328]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001754:	4b50      	ldr	r3, [pc, #320]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	494d      	ldr	r1, [pc, #308]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d040      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b47      	ldr	r3, [pc, #284]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d115      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e07f      	b.n	800188a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e073      	b.n	800188a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06b      	b.n	800188a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b2:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f023 0203 	bic.w	r2, r3, #3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4936      	ldr	r1, [pc, #216]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c4:	f7ff fa34 	bl	8000c30 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017cc:	f7ff fa30 	bl	8000c30 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e053      	b.n	800188a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 020c 	and.w	r2, r3, #12
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1eb      	bne.n	80017cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d210      	bcs.n	8001824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4922      	ldr	r1, [pc, #136]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e032      	b.n	800188a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4916      	ldr	r1, [pc, #88]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	490e      	ldr	r1, [pc, #56]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001862:	f000 f821 	bl	80018a8 <HAL_RCC_GetSysClockFreq>
 8001866:	4602      	mov	r2, r0
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	490a      	ldr	r1, [pc, #40]	@ (800189c <HAL_RCC_ClockConfig+0x1c8>)
 8001874:	5ccb      	ldrb	r3, [r1, r3]
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	4a09      	ldr	r2, [pc, #36]	@ (80018a0 <HAL_RCC_ClockConfig+0x1cc>)
 800187c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f992 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40022000 	.word	0x40022000
 8001898:	40021000 	.word	0x40021000
 800189c:	08002720 	.word	0x08002720
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000008 	.word	0x20000008

080018a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_RCC_GetSysClockFreq+0x94>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d002      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x30>
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d003      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x36>
 80018d6:	e027      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x98>)
 80018da:	613b      	str	r3, [r7, #16]
      break;
 80018dc:	e027      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	0c9b      	lsrs	r3, r3, #18
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	4a17      	ldr	r2, [pc, #92]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d010      	beq.n	8001918 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_RCC_GetSysClockFreq+0x94>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	0c5b      	lsrs	r3, r3, #17
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	4a11      	ldr	r2, [pc, #68]	@ (8001948 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001902:	5cd3      	ldrb	r3, [r2, r3]
 8001904:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x98>)
 800190a:	fb03 f202 	mul.w	r2, r3, r2
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e004      	b.n	8001922 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a0c      	ldr	r2, [pc, #48]	@ (800194c <HAL_RCC_GetSysClockFreq+0xa4>)
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	613b      	str	r3, [r7, #16]
      break;
 8001926:	e002      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x98>)
 800192a:	613b      	str	r3, [r7, #16]
      break;
 800192c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192e:	693b      	ldr	r3, [r7, #16]
}
 8001930:	4618      	mov	r0, r3
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	007a1200 	.word	0x007a1200
 8001944:	08002730 	.word	0x08002730
 8001948:	08002740 	.word	0x08002740
 800194c:	003d0900 	.word	0x003d0900

08001950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <RCC_Delay+0x34>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <RCC_Delay+0x38>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0a5b      	lsrs	r3, r3, #9
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800196c:	bf00      	nop
  }
  while (Delay --);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	60fa      	str	r2, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f9      	bne.n	800196c <RCC_Delay+0x1c>
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000004 	.word	0x20000004
 8001988:	10624dd3 	.word	0x10624dd3

0800198c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e041      	b.n	8001a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe fffe 	bl	80009b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f000 fb90 	bl	80020f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d001      	beq.n	8001a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e035      	b.n	8001ab0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <HAL_TIM_Base_Start_IT+0x90>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_TIM_Base_Start_IT+0x4e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a6e:	d004      	beq.n	8001a7a <HAL_TIM_Base_Start_IT+0x4e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <HAL_TIM_Base_Start_IT+0x94>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d111      	bne.n	8001a9e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b06      	cmp	r3, #6
 8001a8a:	d010      	beq.n	8001aae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9c:	e007      	b.n	8001aae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40012c00 	.word	0x40012c00
 8001ac0:	40000400 	.word	0x40000400

08001ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e041      	b.n	8001b5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f839 	bl	8001b62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f000 faf4 	bl	80020f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d122      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d11b      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0202 	mvn.w	r2, #2
 8001ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fa7f 	bl	80020ba <HAL_TIM_IC_CaptureCallback>
 8001bbc:	e005      	b.n	8001bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fa72 	bl	80020a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fa81 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d122      	bne.n	8001c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d11b      	bne.n	8001c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0204 	mvn.w	r2, #4
 8001bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fa55 	bl	80020ba <HAL_TIM_IC_CaptureCallback>
 8001c10:	e005      	b.n	8001c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fa48 	bl	80020a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fa57 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d122      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d11b      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0208 	mvn.w	r2, #8
 8001c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa2b 	bl	80020ba <HAL_TIM_IC_CaptureCallback>
 8001c64:	e005      	b.n	8001c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fa1e 	bl	80020a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 fa2d 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d122      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d11b      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0210 	mvn.w	r2, #16
 8001c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fa01 	bl	80020ba <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9f4 	bl	80020a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fa03 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d107      	bne.n	8001cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0201 	mvn.w	r2, #1
 8001cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f9cf 	bl	8002096 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d02:	2b80      	cmp	r3, #128	@ 0x80
 8001d04:	d10e      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d10:	2b80      	cmp	r3, #128	@ 0x80
 8001d12:	d107      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fcbd 	bl	800269e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2e:	2b40      	cmp	r3, #64	@ 0x40
 8001d30:	d10e      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3c:	2b40      	cmp	r3, #64	@ 0x40
 8001d3e:	d107      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f9c7 	bl	80020de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d10e      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d107      	bne.n	8001d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0220 	mvn.w	r2, #32
 8001d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fc88 	bl	800268c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e0ae      	b.n	8001f00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	f200 809f 	bhi.w	8001ef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001db2:	a201      	add	r2, pc, #4	@ (adr r2, 8001db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001ded 	.word	0x08001ded
 8001dbc:	08001ef1 	.word	0x08001ef1
 8001dc0:	08001ef1 	.word	0x08001ef1
 8001dc4:	08001ef1 	.word	0x08001ef1
 8001dc8:	08001e2d 	.word	0x08001e2d
 8001dcc:	08001ef1 	.word	0x08001ef1
 8001dd0:	08001ef1 	.word	0x08001ef1
 8001dd4:	08001ef1 	.word	0x08001ef1
 8001dd8:	08001e6f 	.word	0x08001e6f
 8001ddc:	08001ef1 	.word	0x08001ef1
 8001de0:	08001ef1 	.word	0x08001ef1
 8001de4:	08001ef1 	.word	0x08001ef1
 8001de8:	08001eaf 	.word	0x08001eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f9d4 	bl	80021a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0208 	orr.w	r2, r2, #8
 8001e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0204 	bic.w	r2, r2, #4
 8001e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6999      	ldr	r1, [r3, #24]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	619a      	str	r2, [r3, #24]
      break;
 8001e2a:	e064      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fa1a 	bl	800226c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6999      	ldr	r1, [r3, #24]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	021a      	lsls	r2, r3, #8
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	619a      	str	r2, [r3, #24]
      break;
 8001e6c:	e043      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fa63 	bl	8002340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69da      	ldr	r2, [r3, #28]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0208 	orr.w	r2, r2, #8
 8001e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0204 	bic.w	r2, r2, #4
 8001e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69d9      	ldr	r1, [r3, #28]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	61da      	str	r2, [r3, #28]
      break;
 8001eac:	e023      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 faad 	bl	8002414 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69da      	ldr	r2, [r3, #28]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69d9      	ldr	r1, [r3, #28]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	021a      	lsls	r2, r3, #8
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	61da      	str	r2, [r3, #28]
      break;
 8001eee:	e002      	b.n	8001ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_TIM_ConfigClockSource+0x1c>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e0b4      	b.n	800208e <HAL_TIM_ConfigClockSource+0x186>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f5c:	d03e      	beq.n	8001fdc <HAL_TIM_ConfigClockSource+0xd4>
 8001f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f62:	f200 8087 	bhi.w	8002074 <HAL_TIM_ConfigClockSource+0x16c>
 8001f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f6a:	f000 8086 	beq.w	800207a <HAL_TIM_ConfigClockSource+0x172>
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f72:	d87f      	bhi.n	8002074 <HAL_TIM_ConfigClockSource+0x16c>
 8001f74:	2b70      	cmp	r3, #112	@ 0x70
 8001f76:	d01a      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0xa6>
 8001f78:	2b70      	cmp	r3, #112	@ 0x70
 8001f7a:	d87b      	bhi.n	8002074 <HAL_TIM_ConfigClockSource+0x16c>
 8001f7c:	2b60      	cmp	r3, #96	@ 0x60
 8001f7e:	d050      	beq.n	8002022 <HAL_TIM_ConfigClockSource+0x11a>
 8001f80:	2b60      	cmp	r3, #96	@ 0x60
 8001f82:	d877      	bhi.n	8002074 <HAL_TIM_ConfigClockSource+0x16c>
 8001f84:	2b50      	cmp	r3, #80	@ 0x50
 8001f86:	d03c      	beq.n	8002002 <HAL_TIM_ConfigClockSource+0xfa>
 8001f88:	2b50      	cmp	r3, #80	@ 0x50
 8001f8a:	d873      	bhi.n	8002074 <HAL_TIM_ConfigClockSource+0x16c>
 8001f8c:	2b40      	cmp	r3, #64	@ 0x40
 8001f8e:	d058      	beq.n	8002042 <HAL_TIM_ConfigClockSource+0x13a>
 8001f90:	2b40      	cmp	r3, #64	@ 0x40
 8001f92:	d86f      	bhi.n	8002074 <HAL_TIM_ConfigClockSource+0x16c>
 8001f94:	2b30      	cmp	r3, #48	@ 0x30
 8001f96:	d064      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x15a>
 8001f98:	2b30      	cmp	r3, #48	@ 0x30
 8001f9a:	d86b      	bhi.n	8002074 <HAL_TIM_ConfigClockSource+0x16c>
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d060      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x15a>
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d867      	bhi.n	8002074 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d05c      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x15a>
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d05a      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x15a>
 8001fac:	e062      	b.n	8002074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fbe:	f000 faee 	bl	800259e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	609a      	str	r2, [r3, #8]
      break;
 8001fda:	e04f      	b.n	800207c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fec:	f000 fad7 	bl	800259e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ffe:	609a      	str	r2, [r3, #8]
      break;
 8002000:	e03c      	b.n	800207c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200e:	461a      	mov	r2, r3
 8002010:	f000 fa4e 	bl	80024b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2150      	movs	r1, #80	@ 0x50
 800201a:	4618      	mov	r0, r3
 800201c:	f000 faa5 	bl	800256a <TIM_ITRx_SetConfig>
      break;
 8002020:	e02c      	b.n	800207c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800202e:	461a      	mov	r2, r3
 8002030:	f000 fa6c 	bl	800250c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2160      	movs	r1, #96	@ 0x60
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fa95 	bl	800256a <TIM_ITRx_SetConfig>
      break;
 8002040:	e01c      	b.n	800207c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800204e:	461a      	mov	r2, r3
 8002050:	f000 fa2e 	bl	80024b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2140      	movs	r1, #64	@ 0x40
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fa85 	bl	800256a <TIM_ITRx_SetConfig>
      break;
 8002060:	e00c      	b.n	800207c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4619      	mov	r1, r3
 800206c:	4610      	mov	r0, r2
 800206e:	f000 fa7c 	bl	800256a <TIM_ITRx_SetConfig>
      break;
 8002072:	e003      	b.n	800207c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
      break;
 8002078:	e000      	b.n	800207c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800207a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a25      	ldr	r2, [pc, #148]	@ (8002198 <TIM_Base_SetConfig+0xa8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d007      	beq.n	8002118 <TIM_Base_SetConfig+0x28>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210e:	d003      	beq.n	8002118 <TIM_Base_SetConfig+0x28>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a22      	ldr	r2, [pc, #136]	@ (800219c <TIM_Base_SetConfig+0xac>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d108      	bne.n	800212a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800211e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1a      	ldr	r2, [pc, #104]	@ (8002198 <TIM_Base_SetConfig+0xa8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <TIM_Base_SetConfig+0x52>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002138:	d003      	beq.n	8002142 <TIM_Base_SetConfig+0x52>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a17      	ldr	r2, [pc, #92]	@ (800219c <TIM_Base_SetConfig+0xac>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d108      	bne.n	8002154 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a07      	ldr	r2, [pc, #28]	@ (8002198 <TIM_Base_SetConfig+0xa8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d103      	bne.n	8002188 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	615a      	str	r2, [r3, #20]
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40012c00 	.word	0x40012c00
 800219c:	40000400 	.word	0x40000400

080021a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f023 0201 	bic.w	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f023 0302 	bic.w	r3, r3, #2
 80021e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002268 <TIM_OC1_SetConfig+0xc8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d10c      	bne.n	8002216 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f023 0308 	bic.w	r3, r3, #8
 8002202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a13      	ldr	r2, [pc, #76]	@ (8002268 <TIM_OC1_SetConfig+0xc8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d111      	bne.n	8002242 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800222c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	621a      	str	r2, [r3, #32]
}
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40012c00 	.word	0x40012c00

0800226c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f023 0210 	bic.w	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f023 0320 	bic.w	r3, r3, #32
 80022b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <TIM_OC2_SetConfig+0xd0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d10d      	bne.n	80022e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a14      	ldr	r2, [pc, #80]	@ (800233c <TIM_OC2_SetConfig+0xd0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d113      	bne.n	8002318 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	621a      	str	r2, [r3, #32]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	40012c00 	.word	0x40012c00

08002340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a1d      	ldr	r2, [pc, #116]	@ (8002410 <TIM_OC3_SetConfig+0xd0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10d      	bne.n	80023ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <TIM_OC3_SetConfig+0xd0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d113      	bne.n	80023ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	621a      	str	r2, [r3, #32]
}
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40012c00 	.word	0x40012c00

08002414 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800244a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800245e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	031b      	lsls	r3, r3, #12
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0f      	ldr	r2, [pc, #60]	@ (80024ac <TIM_OC4_SetConfig+0x98>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d109      	bne.n	8002488 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800247a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	019b      	lsls	r3, r3, #6
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	621a      	str	r2, [r3, #32]
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40012c00 	.word	0x40012c00

080024b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	f023 0201 	bic.w	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f023 030a 	bic.w	r3, r3, #10
 80024ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	621a      	str	r2, [r3, #32]
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	f023 0210 	bic.w	r2, r3, #16
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	031b      	lsls	r3, r3, #12
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002548:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	621a      	str	r2, [r3, #32]
}
 8002560:	bf00      	nop
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	f043 0307 	orr.w	r3, r3, #7
 800258c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	609a      	str	r2, [r3, #8]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800259e:	b480      	push	{r7}
 80025a0:	b087      	sub	sp, #28
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	021a      	lsls	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e041      	b.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800261a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d009      	beq.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002640:	d004      	beq.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10c      	bne.n	8002666 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4313      	orrs	r3, r2
 800265c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400

0800268c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <memset>:
 80026b0:	4603      	mov	r3, r0
 80026b2:	4402      	add	r2, r0
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d100      	bne.n	80026ba <memset+0xa>
 80026b8:	4770      	bx	lr
 80026ba:	f803 1b01 	strb.w	r1, [r3], #1
 80026be:	e7f9      	b.n	80026b4 <memset+0x4>

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	2600      	movs	r6, #0
 80026c4:	4d0c      	ldr	r5, [pc, #48]	@ (80026f8 <__libc_init_array+0x38>)
 80026c6:	4c0d      	ldr	r4, [pc, #52]	@ (80026fc <__libc_init_array+0x3c>)
 80026c8:	1b64      	subs	r4, r4, r5
 80026ca:	10a4      	asrs	r4, r4, #2
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	f000 f81a 	bl	8002708 <_init>
 80026d4:	2600      	movs	r6, #0
 80026d6:	4d0a      	ldr	r5, [pc, #40]	@ (8002700 <__libc_init_array+0x40>)
 80026d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002704 <__libc_init_array+0x44>)
 80026da:	1b64      	subs	r4, r4, r5
 80026dc:	10a4      	asrs	r4, r4, #2
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	08002744 	.word	0x08002744
 80026fc:	08002744 	.word	0x08002744
 8002700:	08002744 	.word	0x08002744
 8002704:	08002748 	.word	0x08002748

08002708 <_init>:
 8002708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270a:	bf00      	nop
 800270c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800270e:	bc08      	pop	{r3}
 8002710:	469e      	mov	lr, r3
 8002712:	4770      	bx	lr

08002714 <_fini>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr
