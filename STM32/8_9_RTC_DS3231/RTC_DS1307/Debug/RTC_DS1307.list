
RTC_DS1307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000471c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004828  08004828  00005828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a4  080048a4  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080048a4  080048a4  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a4  080048a4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a4  080048a4  000058a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048a8  080048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080048ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000010  080048bc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080048bc  00006088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007102  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179a  00000000  00000000  0000d13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bf  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f54  00000000  00000000  0000f62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a56e  00000000  00000000  00025583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c6ba  00000000  00000000  0002faf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac1ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db4  00000000  00000000  000ac1f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000adfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004810 	.word	0x08004810

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004810 	.word	0x08004810

0800014c <main>:
uint8_t regData = 0;
uint8_t regAddress = I2C_ID_ADDRESS;


int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8

  HAL_Init();
 8000152:	f000 f9e9 	bl	8000528 <HAL_Init>

  SystemClock_Config();
 8000156:	f000 f84b 	bl	80001f0 <SystemClock_Config>

  MX_GPIO_Init();
 800015a:	f000 f8b3 	bl	80002c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f883 	bl	8000268 <MX_I2C1_Init>


  LCD16X2_Init(MyLCD);
 8000162:	2000      	movs	r0, #0
 8000164:	f004 f896 	bl	8004294 <LCD16X2_Init>
  LCD16X2_Clear(MyLCD);
 8000168:	2000      	movs	r0, #0
 800016a:	f004 f813 	bl	8004194 <LCD16X2_Clear>
  LCD16X2_Set_Cursor(MyLCD, 1, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	2101      	movs	r1, #1
 8000172:	2000      	movs	r0, #0
 8000174:	f004 f84e 	bl	8004214 <LCD16X2_Set_Cursor>
  LCD16X2_Write_String(MyLCD, "  DeepBlue");
 8000178:	4918      	ldr	r1, [pc, #96]	@ (80001dc <main+0x90>)
 800017a:	2000      	movs	r0, #0
 800017c:	f004 fafc 	bl	8004778 <LCD16X2_Write_String>
  LCD16X2_Set_Cursor(MyLCD, 2, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	2102      	movs	r1, #2
 8000184:	2000      	movs	r0, #0
 8000186:	f004 f845 	bl	8004214 <LCD16X2_Set_Cursor>
  LCD16X2_Write_String(MyLCD, "STM32 Course");
 800018a:	4915      	ldr	r1, [pc, #84]	@ (80001e0 <main+0x94>)
 800018c:	2000      	movs	r0, #0
 800018e:	f004 faf3 	bl	8004778 <LCD16X2_Write_String>
      LCD16X2_SL(MyLCD);  HAL_Delay(1500);
      LCD16X2_SL(MyLCD);  HAL_Delay(1500);
      LCD16X2_SL(MyLCD);  HAL_Delay(1500);
	  */

	  HAL_I2C_Master_Transmit(&hi2c1, (I2C_ADDRESS << 1), &regAddress, 1,  I2C_TIMEOUT);
 8000192:	230a      	movs	r3, #10
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2301      	movs	r3, #1
 8000198:	4a12      	ldr	r2, [pc, #72]	@ (80001e4 <main+0x98>)
 800019a:	21d0      	movs	r1, #208	@ 0xd0
 800019c:	4812      	ldr	r0, [pc, #72]	@ (80001e8 <main+0x9c>)
 800019e:	f000 fec9 	bl	8000f34 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, (I2C_ADDRESS << 1), &regData, 1,  I2C_TIMEOUT);
 80001a2:	230a      	movs	r3, #10
 80001a4:	9300      	str	r3, [sp, #0]
 80001a6:	2301      	movs	r3, #1
 80001a8:	4a10      	ldr	r2, [pc, #64]	@ (80001ec <main+0xa0>)
 80001aa:	21d0      	movs	r1, #208	@ 0xd0
 80001ac:	480e      	ldr	r0, [pc, #56]	@ (80001e8 <main+0x9c>)
 80001ae:	f000 ffbf 	bl	8001130 <HAL_I2C_Master_Receive>
	  LCD16X2_Clear(MyLCD);
 80001b2:	2000      	movs	r0, #0
 80001b4:	f003 ffee 	bl	8004194 <LCD16X2_Clear>
	  LCD16X2_Set_Cursor(MyLCD, 1, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	2101      	movs	r1, #1
 80001bc:	2000      	movs	r0, #0
 80001be:	f004 f829 	bl	8004214 <LCD16X2_Set_Cursor>
	  //String data = (char*)regData;
	  LCD16X2_Write_String(MyLCD, regData);
 80001c2:	4b0a      	ldr	r3, [pc, #40]	@ (80001ec <main+0xa0>)
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	4619      	mov	r1, r3
 80001c8:	2000      	movs	r0, #0
 80001ca:	f004 fad5 	bl	8004778 <LCD16X2_Write_String>
      HAL_Delay(1000);
 80001ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001d2:	f000 fa0b 	bl	80005ec <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1, (I2C_ADDRESS << 1), &regAddress, 1,  I2C_TIMEOUT);
 80001d6:	bf00      	nop
 80001d8:	e7db      	b.n	8000192 <main+0x46>
 80001da:	bf00      	nop
 80001dc:	08004828 	.word	0x08004828
 80001e0:	08004834 	.word	0x08004834
 80001e4:	20000000 	.word	0x20000000
 80001e8:	2000002c 	.word	0x2000002c
 80001ec:	20000080 	.word	0x20000080

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	@ 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f004 fada 	bl	80047b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021e:	2300      	movs	r3, #0
 8000220:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fa32 	bl	8003690 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000232:	f000 f885 	bl	8000340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f003 fca0 	bl	8003b94 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025a:	f000 f871 	bl	8000340 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3740      	adds	r7, #64	@ 0x40
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800026c:	4b12      	ldr	r3, [pc, #72]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800026e:	4a13      	ldr	r2, [pc, #76]	@ (80002bc <MX_I2C1_Init+0x54>)
 8000270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000272:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000274:	4a12      	ldr	r2, [pc, #72]	@ (80002c0 <MX_I2C1_Init+0x58>)
 8000276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000278:	4b0f      	ldr	r3, [pc, #60]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000280:	2200      	movs	r2, #0
 8000282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000284:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000286:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800028a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028c:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <MX_I2C1_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000298:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <MX_I2C1_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800029e:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <MX_I2C1_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <MX_I2C1_Init+0x50>)
 80002a6:	f000 fced 	bl	8000c84 <HAL_I2C_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f846 	bl	8000340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000002c 	.word	0x2000002c
 80002bc:	40005400 	.word	0x40005400
 80002c0:	000186a0 	.word	0x000186a0

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0308 	add.w	r3, r7, #8
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b17      	ldr	r3, [pc, #92]	@ (8000338 <MX_GPIO_Init+0x74>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a16      	ldr	r2, [pc, #88]	@ (8000338 <MX_GPIO_Init+0x74>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <MX_GPIO_Init+0x74>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_GPIO_Init+0x74>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a10      	ldr	r2, [pc, #64]	@ (8000338 <MX_GPIO_Init+0x74>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_GPIO_Init+0x74>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0308 	and.w	r3, r3, #8
 8000304:	603b      	str	r3, [r7, #0]
 8000306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000308:	2200      	movs	r2, #0
 800030a:	21fc      	movs	r1, #252	@ 0xfc
 800030c:	480b      	ldr	r0, [pc, #44]	@ (800033c <MX_GPIO_Init+0x78>)
 800030e:	f000 fca1 	bl	8000c54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000312:	23fc      	movs	r3, #252	@ 0xfc
 8000314:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031e:	2302      	movs	r3, #2
 8000320:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	4619      	mov	r1, r3
 8000328:	4804      	ldr	r0, [pc, #16]	@ (800033c <MX_GPIO_Init+0x78>)
 800032a:	f000 fb17 	bl	800095c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800032e:	bf00      	nop
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000
 800033c:	40010800 	.word	0x40010800

08000340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
}
 8000346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <Error_Handler+0x8>

0800034c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000352:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	4a14      	ldr	r2, [pc, #80]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <HAL_MspInit+0x5c>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	4a0e      	ldr	r2, [pc, #56]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000374:	61d3      	str	r3, [r2, #28]
 8000376:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <HAL_MspInit+0x5c>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000382:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <HAL_MspInit+0x60>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <HAL_MspInit+0x60>)
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40010000 	.word	0x40010000

080003b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000444 <HAL_I2C_MspInit+0x94>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d135      	bne.n	800043c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000448 <HAL_I2C_MspInit+0x98>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000448 <HAL_I2C_MspInit+0x98>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000448 <HAL_I2C_MspInit+0x98>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0308 	and.w	r3, r3, #8
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003e8:	23c0      	movs	r3, #192	@ 0xc0
 80003ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003ec:	2312      	movs	r3, #18
 80003ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f4:	2303      	movs	r3, #3
 80003f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	4813      	ldr	r0, [pc, #76]	@ (800044c <HAL_I2C_MspInit+0x9c>)
 8000400:	f000 faac 	bl	800095c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000404:	4b10      	ldr	r3, [pc, #64]	@ (8000448 <HAL_I2C_MspInit+0x98>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	4a0f      	ldr	r2, [pc, #60]	@ (8000448 <HAL_I2C_MspInit+0x98>)
 800040a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800040e:	61d3      	str	r3, [r2, #28]
 8000410:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <HAL_I2C_MspInit+0x98>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	201f      	movs	r0, #31
 8000422:	f000 f9de 	bl	80007e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000426:	201f      	movs	r0, #31
 8000428:	f000 f9f7 	bl	800081a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	2100      	movs	r1, #0
 8000430:	2020      	movs	r0, #32
 8000432:	f000 f9d6 	bl	80007e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000436:	2020      	movs	r0, #32
 8000438:	f000 f9ef 	bl	800081a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40005400 	.word	0x40005400
 8000448:	40021000 	.word	0x40021000
 800044c:	40010c00 	.word	0x40010c00

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <NMI_Handler+0x4>

08000458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <MemManage_Handler+0x4>

08000468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <UsageFault_Handler+0x4>

08000478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 f888 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80004ac:	4802      	ldr	r0, [pc, #8]	@ (80004b8 <I2C1_EV_IRQHandler+0x10>)
 80004ae:	f001 f8ab 	bl	8001608 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000002c 	.word	0x2000002c

080004bc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <I2C1_ER_IRQHandler+0x10>)
 80004c2:	f001 f9f4 	bl	80018ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000002c 	.word	0x2000002c

080004d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004dc:	f7ff fff8 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480b      	ldr	r0, [pc, #44]	@ (8000510 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004e2:	490c      	ldr	r1, [pc, #48]	@ (8000514 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a09      	ldr	r2, [pc, #36]	@ (800051c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004f8:	4c09      	ldr	r4, [pc, #36]	@ (8000520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000506:	f004 f95f 	bl	80047c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff fe1f 	bl	800014c <main>
  bx lr
 800050e:	4770      	bx	lr
  ldr r0, =_sdata
 8000510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000514:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000518:	080048ac 	.word	0x080048ac
  ldr r2, =_sbss
 800051c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000520:	20000088 	.word	0x20000088

08000524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000524:	e7fe      	b.n	8000524 <ADC1_2_IRQHandler>
	...

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800052c:	4b08      	ldr	r3, [pc, #32]	@ (8000550 <HAL_Init+0x28>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <HAL_Init+0x28>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000538:	2003      	movs	r0, #3
 800053a:	f000 f947 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053e:	200f      	movs	r0, #15
 8000540:	f000 f808 	bl	8000554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f7ff ff02 	bl	800034c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40022000 	.word	0x40022000

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f95f 	bl	8000836 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f927 	bl	80007e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000004 	.word	0x20000004
 80005ac:	2000000c 	.word	0x2000000c
 80005b0:	20000008 	.word	0x20000008

080005b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <HAL_IncTick+0x1c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <HAL_IncTick+0x20>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a03      	ldr	r2, [pc, #12]	@ (80005d4 <HAL_IncTick+0x20>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	20000084 	.word	0x20000084

080005d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b02      	ldr	r3, [pc, #8]	@ (80005e8 <HAL_GetTick+0x10>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000084 	.word	0x20000084

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff fff0 	bl	80005d8 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000606:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <HAL_Delay+0x44>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffe0 	bl	80005d8 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000000c 	.word	0x2000000c

08000634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800065c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000680:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <__NVIC_GetPriorityGrouping+0x18>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	f003 0307 	and.w	r3, r3, #7
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	db0b      	blt.n	80006c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 021f 	and.w	r2, r3, #31
 80006b0:	4906      	ldr	r1, [pc, #24]	@ (80006cc <__NVIC_EnableIRQ+0x34>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	095b      	lsrs	r3, r3, #5
 80006b8:	2001      	movs	r0, #1
 80006ba:	fa00 f202 	lsl.w	r2, r0, r2
 80006be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	@ (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	@ (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	@ 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	@ 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff90 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff2d 	bl	8000634 <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff42 	bl	800067c <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff90 	bl	8000724 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5f 	bl	80006d0 <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff35 	bl	8000698 <__NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffa2 	bl	8000788 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b02      	cmp	r3, #2
 8000866:	d005      	beq.n	8000874 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2204      	movs	r2, #4
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e051      	b.n	8000918 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f022 020e 	bic.w	r2, r2, #14
 8000882:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f022 0201 	bic.w	r2, r2, #1
 8000892:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <HAL_DMA_Abort_IT+0xd4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d029      	beq.n	80008f2 <HAL_DMA_Abort_IT+0xa2>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a21      	ldr	r2, [pc, #132]	@ (8000928 <HAL_DMA_Abort_IT+0xd8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d022      	beq.n	80008ee <HAL_DMA_Abort_IT+0x9e>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a1f      	ldr	r2, [pc, #124]	@ (800092c <HAL_DMA_Abort_IT+0xdc>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d01a      	beq.n	80008e8 <HAL_DMA_Abort_IT+0x98>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000930 <HAL_DMA_Abort_IT+0xe0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d012      	beq.n	80008e2 <HAL_DMA_Abort_IT+0x92>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <HAL_DMA_Abort_IT+0xe4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d00a      	beq.n	80008dc <HAL_DMA_Abort_IT+0x8c>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <HAL_DMA_Abort_IT+0xe8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d102      	bne.n	80008d6 <HAL_DMA_Abort_IT+0x86>
 80008d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80008d4:	e00e      	b.n	80008f4 <HAL_DMA_Abort_IT+0xa4>
 80008d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008da:	e00b      	b.n	80008f4 <HAL_DMA_Abort_IT+0xa4>
 80008dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e0:	e008      	b.n	80008f4 <HAL_DMA_Abort_IT+0xa4>
 80008e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e6:	e005      	b.n	80008f4 <HAL_DMA_Abort_IT+0xa4>
 80008e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008ec:	e002      	b.n	80008f4 <HAL_DMA_Abort_IT+0xa4>
 80008ee:	2310      	movs	r3, #16
 80008f0:	e000      	b.n	80008f4 <HAL_DMA_Abort_IT+0xa4>
 80008f2:	2301      	movs	r3, #1
 80008f4:	4a11      	ldr	r2, [pc, #68]	@ (800093c <HAL_DMA_Abort_IT+0xec>)
 80008f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2201      	movs	r2, #1
 80008fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090c:	2b00      	cmp	r3, #0
 800090e:	d003      	beq.n	8000918 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	4798      	blx	r3
    } 
  }
  return status;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020008 	.word	0x40020008
 8000928:	4002001c 	.word	0x4002001c
 800092c:	40020030 	.word	0x40020030
 8000930:	40020044 	.word	0x40020044
 8000934:	40020058 	.word	0x40020058
 8000938:	4002006c 	.word	0x4002006c
 800093c:	40020000 	.word	0x40020000

08000940 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800094e:	b2db      	uxtb	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
	...

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b08b      	sub	sp, #44	@ 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096e:	e161      	b.n	8000c34 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000970:	2201      	movs	r2, #1
 8000972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	429a      	cmp	r2, r3
 800098a:	f040 8150 	bne.w	8000c2e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4a97      	ldr	r2, [pc, #604]	@ (8000bf0 <HAL_GPIO_Init+0x294>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d05e      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 8000998:	4a95      	ldr	r2, [pc, #596]	@ (8000bf0 <HAL_GPIO_Init+0x294>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d875      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 800099e:	4a95      	ldr	r2, [pc, #596]	@ (8000bf4 <HAL_GPIO_Init+0x298>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d058      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009a4:	4a93      	ldr	r2, [pc, #588]	@ (8000bf4 <HAL_GPIO_Init+0x298>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d86f      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009aa:	4a93      	ldr	r2, [pc, #588]	@ (8000bf8 <HAL_GPIO_Init+0x29c>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d052      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009b0:	4a91      	ldr	r2, [pc, #580]	@ (8000bf8 <HAL_GPIO_Init+0x29c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d869      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009b6:	4a91      	ldr	r2, [pc, #580]	@ (8000bfc <HAL_GPIO_Init+0x2a0>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d04c      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009bc:	4a8f      	ldr	r2, [pc, #572]	@ (8000bfc <HAL_GPIO_Init+0x2a0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d863      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009c2:	4a8f      	ldr	r2, [pc, #572]	@ (8000c00 <HAL_GPIO_Init+0x2a4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d046      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
 80009c8:	4a8d      	ldr	r2, [pc, #564]	@ (8000c00 <HAL_GPIO_Init+0x2a4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d85d      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d82a      	bhi.n	8000a28 <HAL_GPIO_Init+0xcc>
 80009d2:	2b12      	cmp	r3, #18
 80009d4:	d859      	bhi.n	8000a8a <HAL_GPIO_Init+0x12e>
 80009d6:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <HAL_GPIO_Init+0x80>)
 80009d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009dc:	08000a57 	.word	0x08000a57
 80009e0:	08000a31 	.word	0x08000a31
 80009e4:	08000a43 	.word	0x08000a43
 80009e8:	08000a85 	.word	0x08000a85
 80009ec:	08000a8b 	.word	0x08000a8b
 80009f0:	08000a8b 	.word	0x08000a8b
 80009f4:	08000a8b 	.word	0x08000a8b
 80009f8:	08000a8b 	.word	0x08000a8b
 80009fc:	08000a8b 	.word	0x08000a8b
 8000a00:	08000a8b 	.word	0x08000a8b
 8000a04:	08000a8b 	.word	0x08000a8b
 8000a08:	08000a8b 	.word	0x08000a8b
 8000a0c:	08000a8b 	.word	0x08000a8b
 8000a10:	08000a8b 	.word	0x08000a8b
 8000a14:	08000a8b 	.word	0x08000a8b
 8000a18:	08000a8b 	.word	0x08000a8b
 8000a1c:	08000a8b 	.word	0x08000a8b
 8000a20:	08000a39 	.word	0x08000a39
 8000a24:	08000a4d 	.word	0x08000a4d
 8000a28:	4a76      	ldr	r2, [pc, #472]	@ (8000c04 <HAL_GPIO_Init+0x2a8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d013      	beq.n	8000a56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a2e:	e02c      	b.n	8000a8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	623b      	str	r3, [r7, #32]
          break;
 8000a36:	e029      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e024      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	3308      	adds	r3, #8
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e01f      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	330c      	adds	r3, #12
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e01a      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e013      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d105      	bne.n	8000a78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	611a      	str	r2, [r3, #16]
          break;
 8000a76:	e009      	b.n	8000a8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	615a      	str	r2, [r3, #20]
          break;
 8000a82:	e003      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
          break;
 8000a88:	e000      	b.n	8000a8c <HAL_GPIO_Init+0x130>
          break;
 8000a8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	2bff      	cmp	r3, #255	@ 0xff
 8000a90:	d801      	bhi.n	8000a96 <HAL_GPIO_Init+0x13a>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	e001      	b.n	8000a9a <HAL_GPIO_Init+0x13e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2bff      	cmp	r3, #255	@ 0xff
 8000aa0:	d802      	bhi.n	8000aa8 <HAL_GPIO_Init+0x14c>
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x152>
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aaa:	3b08      	subs	r3, #8
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	401a      	ands	r2, r3
 8000ac0:	6a39      	ldr	r1, [r7, #32]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 80a9 	beq.w	8000c2e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000adc:	4b4a      	ldr	r3, [pc, #296]	@ (8000c08 <HAL_GPIO_Init+0x2ac>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a49      	ldr	r2, [pc, #292]	@ (8000c08 <HAL_GPIO_Init+0x2ac>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b47      	ldr	r3, [pc, #284]	@ (8000c08 <HAL_GPIO_Init+0x2ac>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af4:	4a45      	ldr	r2, [pc, #276]	@ (8000c0c <HAL_GPIO_Init+0x2b0>)
 8000af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4013      	ands	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8000c10 <HAL_GPIO_Init+0x2b4>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d00d      	beq.n	8000b3c <HAL_GPIO_Init+0x1e0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a3c      	ldr	r2, [pc, #240]	@ (8000c14 <HAL_GPIO_Init+0x2b8>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d007      	beq.n	8000b38 <HAL_GPIO_Init+0x1dc>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c18 <HAL_GPIO_Init+0x2bc>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d101      	bne.n	8000b34 <HAL_GPIO_Init+0x1d8>
 8000b30:	2302      	movs	r3, #2
 8000b32:	e004      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b34:	2303      	movs	r3, #3
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <HAL_GPIO_Init+0x1e2>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b40:	f002 0203 	and.w	r2, r2, #3
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b4e:	492f      	ldr	r1, [pc, #188]	@ (8000c0c <HAL_GPIO_Init+0x2b0>)
 8000b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3302      	adds	r3, #2
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b68:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	492b      	ldr	r1, [pc, #172]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	608b      	str	r3, [r1, #8]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b76:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	4927      	ldr	r1, [pc, #156]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	4921      	ldr	r1, [pc, #132]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60cb      	str	r3, [r1, #12]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	491d      	ldr	r1, [pc, #116]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	4917      	ldr	r1, [pc, #92]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	604b      	str	r3, [r1, #4]
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4913      	ldr	r1, [pc, #76]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01f      	beq.n	8000c20 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <HAL_GPIO_Init+0x2c0>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
 8000bec:	e01f      	b.n	8000c2e <HAL_GPIO_Init+0x2d2>
 8000bee:	bf00      	nop
 8000bf0:	10320000 	.word	0x10320000
 8000bf4:	10310000 	.word	0x10310000
 8000bf8:	10220000 	.word	0x10220000
 8000bfc:	10210000 	.word	0x10210000
 8000c00:	10120000 	.word	0x10120000
 8000c04:	10110000 	.word	0x10110000
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	40010800 	.word	0x40010800
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <HAL_GPIO_Init+0x2f4>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	4909      	ldr	r1, [pc, #36]	@ (8000c50 <HAL_GPIO_Init+0x2f4>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	3301      	adds	r3, #1
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f47f ae96 	bne.w	8000970 <HAL_GPIO_Init+0x14>
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	372c      	adds	r7, #44	@ 0x2c
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
 8000c60:	4613      	mov	r3, r2
 8000c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c64:	787b      	ldrb	r3, [r7, #1]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c70:	e003      	b.n	8000c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	041a      	lsls	r2, r3, #16
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	611a      	str	r2, [r3, #16]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e12b      	b.n	8000eee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d106      	bne.n	8000cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fb80 	bl	80003b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2224      	movs	r2, #36	@ 0x24
 8000cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0201 	bic.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ce6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ce8:	f003 f89c 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8000cec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a81      	ldr	r2, [pc, #516]	@ (8000ef8 <HAL_I2C_Init+0x274>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d807      	bhi.n	8000d08 <HAL_I2C_Init+0x84>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4a80      	ldr	r2, [pc, #512]	@ (8000efc <HAL_I2C_Init+0x278>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	bf94      	ite	ls
 8000d00:	2301      	movls	r3, #1
 8000d02:	2300      	movhi	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	e006      	b.n	8000d16 <HAL_I2C_Init+0x92>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4a7d      	ldr	r2, [pc, #500]	@ (8000f00 <HAL_I2C_Init+0x27c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	bf94      	ite	ls
 8000d10:	2301      	movls	r3, #1
 8000d12:	2300      	movhi	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e0e7      	b.n	8000eee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4a78      	ldr	r2, [pc, #480]	@ (8000f04 <HAL_I2C_Init+0x280>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	0c9b      	lsrs	r3, r3, #18
 8000d28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8000ef8 <HAL_I2C_Init+0x274>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d802      	bhi.n	8000d58 <HAL_I2C_Init+0xd4>
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	3301      	adds	r3, #1
 8000d56:	e009      	b.n	8000d6c <HAL_I2C_Init+0xe8>
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	4a69      	ldr	r2, [pc, #420]	@ (8000f08 <HAL_I2C_Init+0x284>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	099b      	lsrs	r3, r3, #6
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	6812      	ldr	r2, [r2, #0]
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000d7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	495c      	ldr	r1, [pc, #368]	@ (8000ef8 <HAL_I2C_Init+0x274>)
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d819      	bhi.n	8000dc0 <HAL_I2C_Init+0x13c>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1e59      	subs	r1, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d9a:	1c59      	adds	r1, r3, #1
 8000d9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000da0:	400b      	ands	r3, r1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00a      	beq.n	8000dbc <HAL_I2C_Init+0x138>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	1e59      	subs	r1, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000db4:	3301      	adds	r3, #1
 8000db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dba:	e051      	b.n	8000e60 <HAL_I2C_Init+0x1dc>
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	e04f      	b.n	8000e60 <HAL_I2C_Init+0x1dc>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d111      	bne.n	8000dec <HAL_I2C_Init+0x168>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	1e58      	subs	r0, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6859      	ldr	r1, [r3, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	440b      	add	r3, r1
 8000dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	bf0c      	ite	eq
 8000de4:	2301      	moveq	r3, #1
 8000de6:	2300      	movne	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	e012      	b.n	8000e12 <HAL_I2C_Init+0x18e>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1e58      	subs	r0, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6859      	ldr	r1, [r3, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	0099      	lsls	r1, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e02:	3301      	adds	r3, #1
 8000e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2301      	moveq	r3, #1
 8000e0e:	2300      	movne	r3, #0
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_I2C_Init+0x196>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e022      	b.n	8000e60 <HAL_I2C_Init+0x1dc>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10e      	bne.n	8000e40 <HAL_I2C_Init+0x1bc>
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1e58      	subs	r0, r3, #1
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6859      	ldr	r1, [r3, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	440b      	add	r3, r1
 8000e30:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e3e:	e00f      	b.n	8000e60 <HAL_I2C_Init+0x1dc>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6859      	ldr	r1, [r3, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	0099      	lsls	r1, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e56:	3301      	adds	r3, #1
 8000e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	6809      	ldr	r1, [r1, #0]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69da      	ldr	r2, [r3, #28]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	430a      	orrs	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000e8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6911      	ldr	r1, [r2, #16]
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68d2      	ldr	r2, [r2, #12]
 8000e9a:	4311      	orrs	r1, r2
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6812      	ldr	r2, [r2, #0]
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0201 	orr.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2220      	movs	r2, #32
 8000eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	000186a0 	.word	0x000186a0
 8000efc:	001e847f 	.word	0x001e847f
 8000f00:	003d08ff 	.word	0x003d08ff
 8000f04:	431bde83 	.word	0x431bde83
 8000f08:	10624dd3 	.word	0x10624dd3

08000f0c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f1e:	2b80      	cmp	r3, #128	@ 0x80
 8000f20:	d103      	bne.n	8000f2a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	460b      	mov	r3, r1
 8000f42:	817b      	strh	r3, [r7, #10]
 8000f44:	4613      	mov	r3, r2
 8000f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff fb46 	bl	80005d8 <HAL_GetTick>
 8000f4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b20      	cmp	r3, #32
 8000f58:	f040 80e0 	bne.w	800111c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2319      	movs	r3, #25
 8000f62:	2201      	movs	r2, #1
 8000f64:	4970      	ldr	r1, [pc, #448]	@ (8001128 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f002 f910 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f72:	2302      	movs	r3, #2
 8000f74:	e0d3      	b.n	800111e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_I2C_Master_Transmit+0x50>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e0cc      	b.n	800111e <HAL_I2C_Master_Transmit+0x1ea>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d007      	beq.n	8000faa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0201 	orr.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2221      	movs	r2, #33	@ 0x21
 8000fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	893a      	ldrh	r2, [r7, #8]
 8000fda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4a50      	ldr	r2, [pc, #320]	@ (800112c <HAL_I2C_Master_Transmit+0x1f8>)
 8000fea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fec:	8979      	ldrh	r1, [r7, #10]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	6a3a      	ldr	r2, [r7, #32]
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f001 fed2 	bl	8002d9c <I2C_MasterRequestWrite>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e08d      	b.n	800111e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001018:	e066      	b.n	80010e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	6a39      	ldr	r1, [r7, #32]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f002 f9ce 	bl	80033c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00d      	beq.n	8001046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	2b04      	cmp	r3, #4
 8001030:	d107      	bne.n	8001042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e06b      	b.n	800111e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001060:	b29b      	uxth	r3, r3
 8001062:	3b01      	subs	r3, #1
 8001064:	b29a      	uxth	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800106e:	3b01      	subs	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b04      	cmp	r3, #4
 8001082:	d11b      	bne.n	80010bc <HAL_I2C_Master_Transmit+0x188>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001088:	2b00      	cmp	r3, #0
 800108a:	d017      	beq.n	80010bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	3b01      	subs	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	6a39      	ldr	r1, [r7, #32]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f002 f9c5 	bl	8003450 <I2C_WaitOnBTFFlagUntilTimeout>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00d      	beq.n	80010e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d107      	bne.n	80010e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e01a      	b.n	800111e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d194      	bne.n	800101a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2220      	movs	r2, #32
 8001104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001118:	2300      	movs	r3, #0
 800111a:	e000      	b.n	800111e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800111c:	2302      	movs	r3, #2
  }
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	00100002 	.word	0x00100002
 800112c:	ffff0000 	.word	0xffff0000

08001130 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	@ 0x30
 8001134:	af02      	add	r7, sp, #8
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	461a      	mov	r2, r3
 800113c:	460b      	mov	r3, r1
 800113e:	817b      	strh	r3, [r7, #10]
 8001140:	4613      	mov	r3, r2
 8001142:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff fa46 	bl	80005d8 <HAL_GetTick>
 800114c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b20      	cmp	r3, #32
 8001158:	f040 824b 	bne.w	80015f2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2319      	movs	r3, #25
 8001162:	2201      	movs	r2, #1
 8001164:	497f      	ldr	r1, [pc, #508]	@ (8001364 <HAL_I2C_Master_Receive+0x234>)
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f002 f810 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001172:	2302      	movs	r3, #2
 8001174:	e23e      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_I2C_Master_Receive+0x54>
 8001180:	2302      	movs	r3, #2
 8001182:	e237      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b01      	cmp	r3, #1
 8001198:	d007      	beq.n	80011aa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80011b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2222      	movs	r2, #34	@ 0x22
 80011be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2210      	movs	r2, #16
 80011c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	893a      	ldrh	r2, [r7, #8]
 80011da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4a5f      	ldr	r2, [pc, #380]	@ (8001368 <HAL_I2C_Master_Receive+0x238>)
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011ec:	8979      	ldrh	r1, [r7, #10]
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f001 fe54 	bl	8002ea0 <I2C_MasterRequestRead>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e1f8      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001206:	2b00      	cmp	r3, #0
 8001208:	d113      	bne.n	8001232 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e1cc      	b.n	80015cc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001236:	2b01      	cmp	r3, #1
 8001238:	d11e      	bne.n	8001278 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001248:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800124a:	b672      	cpsid	i
}
 800124c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	61bb      	str	r3, [r7, #24]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001272:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001274:	b662      	cpsie	i
}
 8001276:	e035      	b.n	80012e4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800127c:	2b02      	cmp	r3, #2
 800127e:	d11e      	bne.n	80012be <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800128e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80012ba:	b662      	cpsie	i
}
 80012bc:	e012      	b.n	80012e4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80012e4:	e172      	b.n	80015cc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	f200 811f 	bhi.w	800152e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d123      	bne.n	8001340 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f002 f921 	bl	8003544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e173      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001328:	3b01      	subs	r3, #1
 800132a:	b29a      	uxth	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001334:	b29b      	uxth	r3, r3
 8001336:	3b01      	subs	r3, #1
 8001338:	b29a      	uxth	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800133e:	e145      	b.n	80015cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001344:	2b02      	cmp	r3, #2
 8001346:	d152      	bne.n	80013ee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134e:	2200      	movs	r2, #0
 8001350:	4906      	ldr	r1, [pc, #24]	@ (800136c <HAL_I2C_Master_Receive+0x23c>)
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f001 ff1a 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d008      	beq.n	8001370 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e148      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
 8001362:	bf00      	nop
 8001364:	00100002 	.word	0x00100002
 8001368:	ffff0000 	.word	0xffff0000
 800136c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	3b01      	subs	r3, #1
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80013b6:	b662      	cpsie	i
}
 80013b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d6:	3b01      	subs	r3, #1
 80013d8:	b29a      	uxth	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3b01      	subs	r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80013ec:	e0ee      	b.n	80015cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f4:	2200      	movs	r2, #0
 80013f6:	4981      	ldr	r1, [pc, #516]	@ (80015fc <HAL_I2C_Master_Receive+0x4cc>)
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f001 fec7 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0f5      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001416:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001438:	3b01      	subs	r3, #1
 800143a:	b29a      	uxth	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b01      	subs	r3, #1
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800144e:	4b6c      	ldr	r3, [pc, #432]	@ (8001600 <HAL_I2C_Master_Receive+0x4d0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	4a6b      	ldr	r2, [pc, #428]	@ (8001604 <HAL_I2C_Master_Receive+0x4d4>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0a1a      	lsrs	r2, r3, #8
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00da      	lsls	r2, r3, #3
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	3b01      	subs	r3, #1
 800146c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d118      	bne.n	80014a6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2220      	movs	r2, #32
 800147e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f043 0220 	orr.w	r2, r3, #32
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001496:	b662      	cpsie	i
}
 8001498:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0a6      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d1d9      	bne.n	8001468 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	691a      	ldr	r2, [r3, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80014f6:	b662      	cpsie	i
}
 80014f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b01      	subs	r3, #1
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800152c:	e04e      	b.n	80015cc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800152e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001530:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f002 f806 	bl	8003544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e058      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800155e:	3b01      	subs	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800156a:	b29b      	uxth	r3, r3
 800156c:	3b01      	subs	r3, #1
 800156e:	b29a      	uxth	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b04      	cmp	r3, #4
 8001580:	d124      	bne.n	80015cc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001586:	2b03      	cmp	r3, #3
 8001588:	d107      	bne.n	800159a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001598:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f ae88 	bne.w	80012e6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2220      	movs	r2, #32
 80015da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80015f2:	2302      	movs	r3, #2
  }
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3728      	adds	r7, #40	@ 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	00010004 	.word	0x00010004
 8001600:	20000004 	.word	0x20000004
 8001604:	14f8b589 	.word	0x14f8b589

08001608 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001620:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001628:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001630:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	2b10      	cmp	r3, #16
 8001636:	d003      	beq.n	8001640 <HAL_I2C_EV_IRQHandler+0x38>
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	2b40      	cmp	r3, #64	@ 0x40
 800163c:	f040 80b1 	bne.w	80017a2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10d      	bne.n	8001676 <HAL_I2C_EV_IRQHandler+0x6e>
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001660:	d003      	beq.n	800166a <HAL_I2C_EV_IRQHandler+0x62>
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001668:	d101      	bne.n	800166e <HAL_I2C_EV_IRQHandler+0x66>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_I2C_EV_IRQHandler+0x68>
 800166e:	2300      	movs	r3, #0
 8001670:	2b01      	cmp	r3, #1
 8001672:	f000 8114 	beq.w	800189e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00b      	beq.n	8001698 <HAL_I2C_EV_IRQHandler+0x90>
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f001 ffe5 	bl	800365a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd60 	bl	8002156 <I2C_Master_SB>
 8001696:	e083      	b.n	80017a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_I2C_EV_IRQHandler+0xac>
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fdd7 	bl	8002260 <I2C_Master_ADD10>
 80016b2:	e075      	b.n	80017a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_I2C_EV_IRQHandler+0xc8>
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fdf2 	bl	80022b2 <I2C_Master_ADDR>
 80016ce:	e067      	b.n	80017a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d036      	beq.n	8001748 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80016e8:	f000 80db 	beq.w	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00d      	beq.n	8001712 <HAL_I2C_EV_IRQHandler+0x10a>
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_I2C_EV_IRQHandler+0x10a>
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f9d4 	bl	8001ab8 <I2C_MasterTransmit_TXE>
 8001710:	e046      	b.n	80017a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80c2 	beq.w	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80bc 	beq.w	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800172a:	7bbb      	ldrb	r3, [r7, #14]
 800172c:	2b21      	cmp	r3, #33	@ 0x21
 800172e:	d103      	bne.n	8001738 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fa5d 	bl	8001bf0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001736:	e0b4      	b.n	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b40      	cmp	r3, #64	@ 0x40
 800173c:	f040 80b1 	bne.w	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 facb 	bl	8001cdc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001746:	e0ac      	b.n	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001756:	f000 80a4 	beq.w	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00d      	beq.n	8001780 <HAL_I2C_EV_IRQHandler+0x178>
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <HAL_I2C_EV_IRQHandler+0x178>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fb47 	bl	8001e0c <I2C_MasterReceive_RXNE>
 800177e:	e00f      	b.n	80017a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 808b 	beq.w	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8085 	beq.w	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fbf2 	bl	8001f82 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800179e:	e080      	b.n	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
 80017a0:	e07f      	b.n	80018a2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	e007      	b.n	80017c4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d011      	beq.n	80017f2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80017e8:	69b9      	ldr	r1, [r7, #24]
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 ffb8 	bl	8002760 <I2C_Slave_ADDR>
 80017f0:	e05a      	b.n	80018a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_I2C_EV_IRQHandler+0x206>
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fff2 	bl	80027f0 <I2C_Slave_STOPF>
 800180c:	e04c      	b.n	80018a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800180e:	7bbb      	ldrb	r3, [r7, #14]
 8001810:	2b21      	cmp	r3, #33	@ 0x21
 8001812:	d002      	beq.n	800181a <HAL_I2C_EV_IRQHandler+0x212>
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	2b29      	cmp	r3, #41	@ 0x29
 8001818:	d120      	bne.n	800185c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00d      	beq.n	8001840 <HAL_I2C_EV_IRQHandler+0x238>
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_I2C_EV_IRQHandler+0x238>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d103      	bne.n	8001840 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fed5 	bl	80025e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800183e:	e032      	b.n	80018a6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d02d      	beq.n	80018a6 <HAL_I2C_EV_IRQHandler+0x29e>
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001850:	2b00      	cmp	r3, #0
 8001852:	d028      	beq.n	80018a6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 ff04 	bl	8002662 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800185a:	e024      	b.n	80018a6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x27a>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x27a>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 ff11 	bl	80026a2 <I2C_SlaveReceive_RXNE>
 8001880:	e012      	b.n	80018a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00d      	beq.n	80018a8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 ff41 	bl	800271e <I2C_SlaveReceive_BTF>
 800189c:	e004      	b.n	80018a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800189e:	bf00      	nop
 80018a0:	e002      	b.n	80018a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018a2:	bf00      	nop
 80018a4:	e000      	b.n	80018a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b08a      	sub	sp, #40	@ 0x28
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <HAL_I2C_ER_IRQHandler+0x5a>
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d010      	beq.n	8001908 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80018f6:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001906:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00d      	beq.n	800192e <HAL_I2C_ER_IRQHandler+0x80>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800192c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d03e      	beq.n	80019b6 <HAL_I2C_ER_IRQHandler+0x108>
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d039      	beq.n	80019b6 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001942:	7efb      	ldrb	r3, [r7, #27]
 8001944:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001954:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800195c:	7ebb      	ldrb	r3, [r7, #26]
 800195e:	2b20      	cmp	r3, #32
 8001960:	d112      	bne.n	8001988 <HAL_I2C_ER_IRQHandler+0xda>
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10f      	bne.n	8001988 <HAL_I2C_ER_IRQHandler+0xda>
 8001968:	7cfb      	ldrb	r3, [r7, #19]
 800196a:	2b21      	cmp	r3, #33	@ 0x21
 800196c:	d008      	beq.n	8001980 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800196e:	7cfb      	ldrb	r3, [r7, #19]
 8001970:	2b29      	cmp	r3, #41	@ 0x29
 8001972:	d005      	beq.n	8001980 <HAL_I2C_ER_IRQHandler+0xd2>
 8001974:	7cfb      	ldrb	r3, [r7, #19]
 8001976:	2b28      	cmp	r3, #40	@ 0x28
 8001978:	d106      	bne.n	8001988 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b21      	cmp	r3, #33	@ 0x21
 800197e:	d103      	bne.n	8001988 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f001 f865 	bl	8002a50 <I2C_Slave_AF>
 8001986:	e016      	b.n	80019b6 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001990:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800199a:	7efb      	ldrb	r3, [r7, #27]
 800199c:	2b10      	cmp	r3, #16
 800199e:	d002      	beq.n	80019a6 <HAL_I2C_ER_IRQHandler+0xf8>
 80019a0:	7efb      	ldrb	r3, [r7, #27]
 80019a2:	2b40      	cmp	r3, #64	@ 0x40
 80019a4:	d107      	bne.n	80019b6 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019b4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00d      	beq.n	80019dc <HAL_I2C_ER_IRQHandler+0x12e>
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	f043 0308 	orr.w	r3, r3, #8
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80019da:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f001 f8a2 	bl	8002b38 <I2C_ITError>
  }
}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	@ 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
 8001a50:	4613      	mov	r3, r2
 8001a52:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ac6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ace:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d150      	bne.n	8001b80 <I2C_MasterTransmit_TXE+0xc8>
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b21      	cmp	r3, #33	@ 0x21
 8001ae2:	d14d      	bne.n	8001b80 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d01d      	beq.n	8001b26 <I2C_MasterTransmit_TXE+0x6e>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	d01a      	beq.n	8001b26 <I2C_MasterTransmit_TXE+0x6e>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001af6:	d016      	beq.n	8001b26 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b06:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2211      	movs	r2, #17
 8001b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff6c 	bl	80019fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b24:	e060      	b.n	8001be8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b34:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b44:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b40      	cmp	r3, #64	@ 0x40
 8001b5e:	d107      	bne.n	8001b70 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff81 	bl	8001a70 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b6e:	e03b      	b.n	8001be8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff3f 	bl	80019fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b7e:	e033      	b.n	8001be8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b21      	cmp	r3, #33	@ 0x21
 8001b84:	d005      	beq.n	8001b92 <I2C_MasterTransmit_TXE+0xda>
 8001b86:	7bbb      	ldrb	r3, [r7, #14]
 8001b88:	2b40      	cmp	r3, #64	@ 0x40
 8001b8a:	d12d      	bne.n	8001be8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b22      	cmp	r3, #34	@ 0x22
 8001b90:	d12a      	bne.n	8001be8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d108      	bne.n	8001bae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001baa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001bac:	e01c      	b.n	8001be8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b40      	cmp	r3, #64	@ 0x40
 8001bb8:	d103      	bne.n	8001bc2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f88e 	bl	8001cdc <I2C_MemoryTransmit_TXE_BTF>
}
 8001bc0:	e012      	b.n	8001be8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	781a      	ldrb	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001be6:	e7ff      	b.n	8001be8 <I2C_MasterTransmit_TXE+0x130>
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b21      	cmp	r3, #33	@ 0x21
 8001c08:	d164      	bne.n	8001cd4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d012      	beq.n	8001c3a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001c38:	e04c      	b.n	8001cd4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d01d      	beq.n	8001c7c <I2C_MasterTransmit_BTF+0x8c>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d01a      	beq.n	8001c7c <I2C_MasterTransmit_BTF+0x8c>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c4c:	d016      	beq.n	8001c7c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c5c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2211      	movs	r2, #17
 8001c62:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff fec1 	bl	80019fc <HAL_I2C_MasterTxCpltCallback>
}
 8001c7a:	e02b      	b.n	8001cd4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c8a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c9a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b40      	cmp	r3, #64	@ 0x40
 8001cb4:	d107      	bne.n	8001cc6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff fed6 	bl	8001a70 <HAL_I2C_MemTxCpltCallback>
}
 8001cc4:	e006      	b.n	8001cd4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fe94 	bl	80019fc <HAL_I2C_MasterTxCpltCallback>
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11d      	bne.n	8001d30 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10b      	bne.n	8001d14 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d0c:	1c9a      	adds	r2, r3, #2
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001d12:	e077      	b.n	8001e04 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	121b      	asrs	r3, r3, #8
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001d2e:	e069      	b.n	8001e04 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10b      	bne.n	8001d50 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001d4e:	e059      	b.n	8001e04 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d152      	bne.n	8001dfe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	2b22      	cmp	r3, #34	@ 0x22
 8001d5c:	d10d      	bne.n	8001d7a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d6c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001d78:	e044      	b.n	8001e04 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d015      	beq.n	8001db0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b21      	cmp	r3, #33	@ 0x21
 8001d88:	d112      	bne.n	8001db0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001dae:	e029      	b.n	8001e04 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d124      	bne.n	8001e04 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b21      	cmp	r3, #33	@ 0x21
 8001dbe:	d121      	bne.n	8001e04 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001dce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dde:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fe3a 	bl	8001a70 <HAL_I2C_MemTxCpltCallback>
}
 8001dfc:	e002      	b.n	8001e04 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff f884 	bl	8000f0c <I2C_Flush_DR>
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b22      	cmp	r3, #34	@ 0x22
 8001e1e:	f040 80ac 	bne.w	8001f7a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d921      	bls.n	8001e74 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	f040 808c 	bne.w	8001f7a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e70:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001e72:	e082      	b.n	8001f7a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d075      	beq.n	8001f68 <I2C_MasterReceive_RXNE+0x15c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d002      	beq.n	8001e88 <I2C_MasterReceive_RXNE+0x7c>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d16f      	bne.n	8001f68 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 fb29 	bl	80034e0 <I2C_WaitOnSTOPRequestThroughIT>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d142      	bne.n	8001f1a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ea2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001eb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691a      	ldr	r2, [r3, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b40      	cmp	r3, #64	@ 0x40
 8001eec:	d10a      	bne.n	8001f04 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fdc0 	bl	8001a82 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f02:	e03a      	b.n	8001f7a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2212      	movs	r2, #18
 8001f10:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fd7b 	bl	8001a0e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f18:	e02f      	b.n	8001f7a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fd97 	bl	8001a94 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001f66:	e008      	b.n	8001f7a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f76:	605a      	str	r2, [r3, #4]
}
 8001f78:	e7ff      	b.n	8001f7a <I2C_MasterReceive_RXNE+0x16e>
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d11b      	bne.n	8001fd2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fa8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001fd0:	e0bd      	b.n	800214e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d129      	bne.n	8002030 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d00a      	beq.n	8002008 <I2C_MasterReceive_BTF+0x86>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d007      	beq.n	8002008 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002006:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800202e:	e08e      	b.n	800214e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d176      	bne.n	8002128 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d002      	beq.n	8002046 <I2C_MasterReceive_BTF+0xc4>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b10      	cmp	r3, #16
 8002044:	d108      	bne.n	8002058 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e019      	b.n	800208c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d002      	beq.n	8002064 <I2C_MasterReceive_BTF+0xe2>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d108      	bne.n	8002076 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e00a      	b.n	800208c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2b10      	cmp	r3, #16
 800207a:	d007      	beq.n	800208c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800208a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80020e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b40      	cmp	r3, #64	@ 0x40
 80020fa:	d10a      	bne.n	8002112 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fcb9 	bl	8001a82 <HAL_I2C_MemRxCpltCallback>
}
 8002110:	e01d      	b.n	800214e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2212      	movs	r2, #18
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fc74 	bl	8001a0e <HAL_I2C_MasterRxCpltCallback>
}
 8002126:	e012      	b.n	800214e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b40      	cmp	r3, #64	@ 0x40
 8002168:	d117      	bne.n	800219a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002182:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002184:	e067      	b.n	8002256 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	611a      	str	r2, [r3, #16]
}
 8002198:	e05d      	b.n	8002256 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021a2:	d133      	bne.n	800220c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b21      	cmp	r3, #33	@ 0x21
 80021ae:	d109      	bne.n	80021c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021c0:	611a      	str	r2, [r3, #16]
 80021c2:	e008      	b.n	80021d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <I2C_Master_SB+0x92>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d032      	beq.n	8002256 <I2C_Master_SB+0x100>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d02d      	beq.n	8002256 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002208:	605a      	str	r2, [r3, #4]
}
 800220a:	e024      	b.n	8002256 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10e      	bne.n	8002232 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002218:	b29b      	uxth	r3, r3
 800221a:	11db      	asrs	r3, r3, #7
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0306 	and.w	r3, r3, #6
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f063 030f 	orn	r3, r3, #15
 8002228:	b2da      	uxtb	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	611a      	str	r2, [r3, #16]
}
 8002230:	e011      	b.n	8002256 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10d      	bne.n	8002256 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	b29b      	uxth	r3, r3
 8002240:	11db      	asrs	r3, r3, #7
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f003 0306 	and.w	r3, r3, #6
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f063 030e 	orn	r3, r3, #14
 800224e:	b2da      	uxtb	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	611a      	str	r2, [r3, #16]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	b2da      	uxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <I2C_Master_ADD10+0x26>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <I2C_Master_ADD10+0x48>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022a6:	605a      	str	r2, [r3, #4]
  }
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b091      	sub	sp, #68	@ 0x44
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b22      	cmp	r3, #34	@ 0x22
 80022da:	f040 8174 	bne.w	80025c6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <I2C_Master_ADDR+0x54>
 80022e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80022ea:	2b40      	cmp	r3, #64	@ 0x40
 80022ec:	d10b      	bne.n	8002306 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ee:	2300      	movs	r3, #0
 80022f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
 8002302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002304:	e16b      	b.n	80025de <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11d      	bne.n	800234a <I2C_Master_ADDR+0x98>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002316:	d118      	bne.n	800234a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800233c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	651a      	str	r2, [r3, #80]	@ 0x50
 8002348:	e149      	b.n	80025de <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d113      	bne.n	800237c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002368:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e120      	b.n	80025be <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	f040 808a 	bne.w	800249c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800238e:	d137      	bne.n	8002400 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800239e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023ae:	d113      	bne.n	80023d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	e0f2      	b.n	80025be <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	623b      	str	r3, [r7, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e0de      	b.n	80025be <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	2b08      	cmp	r3, #8
 8002404:	d02e      	beq.n	8002464 <I2C_Master_ADDR+0x1b2>
 8002406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002408:	2b20      	cmp	r3, #32
 800240a:	d02b      	beq.n	8002464 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800240c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240e:	2b12      	cmp	r3, #18
 8002410:	d102      	bne.n	8002418 <I2C_Master_ADDR+0x166>
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002414:	2b01      	cmp	r3, #1
 8002416:	d125      	bne.n	8002464 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00e      	beq.n	800243c <I2C_Master_ADDR+0x18a>
 800241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002420:	2b02      	cmp	r3, #2
 8002422:	d00b      	beq.n	800243c <I2C_Master_ADDR+0x18a>
 8002424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002426:	2b10      	cmp	r3, #16
 8002428:	d008      	beq.n	800243c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e007      	b.n	800244c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800244a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	61fb      	str	r3, [r7, #28]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	e0ac      	b.n	80025be <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002472:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e090      	b.n	80025be <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d158      	bne.n	8002558 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d021      	beq.n	80024f0 <I2C_Master_ADDR+0x23e>
 80024ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d01e      	beq.n	80024f0 <I2C_Master_ADDR+0x23e>
 80024b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d01b      	beq.n	80024f0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e012      	b.n	8002516 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002524:	d14b      	bne.n	80025be <I2C_Master_ADDR+0x30c>
 8002526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002528:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800252c:	d00b      	beq.n	8002546 <I2C_Master_ADDR+0x294>
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	2b01      	cmp	r3, #1
 8002532:	d008      	beq.n	8002546 <I2C_Master_ADDR+0x294>
 8002534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002536:	2b08      	cmp	r3, #8
 8002538:	d005      	beq.n	8002546 <I2C_Master_ADDR+0x294>
 800253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253c:	2b10      	cmp	r3, #16
 800253e:	d002      	beq.n	8002546 <I2C_Master_ADDR+0x294>
 8002540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002542:	2b20      	cmp	r3, #32
 8002544:	d13b      	bne.n	80025be <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	e032      	b.n	80025be <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002566:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002576:	d117      	bne.n	80025a8 <I2C_Master_ADDR+0x2f6>
 8002578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800257e:	d00b      	beq.n	8002598 <I2C_Master_ADDR+0x2e6>
 8002580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002582:	2b01      	cmp	r3, #1
 8002584:	d008      	beq.n	8002598 <I2C_Master_ADDR+0x2e6>
 8002586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002588:	2b08      	cmp	r3, #8
 800258a:	d005      	beq.n	8002598 <I2C_Master_ADDR+0x2e6>
 800258c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258e:	2b10      	cmp	r3, #16
 8002590:	d002      	beq.n	8002598 <I2C_Master_ADDR+0x2e6>
 8002592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002594:	2b20      	cmp	r3, #32
 8002596:	d107      	bne.n	80025a8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80025c4:	e00b      	b.n	80025de <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
}
 80025dc:	e7ff      	b.n	80025de <I2C_Master_ADDR+0x32c>
 80025de:	bf00      	nop
 80025e0:	3744      	adds	r7, #68	@ 0x44
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d02b      	beq.n	800265a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d114      	bne.n	800265a <I2C_SlaveTransmit_TXE+0x72>
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b29      	cmp	r3, #41	@ 0x29
 8002634:	d111      	bne.n	800265a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002644:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2221      	movs	r2, #33	@ 0x21
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2228      	movs	r2, #40	@ 0x28
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff f9e3 	bl	8001a20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d011      	beq.n	8002698 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02c      	beq.n	8002716 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d114      	bne.n	8002716 <I2C_SlaveReceive_RXNE+0x74>
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80026f0:	d111      	bne.n	8002716 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002700:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2222      	movs	r2, #34	@ 0x22
 8002706:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2228      	movs	r2, #40	@ 0x28
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff f98e 	bl	8001a32 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d012      	beq.n	8002756 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800277a:	2b28      	cmp	r3, #40	@ 0x28
 800277c:	d125      	bne.n	80027ca <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	81bb      	strh	r3, [r7, #12]
 80027ac:	e002      	b.n	80027b4 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80027bc:	89ba      	ldrh	r2, [r7, #12]
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff f93e 	bl	8001a44 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027c8:	e00e      	b.n	80027e8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027fe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800280e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800283c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800284c:	d172      	bne.n	8002934 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b22      	cmp	r3, #34	@ 0x22
 8002852:	d002      	beq.n	800285a <I2C_Slave_STOPF+0x6a>
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b2a      	cmp	r3, #42	@ 0x2a
 8002858:	d135      	bne.n	80028c6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	b29a      	uxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800288c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe f854 	bl	8000940 <HAL_DMA_GetState>
 8002898:	4603      	mov	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	d049      	beq.n	8002932 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	4a69      	ldr	r2, [pc, #420]	@ (8002a48 <I2C_Slave_STOPF+0x258>)
 80028a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd ffd0 	bl	8000850 <HAL_DMA_Abort_IT>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d03d      	beq.n	8002932 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028c0:	4610      	mov	r0, r2
 80028c2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028c4:	e035      	b.n	8002932 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f81e 	bl	8000940 <HAL_DMA_GetState>
 8002904:	4603      	mov	r3, r0
 8002906:	2b01      	cmp	r3, #1
 8002908:	d014      	beq.n	8002934 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290e:	4a4e      	ldr	r2, [pc, #312]	@ (8002a48 <I2C_Slave_STOPF+0x258>)
 8002910:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd ff9a 	bl	8000850 <HAL_DMA_Abort_IT>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d008      	beq.n	8002934 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800292c:	4610      	mov	r0, r2
 800292e:	4798      	blx	r3
 8002930:	e000      	b.n	8002934 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002932:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d03e      	beq.n	80029bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b04      	cmp	r3, #4
 800294a:	d112      	bne.n	8002972 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297c:	2b40      	cmp	r3, #64	@ 0x40
 800297e:	d112      	bne.n	80029a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f043 0204 	orr.w	r2, r3, #4
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f8b7 	bl	8002b38 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80029ca:	e039      	b.n	8002a40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80029d0:	d109      	bne.n	80029e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2228      	movs	r2, #40	@ 0x28
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff f826 	bl	8001a32 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b28      	cmp	r3, #40	@ 0x28
 80029f0:	d111      	bne.n	8002a16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a15      	ldr	r2, [pc, #84]	@ (8002a4c <I2C_Slave_STOPF+0x25c>)
 80029f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff f825 	bl	8001a5e <HAL_I2C_ListenCpltCallback>
}
 8002a14:	e014      	b.n	8002a40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	2b22      	cmp	r3, #34	@ 0x22
 8002a1c:	d002      	beq.n	8002a24 <I2C_Slave_STOPF+0x234>
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b22      	cmp	r3, #34	@ 0x22
 8002a22:	d10d      	bne.n	8002a40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fff9 	bl	8001a32 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	0800303d 	.word	0x0800303d
 8002a4c:	ffff0000 	.word	0xffff0000

08002a50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d002      	beq.n	8002a72 <I2C_Slave_AF+0x22>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d129      	bne.n	8002ac6 <I2C_Slave_AF+0x76>
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b28      	cmp	r3, #40	@ 0x28
 8002a76:	d126      	bne.n	8002ac6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8002b34 <I2C_Slave_AF+0xe4>)
 8002a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe ffcd 	bl	8001a5e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002ac4:	e031      	b.n	8002b2a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b21      	cmp	r3, #33	@ 0x21
 8002aca:	d129      	bne.n	8002b20 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <I2C_Slave_AF+0xe4>)
 8002ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2221      	movs	r2, #33	@ 0x21
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002af6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b10:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe f9fa 	bl	8000f0c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7fe ff81 	bl	8001a20 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b1e:	e004      	b.n	8002b2a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b28:	615a      	str	r2, [r3, #20]
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	ffff0000 	.word	0xffff0000

08002b38 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b50:	7bbb      	ldrb	r3, [r7, #14]
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d002      	beq.n	8002b5c <I2C_ITError+0x24>
 8002b56:	7bbb      	ldrb	r3, [r7, #14]
 8002b58:	2b40      	cmp	r3, #64	@ 0x40
 8002b5a:	d10a      	bne.n	8002b72 <I2C_ITError+0x3a>
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b22      	cmp	r3, #34	@ 0x22
 8002b60:	d107      	bne.n	8002b72 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b70:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b78:	2b28      	cmp	r3, #40	@ 0x28
 8002b7a:	d107      	bne.n	8002b8c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2228      	movs	r2, #40	@ 0x28
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b8a:	e015      	b.n	8002bb8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b9a:	d00a      	beq.n	8002bb2 <I2C_ITError+0x7a>
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b60      	cmp	r3, #96	@ 0x60
 8002ba0:	d007      	beq.n	8002bb2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bc6:	d162      	bne.n	8002c8e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bd6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bdc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d020      	beq.n	8002c28 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bea:	4a6a      	ldr	r2, [pc, #424]	@ (8002d94 <I2C_ITError+0x25c>)
 8002bec:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fe2c 	bl	8000850 <HAL_DMA_Abort_IT>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8089 	beq.w	8002d12 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c22:	4610      	mov	r0, r2
 8002c24:	4798      	blx	r3
 8002c26:	e074      	b.n	8002d12 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2c:	4a59      	ldr	r2, [pc, #356]	@ (8002d94 <I2C_ITError+0x25c>)
 8002c2e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fe0b 	bl	8000850 <HAL_DMA_Abort_IT>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d068      	beq.n	8002d12 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4a:	2b40      	cmp	r3, #64	@ 0x40
 8002c4c:	d10b      	bne.n	8002c66 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4798      	blx	r3
 8002c8c:	e041      	b.n	8002d12 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b60      	cmp	r3, #96	@ 0x60
 8002c98:	d125      	bne.n	8002ce6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b40      	cmp	r3, #64	@ 0x40
 8002cb4:	d10b      	bne.n	8002cce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fe fee1 	bl	8001aa6 <HAL_I2C_AbortCpltCallback>
 8002ce4:	e015      	b.n	8002d12 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b40      	cmp	r3, #64	@ 0x40
 8002cf2:	d10b      	bne.n	8002d0c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7fe fec1 	bl	8001a94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10e      	bne.n	8002d40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d104      	bne.n	8002d40 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d007      	beq.n	8002d50 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d4e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d56:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d113      	bne.n	8002d8c <I2C_ITError+0x254>
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b28      	cmp	r3, #40	@ 0x28
 8002d68:	d110      	bne.n	8002d8c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d98 <I2C_ITError+0x260>)
 8002d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fe69 	bl	8001a5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	0800303d 	.word	0x0800303d
 8002d98:	ffff0000 	.word	0xffff0000

08002d9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	460b      	mov	r3, r1
 8002daa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d006      	beq.n	8002dc6 <I2C_MasterRequestWrite+0x2a>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d003      	beq.n	8002dc6 <I2C_MasterRequestWrite+0x2a>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dc4:	d108      	bne.n	8002dd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e00b      	b.n	8002df0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ddc:	2b12      	cmp	r3, #18
 8002dde:	d107      	bne.n	8002df0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f9c5 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e16:	d103      	bne.n	8002e20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e035      	b.n	8002e90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e2c:	d108      	bne.n	8002e40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e2e:	897b      	ldrh	r3, [r7, #10]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	e01b      	b.n	8002e78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e40:	897b      	ldrh	r3, [r7, #10]
 8002e42:	11db      	asrs	r3, r3, #7
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f003 0306 	and.w	r3, r3, #6
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f063 030f 	orn	r3, r3, #15
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	490e      	ldr	r1, [pc, #56]	@ (8002e98 <I2C_MasterRequestWrite+0xfc>)
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fa0e 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e010      	b.n	8002e90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e6e:	897b      	ldrh	r3, [r7, #10]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4907      	ldr	r1, [pc, #28]	@ (8002e9c <I2C_MasterRequestWrite+0x100>)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f9fe 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	00010008 	.word	0x00010008
 8002e9c:	00010002 	.word	0x00010002

08002ea0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	460b      	mov	r3, r1
 8002eae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d006      	beq.n	8002eda <I2C_MasterRequestRead+0x3a>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d003      	beq.n	8002eda <I2C_MasterRequestRead+0x3a>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ed8:	d108      	bne.n	8002eec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e00b      	b.n	8002f04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	2b11      	cmp	r3, #17
 8002ef2:	d107      	bne.n	8002f04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f93b 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2a:	d103      	bne.n	8002f34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e079      	b.n	800302c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f40:	d108      	bne.n	8002f54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f42:	897b      	ldrh	r3, [r7, #10]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]
 8002f52:	e05f      	b.n	8003014 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f54:	897b      	ldrh	r3, [r7, #10]
 8002f56:	11db      	asrs	r3, r3, #7
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 0306 	and.w	r3, r3, #6
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f063 030f 	orn	r3, r3, #15
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4930      	ldr	r1, [pc, #192]	@ (8003034 <I2C_MasterRequestRead+0x194>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f984 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e054      	b.n	800302c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f82:	897b      	ldrh	r3, [r7, #10]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4929      	ldr	r1, [pc, #164]	@ (8003038 <I2C_MasterRequestRead+0x198>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f974 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e044      	b.n	800302c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f8d9 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fee:	d103      	bne.n	8002ff8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e017      	b.n	800302c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ffc:	897b      	ldrh	r3, [r7, #10]
 8002ffe:	11db      	asrs	r3, r3, #7
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0306 	and.w	r3, r3, #6
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f063 030e 	orn	r3, r3, #14
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4907      	ldr	r1, [pc, #28]	@ (8003038 <I2C_MasterRequestRead+0x198>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f930 	bl	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010008 	.word	0x00010008
 8003038:	00010002 	.word	0x00010002

0800303c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003054:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003056:	4b4b      	ldr	r3, [pc, #300]	@ (8003184 <I2C_DMAAbort+0x148>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	08db      	lsrs	r3, r3, #3
 800305c:	4a4a      	ldr	r2, [pc, #296]	@ (8003188 <I2C_DMAAbort+0x14c>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0a1a      	lsrs	r2, r3, #8
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00da      	lsls	r2, r3, #3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003082:	e00a      	b.n	800309a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3b01      	subs	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003098:	d0ea      	beq.n	8003070 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a6:	2200      	movs	r2, #0
 80030a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	2200      	movs	r2, #0
 80030b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030dc:	2200      	movs	r2, #0
 80030de:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b60      	cmp	r3, #96	@ 0x60
 800310a:	d10e      	bne.n	800312a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7fe fcbf 	bl	8001aa6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003128:	e027      	b.n	800317a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003130:	2b28      	cmp	r3, #40	@ 0x28
 8003132:	d117      	bne.n	8003164 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003152:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2228      	movs	r2, #40	@ 0x28
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003162:	e007      	b.n	8003174 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7fe fc8d 	bl	8001a94 <HAL_I2C_ErrorCallback>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000004 	.word	0x20000004
 8003188:	14f8b589 	.word	0x14f8b589

0800318c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319c:	e048      	b.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d044      	beq.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fd fa17 	bl	80005d8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d139      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10d      	bne.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	43da      	mvns	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	e00c      	b.n	80031fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d116      	bne.n	8003230 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e023      	b.n	8003278 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	0c1b      	lsrs	r3, r3, #16
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10d      	bne.n	8003256 <I2C_WaitOnFlagUntilTimeout+0xca>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	43da      	mvns	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	e00c      	b.n	8003270 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	429a      	cmp	r2, r3
 8003274:	d093      	beq.n	800319e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328e:	e071      	b.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329e:	d123      	bne.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f043 0204 	orr.w	r2, r3, #4
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e067      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d041      	beq.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7fd f972 	bl	80005d8 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d136      	bne.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10c      	bne.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	e00b      	b.n	8003342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e021      	b.n	80033b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	0c1b      	lsrs	r3, r3, #16
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10c      	bne.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	43da      	mvns	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4013      	ands	r3, r2
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf14      	ite	ne
 8003390:	2301      	movne	r3, #1
 8003392:	2300      	moveq	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e00b      	b.n	80033b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf14      	ite	ne
 80033aa:	2301      	movne	r3, #1
 80033ac:	2300      	moveq	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f af6d 	bne.w	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033cc:	e034      	b.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f915 	bl	80035fe <I2C_IsAcknowledgeFailed>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e034      	b.n	8003448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e4:	d028      	beq.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7fd f8f7 	bl	80005d8 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d302      	bcc.n	80033fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11d      	bne.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b80      	cmp	r3, #128	@ 0x80
 8003408:	d016      	beq.n	8003438 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e007      	b.n	8003448 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d1c3      	bne.n	80033ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800345c:	e034      	b.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f8cd 	bl	80035fe <I2C_IsAcknowledgeFailed>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e034      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d028      	beq.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fd f8af 	bl	80005d8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11d      	bne.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d016      	beq.n	80034c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	f043 0220 	orr.w	r2, r3, #32
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e007      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d1c3      	bne.n	800345e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80034ec:	4b13      	ldr	r3, [pc, #76]	@ (800353c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	08db      	lsrs	r3, r3, #3
 80034f2:	4a13      	ldr	r2, [pc, #76]	@ (8003540 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	0a1a      	lsrs	r2, r3, #8
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3b01      	subs	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e008      	b.n	8003530 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352c:	d0e9      	beq.n	8003502 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000004 	.word	0x20000004
 8003540:	14f8b589 	.word	0x14f8b589

08003544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003550:	e049      	b.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b10      	cmp	r3, #16
 800355e:	d119      	bne.n	8003594 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0210 	mvn.w	r2, #16
 8003568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e030      	b.n	80035f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003594:	f7fd f820 	bl	80005d8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d302      	bcc.n	80035aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11d      	bne.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b40      	cmp	r3, #64	@ 0x40
 80035b6:	d016      	beq.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e007      	b.n	80035f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b40      	cmp	r3, #64	@ 0x40
 80035f2:	d1ae      	bne.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003614:	d11b      	bne.n	800364e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800361e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	f043 0204 	orr.w	r2, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800366a:	d103      	bne.n	8003674 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003672:	e007      	b.n	8003684 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800367c:	d102      	bne.n	8003684 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2208      	movs	r2, #8
 8003682:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
	...

08003690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e272      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8087 	beq.w	80037be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b0:	4b92      	ldr	r3, [pc, #584]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d00c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036bc:	4b8f      	ldr	r3, [pc, #572]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d112      	bne.n	80036ee <HAL_RCC_OscConfig+0x5e>
 80036c8:	4b8c      	ldr	r3, [pc, #560]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d4:	d10b      	bne.n	80036ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d6:	4b89      	ldr	r3, [pc, #548]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d06c      	beq.n	80037bc <HAL_RCC_OscConfig+0x12c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d168      	bne.n	80037bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e24c      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_OscConfig+0x76>
 80036f8:	4b80      	ldr	r3, [pc, #512]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a7f      	ldr	r2, [pc, #508]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80036fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e02e      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x98>
 800370e:	4b7b      	ldr	r3, [pc, #492]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7a      	ldr	r2, [pc, #488]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b78      	ldr	r3, [pc, #480]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a77      	ldr	r2, [pc, #476]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003720:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e01d      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0xbc>
 8003732:	4b72      	ldr	r3, [pc, #456]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a71      	ldr	r2, [pc, #452]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b6f      	ldr	r3, [pc, #444]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6e      	ldr	r2, [pc, #440]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e00b      	b.n	8003764 <HAL_RCC_OscConfig+0xd4>
 800374c:	4b6b      	ldr	r3, [pc, #428]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a6a      	ldr	r2, [pc, #424]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b68      	ldr	r3, [pc, #416]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a67      	ldr	r2, [pc, #412]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 800375e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fc ff34 	bl	80005d8 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fc ff30 	bl	80005d8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e200      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003786:	4b5d      	ldr	r3, [pc, #372]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0xe4>
 8003792:	e014      	b.n	80037be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fc ff20 	bl	80005d8 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fc ff1c 	bl	80005d8 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e1ec      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	4b53      	ldr	r3, [pc, #332]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x10c>
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d063      	beq.n	8003892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ca:	4b4c      	ldr	r3, [pc, #304]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037d6:	4b49      	ldr	r3, [pc, #292]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d11c      	bne.n	800381c <HAL_RCC_OscConfig+0x18c>
 80037e2:	4b46      	ldr	r3, [pc, #280]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d116      	bne.n	800381c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ee:	4b43      	ldr	r3, [pc, #268]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_RCC_OscConfig+0x176>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e1c0      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b3d      	ldr	r3, [pc, #244]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4939      	ldr	r1, [pc, #228]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	e03a      	b.n	8003892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003824:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <HAL_RCC_OscConfig+0x270>)
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fc fed5 	bl	80005d8 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003832:	f7fc fed1 	bl	80005d8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e1a1      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003844:	4b2d      	ldr	r3, [pc, #180]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b2a      	ldr	r3, [pc, #168]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4927      	ldr	r1, [pc, #156]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003860:	4313      	orrs	r3, r2
 8003862:	600b      	str	r3, [r1, #0]
 8003864:	e015      	b.n	8003892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003866:	4b26      	ldr	r3, [pc, #152]	@ (8003900 <HAL_RCC_OscConfig+0x270>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fc feb4 	bl	80005d8 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003874:	f7fc feb0 	bl	80005d8 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e180      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003886:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03a      	beq.n	8003914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d019      	beq.n	80038da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038a6:	4b17      	ldr	r3, [pc, #92]	@ (8003904 <HAL_RCC_OscConfig+0x274>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ac:	f7fc fe94 	bl	80005d8 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b4:	f7fc fe90 	bl	80005d8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e160      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c6:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <HAL_RCC_OscConfig+0x26c>)
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038d2:	2001      	movs	r0, #1
 80038d4:	f000 faba 	bl	8003e4c <RCC_Delay>
 80038d8:	e01c      	b.n	8003914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038da:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <HAL_RCC_OscConfig+0x274>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e0:	f7fc fe7a 	bl	80005d8 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e6:	e00f      	b.n	8003908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fc fe76 	bl	80005d8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d908      	bls.n	8003908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e146      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	42420000 	.word	0x42420000
 8003904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003908:	4b92      	ldr	r3, [pc, #584]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e9      	bne.n	80038e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80a6 	beq.w	8003a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003926:	4b8b      	ldr	r3, [pc, #556]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	4b88      	ldr	r3, [pc, #544]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a87      	ldr	r2, [pc, #540]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]
 800393e:	4b85      	ldr	r3, [pc, #532]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394a:	2301      	movs	r3, #1
 800394c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394e:	4b82      	ldr	r3, [pc, #520]	@ (8003b58 <HAL_RCC_OscConfig+0x4c8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003956:	2b00      	cmp	r3, #0
 8003958:	d118      	bne.n	800398c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b58 <HAL_RCC_OscConfig+0x4c8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b58 <HAL_RCC_OscConfig+0x4c8>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003966:	f7fc fe37 	bl	80005d8 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fc fe33 	bl	80005d8 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	@ 0x64
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e103      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	4b75      	ldr	r3, [pc, #468]	@ (8003b58 <HAL_RCC_OscConfig+0x4c8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <HAL_RCC_OscConfig+0x312>
 8003994:	4b6f      	ldr	r3, [pc, #444]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4a6e      	ldr	r2, [pc, #440]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	6213      	str	r3, [r2, #32]
 80039a0:	e02d      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x334>
 80039aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a69      	ldr	r2, [pc, #420]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	f023 0301 	bic.w	r3, r3, #1
 80039b4:	6213      	str	r3, [r2, #32]
 80039b6:	4b67      	ldr	r3, [pc, #412]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a66      	ldr	r2, [pc, #408]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	f023 0304 	bic.w	r3, r3, #4
 80039c0:	6213      	str	r3, [r2, #32]
 80039c2:	e01c      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b05      	cmp	r3, #5
 80039ca:	d10c      	bne.n	80039e6 <HAL_RCC_OscConfig+0x356>
 80039cc:	4b61      	ldr	r3, [pc, #388]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a60      	ldr	r2, [pc, #384]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	f043 0304 	orr.w	r3, r3, #4
 80039d6:	6213      	str	r3, [r2, #32]
 80039d8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	e00b      	b.n	80039fe <HAL_RCC_OscConfig+0x36e>
 80039e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a5a      	ldr	r2, [pc, #360]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b58      	ldr	r3, [pc, #352]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a57      	ldr	r2, [pc, #348]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d015      	beq.n	8003a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a06:	f7fc fde7 	bl	80005d8 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fc fde3 	bl	80005d8 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0b1      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a24:	4b4b      	ldr	r3, [pc, #300]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0ee      	beq.n	8003a0e <HAL_RCC_OscConfig+0x37e>
 8003a30:	e014      	b.n	8003a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fc fdd1 	bl	80005d8 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fc fdcd 	bl	80005d8 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e09b      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a50:	4b40      	ldr	r3, [pc, #256]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a62:	4b3c      	ldr	r3, [pc, #240]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4a3b      	ldr	r2, [pc, #236]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8087 	beq.w	8003b86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a78:	4b36      	ldr	r3, [pc, #216]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d061      	beq.n	8003b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d146      	bne.n	8003b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8c:	4b33      	ldr	r3, [pc, #204]	@ (8003b5c <HAL_RCC_OscConfig+0x4cc>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fc fda1 	bl	80005d8 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fc fd9d 	bl	80005d8 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e06d      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aac:	4b29      	ldr	r3, [pc, #164]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ac0:	d108      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ac2:	4b24      	ldr	r3, [pc, #144]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	4921      	ldr	r1, [pc, #132]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a19      	ldr	r1, [r3, #32]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	491b      	ldr	r1, [pc, #108]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <HAL_RCC_OscConfig+0x4cc>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fc fd71 	bl	80005d8 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fc fd6d 	bl	80005d8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e03d      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x46a>
 8003b18:	e035      	b.n	8003b86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b10      	ldr	r3, [pc, #64]	@ (8003b5c <HAL_RCC_OscConfig+0x4cc>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fc fd5a 	bl	80005d8 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fc fd56 	bl	80005d8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e026      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x498>
 8003b46:	e01e      	b.n	8003b86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e019      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <HAL_RCC_OscConfig+0x500>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d001      	beq.n	8003b86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0d0      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d910      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b67      	ldr	r3, [pc, #412]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 0207 	bic.w	r2, r3, #7
 8003bbe:	4965      	ldr	r1, [pc, #404]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b63      	ldr	r3, [pc, #396]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0b8      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf0:	4b59      	ldr	r3, [pc, #356]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a58      	ldr	r2, [pc, #352]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bfa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c08:	4b53      	ldr	r3, [pc, #332]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c14:	4b50      	ldr	r3, [pc, #320]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	494d      	ldr	r1, [pc, #308]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d040      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d115      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e07f      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b41      	ldr	r3, [pc, #260]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e073      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3d      	ldr	r3, [pc, #244]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e06b      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b39      	ldr	r3, [pc, #228]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4936      	ldr	r1, [pc, #216]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7fc fca8 	bl	80005d8 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7fc fca4 	bl	80005d8 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e053      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d210      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4922      	ldr	r1, [pc, #136]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e032      	b.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4916      	ldr	r1, [pc, #88]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d0e:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	490e      	ldr	r1, [pc, #56]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d22:	f000 f821 	bl	8003d68 <HAL_RCC_GetSysClockFreq>
 8003d26:	4602      	mov	r2, r0
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	490a      	ldr	r1, [pc, #40]	@ (8003d5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d34:	5ccb      	ldrb	r3, [r1, r3]
 8003d36:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3a:	4a09      	ldr	r2, [pc, #36]	@ (8003d60 <HAL_RCC_ClockConfig+0x1cc>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d3e:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_ClockConfig+0x1d0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fc fc06 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	08004844 	.word	0x08004844
 8003d60:	20000004 	.word	0x20000004
 8003d64:	20000008 	.word	0x20000008

08003d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d82:	4b1e      	ldr	r3, [pc, #120]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d002      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x30>
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x36>
 8003d96:	e027      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d98:	4b19      	ldr	r3, [pc, #100]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d9a:	613b      	str	r3, [r7, #16]
      break;
 8003d9c:	e027      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	0c9b      	lsrs	r3, r3, #18
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	4a17      	ldr	r2, [pc, #92]	@ (8003e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003da8:	5cd3      	ldrb	r3, [r2, r3]
 8003daa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d010      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003db6:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	0c5b      	lsrs	r3, r3, #17
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dc2:	5cd3      	ldrb	r3, [r2, r3]
 8003dc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dca:	fb03 f202 	mul.w	r2, r3, r2
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e004      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0c      	ldr	r2, [pc, #48]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	613b      	str	r3, [r7, #16]
      break;
 8003de6:	e002      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de8:	4b05      	ldr	r3, [pc, #20]	@ (8003e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dea:	613b      	str	r3, [r7, #16]
      break;
 8003dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dee:	693b      	ldr	r3, [r7, #16]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	007a1200 	.word	0x007a1200
 8003e04:	0800485c 	.word	0x0800485c
 8003e08:	0800486c 	.word	0x0800486c
 8003e0c:	003d0900 	.word	0x003d0900

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e14:	4b02      	ldr	r3, [pc, #8]	@ (8003e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	20000004 	.word	0x20000004

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e28:	f7ff fff2 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4903      	ldr	r1, [pc, #12]	@ (8003e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000
 8003e48:	08004854 	.word	0x08004854

08003e4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e54:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <RCC_Delay+0x34>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0a      	ldr	r2, [pc, #40]	@ (8003e84 <RCC_Delay+0x38>)
 8003e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5e:	0a5b      	lsrs	r3, r3, #9
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e68:	bf00      	nop
  }
  while (Delay --);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	60fa      	str	r2, [r7, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f9      	bne.n	8003e68 <RCC_Delay+0x1c>
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	20000004 	.word	0x20000004
 8003e84:	10624dd3 	.word	0x10624dd3

08003e88 <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460a      	mov	r2, r1
 8003e92:	71fb      	strb	r3, [r7, #7]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71bb      	strb	r3, [r7, #6]
    if(Data & 1)
 8003e98:	79bb      	ldrb	r3, [r7, #6]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d014      	beq.n	8003ecc <LCD16X2_DATA+0x44>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003ea6:	2134      	movs	r1, #52	@ 0x34
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	3304      	adds	r3, #4
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4a56      	ldr	r2, [pc, #344]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003eb6:	2134      	movs	r1, #52	@ 0x34
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fc fec5 	bl	8000c54 <HAL_GPIO_WritePin>
 8003eca:	e013      	b.n	8003ef4 <LCD16X2_DATA+0x6c>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	4a50      	ldr	r2, [pc, #320]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003ed0:	2134      	movs	r1, #52	@ 0x34
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3304      	adds	r3, #4
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	4a4c      	ldr	r2, [pc, #304]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003ee0:	2134      	movs	r1, #52	@ 0x34
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3308      	adds	r3, #8
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	2200      	movs	r2, #0
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f7fc feb0 	bl	8000c54 <HAL_GPIO_WritePin>
    if(Data & 2)
 8003ef4:	79bb      	ldrb	r3, [r7, #6]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d014      	beq.n	8003f28 <LCD16X2_DATA+0xa0>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	4a43      	ldr	r2, [pc, #268]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003f02:	2134      	movs	r1, #52	@ 0x34
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	4a3f      	ldr	r2, [pc, #252]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003f12:	2134      	movs	r1, #52	@ 0x34
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3310      	adds	r3, #16
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	4619      	mov	r1, r3
 8003f22:	f7fc fe97 	bl	8000c54 <HAL_GPIO_WritePin>
 8003f26:	e013      	b.n	8003f50 <LCD16X2_DATA+0xc8>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	4a39      	ldr	r2, [pc, #228]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003f2c:	2134      	movs	r1, #52	@ 0x34
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	330c      	adds	r3, #12
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	4a35      	ldr	r2, [pc, #212]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003f3c:	2134      	movs	r1, #52	@ 0x34
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	3310      	adds	r3, #16
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f7fc fe82 	bl	8000c54 <HAL_GPIO_WritePin>
    if(Data & 4)
 8003f50:	79bb      	ldrb	r3, [r7, #6]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d014      	beq.n	8003f84 <LCD16X2_DATA+0xfc>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003f5e:	2134      	movs	r1, #52	@ 0x34
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	3314      	adds	r3, #20
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003f6e:	2134      	movs	r1, #52	@ 0x34
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3318      	adds	r3, #24
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7fc fe69 	bl	8000c54 <HAL_GPIO_WritePin>
 8003f82:	e013      	b.n	8003fac <LCD16X2_DATA+0x124>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	4a22      	ldr	r2, [pc, #136]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003f88:	2134      	movs	r1, #52	@ 0x34
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	3314      	adds	r3, #20
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003f98:	2134      	movs	r1, #52	@ 0x34
 8003f9a:	fb01 f303 	mul.w	r3, r1, r3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3318      	adds	r3, #24
 8003fa2:	881b      	ldrh	r3, [r3, #0]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f7fc fe54 	bl	8000c54 <HAL_GPIO_WritePin>
    if(Data & 8)
 8003fac:	79bb      	ldrb	r3, [r7, #6]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d014      	beq.n	8003fe0 <LCD16X2_DATA+0x158>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	4a15      	ldr	r2, [pc, #84]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003fba:	2134      	movs	r1, #52	@ 0x34
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	331c      	adds	r3, #28
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	4a11      	ldr	r2, [pc, #68]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003fca:	2134      	movs	r1, #52	@ 0x34
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3320      	adds	r3, #32
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	4619      	mov	r1, r3
 8003fda:	f7fc fe3b 	bl	8000c54 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 8003fde:	e013      	b.n	8004008 <LCD16X2_DATA+0x180>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003fe4:	2134      	movs	r1, #52	@ 0x34
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	331c      	adds	r3, #28
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	4a07      	ldr	r2, [pc, #28]	@ (8004010 <LCD16X2_DATA+0x188>)
 8003ff4:	2134      	movs	r1, #52	@ 0x34
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3320      	adds	r3, #32
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	4619      	mov	r1, r3
 8004004:	f7fc fe26 	bl	8000c54 <HAL_GPIO_WritePin>
}
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	08004870 	.word	0x08004870

08004014 <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	460a      	mov	r2, r1
 800401e:	71fb      	strb	r3, [r7, #7]
 8004020:	4613      	mov	r3, r2
 8004022:	71bb      	strb	r3, [r7, #6]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	4a57      	ldr	r2, [pc, #348]	@ (8004184 <LCD16X2_CMD+0x170>)
 8004028:	2134      	movs	r1, #52	@ 0x34
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	332c      	adds	r3, #44	@ 0x2c
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	4a53      	ldr	r2, [pc, #332]	@ (8004184 <LCD16X2_CMD+0x170>)
 8004038:	2134      	movs	r1, #52	@ 0x34
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	4413      	add	r3, r2
 8004040:	3330      	adds	r3, #48	@ 0x30
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	2200      	movs	r2, #0
 8004046:	4619      	mov	r1, r3
 8004048:	f7fc fe04 	bl	8000c54 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 800404c:	79ba      	ldrb	r2, [r7, #6]
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff18 	bl	8003e88 <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	4a4a      	ldr	r2, [pc, #296]	@ (8004184 <LCD16X2_CMD+0x170>)
 800405c:	2134      	movs	r1, #52	@ 0x34
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	4413      	add	r3, r2
 8004064:	3324      	adds	r3, #36	@ 0x24
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	4a46      	ldr	r2, [pc, #280]	@ (8004184 <LCD16X2_CMD+0x170>)
 800406c:	2134      	movs	r1, #52	@ 0x34
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3328      	adds	r3, #40	@ 0x28
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	2200      	movs	r2, #0
 800407a:	4619      	mov	r1, r3
 800407c:	f7fc fdea 	bl	8000c54 <HAL_GPIO_WritePin>
    DELAY_US(5);
 8004080:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <LCD16X2_CMD+0x174>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	61fb      	str	r3, [r7, #28]
 8004086:	4b41      	ldr	r3, [pc, #260]	@ (800418c <LCD16X2_CMD+0x178>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a41      	ldr	r2, [pc, #260]	@ (8004190 <LCD16X2_CMD+0x17c>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	0c9a      	lsrs	r2, r3, #18
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	441a      	add	r2, r3
 8004098:	4b3c      	ldr	r3, [pc, #240]	@ (800418c <LCD16X2_CMD+0x178>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	493c      	ldr	r1, [pc, #240]	@ (8004190 <LCD16X2_CMD+0x17c>)
 800409e:	fba1 1303 	umull	r1, r3, r1, r3
 80040a2:	0c9b      	lsrs	r3, r3, #18
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	4b37      	ldr	r3, [pc, #220]	@ (8004188 <LCD16X2_CMD+0x174>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d8f8      	bhi.n	80040aa <LCD16X2_CMD+0x96>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <LCD16X2_CMD+0x170>)
 80040bc:	2134      	movs	r1, #52	@ 0x34
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3324      	adds	r3, #36	@ 0x24
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004184 <LCD16X2_CMD+0x170>)
 80040cc:	2134      	movs	r1, #52	@ 0x34
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3328      	adds	r3, #40	@ 0x28
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	4619      	mov	r1, r3
 80040dc:	f7fc fdba 	bl	8000c54 <HAL_GPIO_WritePin>
    DELAY_US(5);
 80040e0:	4b29      	ldr	r3, [pc, #164]	@ (8004188 <LCD16X2_CMD+0x174>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	4b29      	ldr	r3, [pc, #164]	@ (800418c <LCD16X2_CMD+0x178>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a29      	ldr	r2, [pc, #164]	@ (8004190 <LCD16X2_CMD+0x17c>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	0c9a      	lsrs	r2, r3, #18
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	4b24      	ldr	r3, [pc, #144]	@ (800418c <LCD16X2_CMD+0x178>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4924      	ldr	r1, [pc, #144]	@ (8004190 <LCD16X2_CMD+0x17c>)
 80040fe:	fba1 1303 	umull	r1, r3, r1, r3
 8004102:	0c9b      	lsrs	r3, r3, #18
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	4b1f      	ldr	r3, [pc, #124]	@ (8004188 <LCD16X2_CMD+0x174>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d8f8      	bhi.n	800410a <LCD16X2_CMD+0xf6>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	4a1a      	ldr	r2, [pc, #104]	@ (8004184 <LCD16X2_CMD+0x170>)
 800411c:	2134      	movs	r1, #52	@ 0x34
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3324      	adds	r3, #36	@ 0x24
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	4a16      	ldr	r2, [pc, #88]	@ (8004184 <LCD16X2_CMD+0x170>)
 800412c:	2134      	movs	r1, #52	@ 0x34
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3328      	adds	r3, #40	@ 0x28
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	4619      	mov	r1, r3
 800413c:	f7fc fd8a 	bl	8000c54 <HAL_GPIO_WritePin>
    DELAY_US(100);
 8004140:	4b11      	ldr	r3, [pc, #68]	@ (8004188 <LCD16X2_CMD+0x174>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	4b11      	ldr	r3, [pc, #68]	@ (800418c <LCD16X2_CMD+0x178>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a11      	ldr	r2, [pc, #68]	@ (8004190 <LCD16X2_CMD+0x17c>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	0c9b      	lsrs	r3, r3, #18
 8004152:	2264      	movs	r2, #100	@ 0x64
 8004154:	fb03 f202 	mul.w	r2, r3, r2
 8004158:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <LCD16X2_CMD+0x178>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	490c      	ldr	r1, [pc, #48]	@ (8004190 <LCD16X2_CMD+0x17c>)
 800415e:	fba1 1303 	umull	r1, r3, r1, r3
 8004162:	0c9b      	lsrs	r3, r3, #18
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	4b07      	ldr	r3, [pc, #28]	@ (8004188 <LCD16X2_CMD+0x174>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	429a      	cmp	r2, r3
 8004176:	d8f8      	bhi.n	800416a <LCD16X2_CMD+0x156>
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	08004870 	.word	0x08004870
 8004188:	e000e010 	.word	0xe000e010
 800418c:	20000004 	.word	0x20000004
 8004190:	431bde83 	.word	0x431bde83

08004194 <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
	LCD16X2_CMD(LCD16X2_Index, 0);
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff ff36 	bl	8004014 <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	2101      	movs	r1, #1
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff31 	bl	8004014 <LCD16X2_CMD>
    DELAY_MS(2);
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e01f      	b.n	80041f8 <LCD16X2_Clear+0x64>
 80041b8:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <LCD16X2_Clear+0x74>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	4b13      	ldr	r3, [pc, #76]	@ (800420c <LCD16X2_Clear+0x78>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <LCD16X2_Clear+0x7c>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	0c9b      	lsrs	r3, r3, #18
 80041ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041ce:	fb03 f202 	mul.w	r2, r3, r2
 80041d2:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <LCD16X2_Clear+0x78>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	490e      	ldr	r1, [pc, #56]	@ (8004210 <LCD16X2_Clear+0x7c>)
 80041d8:	fba1 1303 	umull	r1, r3, r1, r3
 80041dc:	0c9b      	lsrs	r3, r3, #18
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <LCD16X2_Clear+0x74>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d8f8      	bhi.n	80041e4 <LCD16X2_Clear+0x50>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	3301      	adds	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d9dc      	bls.n	80041b8 <LCD16X2_Clear+0x24>
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	e000e010 	.word	0xe000e010
 800420c:	20000004 	.word	0x20000004
 8004210:	431bde83 	.word	0x431bde83

08004214 <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
 800421e:	460b      	mov	r3, r1
 8004220:	71bb      	strb	r3, [r7, #6]
 8004222:	4613      	mov	r3, r2
 8004224:	717b      	strb	r3, [r7, #5]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 8004226:	79bb      	ldrb	r3, [r7, #6]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d115      	bne.n	8004258 <LCD16X2_Set_Cursor+0x44>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 800422c:	797b      	ldrb	r3, [r7, #5]
 800422e:	337f      	adds	r3, #127	@ 0x7f
 8004230:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8004240:	7bba      	ldrb	r2, [r7, #14]
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fee4 	bl	8004014 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 800424c:	7b7a      	ldrb	r2, [r7, #13]
 800424e:	79fb      	ldrb	r3, [r7, #7]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fede 	bl	8004014 <LCD16X2_CMD>
    }
    if(r == 2)
 8004258:	79bb      	ldrb	r3, [r7, #6]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d115      	bne.n	800428a <LCD16X2_Set_Cursor+0x76>
    {
      Temp  = 0xC0 + c - 1;
 800425e:	797b      	ldrb	r3, [r7, #5]
 8004260:	3b41      	subs	r3, #65	@ 0x41
 8004262:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	737b      	strb	r3, [r7, #13]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8004272:	7bba      	ldrb	r2, [r7, #14]
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fecb 	bl	8004014 <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 800427e:	7b7a      	ldrb	r2, [r7, #13]
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff fec5 	bl	8004014 <LCD16X2_CMD>
    }
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08e      	sub	sp, #56	@ 0x38
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 800429e:	bf00      	nop
 80042a0:	f7fc f99a 	bl	80005d8 <HAL_GetTick>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b31      	cmp	r3, #49	@ 0x31
 80042a8:	d9fa      	bls.n	80042a0 <LCD16X2_Init+0xc>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	4a7c      	ldr	r2, [pc, #496]	@ (80044a0 <LCD16X2_Init+0x20c>)
 80042ae:	2134      	movs	r1, #52	@ 0x34
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	332c      	adds	r3, #44	@ 0x2c
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	4a78      	ldr	r2, [pc, #480]	@ (80044a0 <LCD16X2_Init+0x20c>)
 80042be:	2134      	movs	r1, #52	@ 0x34
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	3330      	adds	r3, #48	@ 0x30
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2200      	movs	r2, #0
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7fc fcc1 	bl	8000c54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	4a72      	ldr	r2, [pc, #456]	@ (80044a0 <LCD16X2_Init+0x20c>)
 80042d6:	2134      	movs	r1, #52	@ 0x34
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	3324      	adds	r3, #36	@ 0x24
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	4a6e      	ldr	r2, [pc, #440]	@ (80044a0 <LCD16X2_Init+0x20c>)
 80042e6:	2134      	movs	r1, #52	@ 0x34
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	3328      	adds	r3, #40	@ 0x28
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	2200      	movs	r2, #0
 80042f4:	4619      	mov	r1, r3
 80042f6:	f7fc fcad 	bl	8000c54 <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fdc2 	bl	8003e88 <LCD16X2_DATA>
    DELAY_MS(150);
 8004304:	2300      	movs	r3, #0
 8004306:	637b      	str	r3, [r7, #52]	@ 0x34
 8004308:	e01f      	b.n	800434a <LCD16X2_Init+0xb6>
 800430a:	4b66      	ldr	r3, [pc, #408]	@ (80044a4 <LCD16X2_Init+0x210>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	4b65      	ldr	r3, [pc, #404]	@ (80044a8 <LCD16X2_Init+0x214>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a65      	ldr	r2, [pc, #404]	@ (80044ac <LCD16X2_Init+0x218>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0c9b      	lsrs	r3, r3, #18
 800431c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004320:	fb03 f202 	mul.w	r2, r3, r2
 8004324:	4b60      	ldr	r3, [pc, #384]	@ (80044a8 <LCD16X2_Init+0x214>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4960      	ldr	r1, [pc, #384]	@ (80044ac <LCD16X2_Init+0x218>)
 800432a:	fba1 1303 	umull	r1, r3, r1, r3
 800432e:	0c9b      	lsrs	r3, r3, #18
 8004330:	085b      	lsrs	r3, r3, #1
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	4b5b      	ldr	r3, [pc, #364]	@ (80044a4 <LCD16X2_Init+0x210>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	429a      	cmp	r2, r3
 8004342:	d8f8      	bhi.n	8004336 <LCD16X2_Init+0xa2>
 8004344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004346:	3301      	adds	r3, #1
 8004348:	637b      	str	r3, [r7, #52]	@ 0x34
 800434a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434c:	2b95      	cmp	r3, #149	@ 0x95
 800434e:	d9dc      	bls.n	800430a <LCD16X2_Init+0x76>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	2103      	movs	r1, #3
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fe5d 	bl	8004014 <LCD16X2_CMD>
    DELAY_MS(5);
 800435a:	2300      	movs	r3, #0
 800435c:	633b      	str	r3, [r7, #48]	@ 0x30
 800435e:	e01f      	b.n	80043a0 <LCD16X2_Init+0x10c>
 8004360:	4b50      	ldr	r3, [pc, #320]	@ (80044a4 <LCD16X2_Init+0x210>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	4b50      	ldr	r3, [pc, #320]	@ (80044a8 <LCD16X2_Init+0x214>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a50      	ldr	r2, [pc, #320]	@ (80044ac <LCD16X2_Init+0x218>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	0c9b      	lsrs	r3, r3, #18
 8004372:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004376:	fb03 f202 	mul.w	r2, r3, r2
 800437a:	4b4b      	ldr	r3, [pc, #300]	@ (80044a8 <LCD16X2_Init+0x214>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	494b      	ldr	r1, [pc, #300]	@ (80044ac <LCD16X2_Init+0x218>)
 8004380:	fba1 1303 	umull	r1, r3, r1, r3
 8004384:	0c9b      	lsrs	r3, r3, #18
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	4b45      	ldr	r3, [pc, #276]	@ (80044a4 <LCD16X2_Init+0x210>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	429a      	cmp	r2, r3
 8004398:	d8f8      	bhi.n	800438c <LCD16X2_Init+0xf8>
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	3301      	adds	r3, #1
 800439e:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d9dc      	bls.n	8004360 <LCD16X2_Init+0xcc>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	2103      	movs	r1, #3
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fe32 	bl	8004014 <LCD16X2_CMD>
    DELAY_MS(5);
 80043b0:	2300      	movs	r3, #0
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043b4:	e01f      	b.n	80043f6 <LCD16X2_Init+0x162>
 80043b6:	4b3b      	ldr	r3, [pc, #236]	@ (80044a4 <LCD16X2_Init+0x210>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	623b      	str	r3, [r7, #32]
 80043bc:	4b3a      	ldr	r3, [pc, #232]	@ (80044a8 <LCD16X2_Init+0x214>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3a      	ldr	r2, [pc, #232]	@ (80044ac <LCD16X2_Init+0x218>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0c9b      	lsrs	r3, r3, #18
 80043c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043cc:	fb03 f202 	mul.w	r2, r3, r2
 80043d0:	4b35      	ldr	r3, [pc, #212]	@ (80044a8 <LCD16X2_Init+0x214>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4935      	ldr	r1, [pc, #212]	@ (80044ac <LCD16X2_Init+0x218>)
 80043d6:	fba1 1303 	umull	r1, r3, r1, r3
 80043da:	0c9b      	lsrs	r3, r3, #18
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	4b30      	ldr	r3, [pc, #192]	@ (80044a4 <LCD16X2_Init+0x210>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d8f8      	bhi.n	80043e2 <LCD16X2_Init+0x14e>
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	3301      	adds	r3, #1
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d9dc      	bls.n	80043b6 <LCD16X2_Init+0x122>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	2103      	movs	r1, #3
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fe07 	bl	8004014 <LCD16X2_CMD>
    DELAY_US(150);
 8004406:	4b27      	ldr	r3, [pc, #156]	@ (80044a4 <LCD16X2_Init+0x210>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800440c:	4b26      	ldr	r3, [pc, #152]	@ (80044a8 <LCD16X2_Init+0x214>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a26      	ldr	r2, [pc, #152]	@ (80044ac <LCD16X2_Init+0x218>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0c9b      	lsrs	r3, r3, #18
 8004418:	2296      	movs	r2, #150	@ 0x96
 800441a:	fb03 f202 	mul.w	r2, r3, r2
 800441e:	4b22      	ldr	r3, [pc, #136]	@ (80044a8 <LCD16X2_Init+0x214>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4922      	ldr	r1, [pc, #136]	@ (80044ac <LCD16X2_Init+0x218>)
 8004424:	fba1 1303 	umull	r1, r3, r1, r3
 8004428:	0c9b      	lsrs	r3, r3, #18
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004430:	4b1c      	ldr	r3, [pc, #112]	@ (80044a4 <LCD16X2_Init+0x210>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443a:	429a      	cmp	r2, r3
 800443c:	d8f8      	bhi.n	8004430 <LCD16X2_Init+0x19c>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2102      	movs	r1, #2
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fde6 	bl	8004014 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff fde1 	bl	8004014 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	2108      	movs	r1, #8
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff fddc 	bl	8004014 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fdd7 	bl	8004014 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	210c      	movs	r1, #12
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fdd2 	bl	8004014 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fdcd 	bl	8004014 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	2106      	movs	r1, #6
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fdc8 	bl	8004014 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fdc3 	bl	8004014 <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fdbe 	bl	8004014 <LCD16X2_CMD>
}
 8004498:	bf00      	nop
 800449a:	3738      	adds	r7, #56	@ 0x38
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	08004870 	.word	0x08004870
 80044a4:	e000e010 	.word	0xe000e010
 80044a8:	20000004 	.word	0x20000004
 80044ac:	431bde83 	.word	0x431bde83

080044b0 <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b090      	sub	sp, #64	@ 0x40
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	460a      	mov	r2, r1
 80044ba:	71fb      	strb	r3, [r7, #7]
 80044bc:	4613      	mov	r3, r2
 80044be:	71bb      	strb	r3, [r7, #6]
   char Low4,High4;
   Low4  = Data & 0x0F;
 80044c0:	79bb      	ldrb	r3, [r7, #6]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
   High4 = Data & 0xF0;
 80044ca:	79bb      	ldrb	r3, [r7, #6]
 80044cc:	f023 030f 	bic.w	r3, r3, #15
 80044d0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	4aa4      	ldr	r2, [pc, #656]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 80044d8:	2134      	movs	r1, #52	@ 0x34
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	332c      	adds	r3, #44	@ 0x2c
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	4aa0      	ldr	r2, [pc, #640]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 80044e8:	2134      	movs	r1, #52	@ 0x34
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3330      	adds	r3, #48	@ 0x30
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	2201      	movs	r2, #1
 80044f6:	4619      	mov	r1, r3
 80044f8:	f7fc fbac 	bl	8000c54 <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 80044fc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	b2da      	uxtb	r2, r3
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fcbd 	bl	8003e88 <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	4a95      	ldr	r2, [pc, #596]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 8004512:	2134      	movs	r1, #52	@ 0x34
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	3324      	adds	r3, #36	@ 0x24
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4a91      	ldr	r2, [pc, #580]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 8004522:	2134      	movs	r1, #52	@ 0x34
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	3328      	adds	r3, #40	@ 0x28
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	2200      	movs	r2, #0
 8004530:	4619      	mov	r1, r3
 8004532:	f7fc fb8f 	bl	8000c54 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8004536:	4b8d      	ldr	r3, [pc, #564]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800453c:	4b8c      	ldr	r3, [pc, #560]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a8c      	ldr	r2, [pc, #560]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	0c9a      	lsrs	r2, r3, #18
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	4b88      	ldr	r3, [pc, #544]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4988      	ldr	r1, [pc, #544]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 8004554:	fba1 1303 	umull	r1, r3, r1, r3
 8004558:	0c9b      	lsrs	r3, r3, #18
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004560:	4b82      	ldr	r3, [pc, #520]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800456a:	429a      	cmp	r2, r3
 800456c:	d8f8      	bhi.n	8004560 <LCD16X2_Write_Char+0xb0>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	4a7d      	ldr	r2, [pc, #500]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 8004572:	2134      	movs	r1, #52	@ 0x34
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	3324      	adds	r3, #36	@ 0x24
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	4a79      	ldr	r2, [pc, #484]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 8004582:	2134      	movs	r1, #52	@ 0x34
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	3328      	adds	r3, #40	@ 0x28
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	2201      	movs	r2, #1
 8004590:	4619      	mov	r1, r3
 8004592:	f7fc fb5f 	bl	8000c54 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8004596:	4b75      	ldr	r3, [pc, #468]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	633b      	str	r3, [r7, #48]	@ 0x30
 800459c:	4b74      	ldr	r3, [pc, #464]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a74      	ldr	r2, [pc, #464]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0c9a      	lsrs	r2, r3, #18
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	4b70      	ldr	r3, [pc, #448]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4970      	ldr	r1, [pc, #448]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 80045b4:	fba1 1303 	umull	r1, r3, r1, r3
 80045b8:	0c9b      	lsrs	r3, r3, #18
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045c0:	4b6a      	ldr	r3, [pc, #424]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d8f8      	bhi.n	80045c0 <LCD16X2_Write_Char+0x110>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	4a65      	ldr	r2, [pc, #404]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 80045d2:	2134      	movs	r1, #52	@ 0x34
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	3324      	adds	r3, #36	@ 0x24
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	4a61      	ldr	r2, [pc, #388]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 80045e2:	2134      	movs	r1, #52	@ 0x34
 80045e4:	fb01 f303 	mul.w	r3, r1, r3
 80045e8:	4413      	add	r3, r2
 80045ea:	3328      	adds	r3, #40	@ 0x28
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	2200      	movs	r2, #0
 80045f0:	4619      	mov	r1, r3
 80045f2:	f7fc fb2f 	bl	8000c54 <HAL_GPIO_WritePin>
   DELAY_US(100);
 80045f6:	4b5d      	ldr	r3, [pc, #372]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a5c      	ldr	r2, [pc, #368]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	0c9b      	lsrs	r3, r3, #18
 8004608:	2264      	movs	r2, #100	@ 0x64
 800460a:	fb03 f202 	mul.w	r2, r3, r2
 800460e:	4b58      	ldr	r3, [pc, #352]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4958      	ldr	r1, [pc, #352]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 8004614:	fba1 1303 	umull	r1, r3, r1, r3
 8004618:	0c9b      	lsrs	r3, r3, #18
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004620:	4b52      	ldr	r3, [pc, #328]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462a:	429a      	cmp	r2, r3
 800462c:	d8f8      	bhi.n	8004620 <LCD16X2_Write_Char+0x170>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 800462e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fc26 	bl	8003e88 <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	4a4a      	ldr	r2, [pc, #296]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 8004640:	2134      	movs	r1, #52	@ 0x34
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	3324      	adds	r3, #36	@ 0x24
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	4a46      	ldr	r2, [pc, #280]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 8004650:	2134      	movs	r1, #52	@ 0x34
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	3328      	adds	r3, #40	@ 0x28
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	2200      	movs	r2, #0
 800465e:	4619      	mov	r1, r3
 8004660:	f7fc faf8 	bl	8000c54 <HAL_GPIO_WritePin>
   DELAY_US(5);
 8004664:	4b41      	ldr	r3, [pc, #260]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	4b41      	ldr	r3, [pc, #260]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a41      	ldr	r2, [pc, #260]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	0c9a      	lsrs	r2, r3, #18
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	4b3c      	ldr	r3, [pc, #240]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	493c      	ldr	r1, [pc, #240]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 8004682:	fba1 1303 	umull	r1, r3, r1, r3
 8004686:	0c9b      	lsrs	r3, r3, #18
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	4b37      	ldr	r3, [pc, #220]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	6a3a      	ldr	r2, [r7, #32]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	429a      	cmp	r2, r3
 800469a:	d8f8      	bhi.n	800468e <LCD16X2_Write_Char+0x1de>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	4a32      	ldr	r2, [pc, #200]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 80046a0:	2134      	movs	r1, #52	@ 0x34
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	3324      	adds	r3, #36	@ 0x24
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 80046b0:	2134      	movs	r1, #52	@ 0x34
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	3328      	adds	r3, #40	@ 0x28
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	2201      	movs	r2, #1
 80046be:	4619      	mov	r1, r3
 80046c0:	f7fc fac8 	bl	8000c54 <HAL_GPIO_WritePin>
   DELAY_US(5);
 80046c4:	4b29      	ldr	r3, [pc, #164]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	4b29      	ldr	r3, [pc, #164]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 80046d0:	fba2 2303 	umull	r2, r3, r2, r3
 80046d4:	0c9a      	lsrs	r2, r3, #18
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4924      	ldr	r1, [pc, #144]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 80046e2:	fba1 1303 	umull	r1, r3, r1, r3
 80046e6:	0c9b      	lsrs	r3, r3, #18
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	4b1f      	ldr	r3, [pc, #124]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d8f8      	bhi.n	80046ee <LCD16X2_Write_Char+0x23e>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 8004700:	2134      	movs	r1, #52	@ 0x34
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	3324      	adds	r3, #36	@ 0x24
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	79fb      	ldrb	r3, [r7, #7]
 800470e:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <LCD16X2_Write_Char+0x2b8>)
 8004710:	2134      	movs	r1, #52	@ 0x34
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	3328      	adds	r3, #40	@ 0x28
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	4619      	mov	r1, r3
 8004720:	f7fc fa98 	bl	8000c54 <HAL_GPIO_WritePin>
   DELAY_US(100);
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a11      	ldr	r2, [pc, #68]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	0c9b      	lsrs	r3, r3, #18
 8004736:	2264      	movs	r2, #100	@ 0x64
 8004738:	fb03 f202 	mul.w	r2, r3, r2
 800473c:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <LCD16X2_Write_Char+0x2c0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	490c      	ldr	r1, [pc, #48]	@ (8004774 <LCD16X2_Write_Char+0x2c4>)
 8004742:	fba1 1303 	umull	r1, r3, r1, r3
 8004746:	0c9b      	lsrs	r3, r3, #18
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	4b07      	ldr	r3, [pc, #28]	@ (800476c <LCD16X2_Write_Char+0x2bc>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	429a      	cmp	r2, r3
 800475a:	d8f8      	bhi.n	800474e <LCD16X2_Write_Char+0x29e>
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	3740      	adds	r7, #64	@ 0x40
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	08004870 	.word	0x08004870
 800476c:	e000e010 	.word	0xe000e010
 8004770:	20000004 	.word	0x20000004
 8004774:	431bde83 	.word	0x431bde83

08004778 <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
    int i;
    for(i=0; str[i]!='\0'; i++)
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e00b      	b.n	80047a2 <LCD16X2_Write_String+0x2a>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	4413      	add	r3, r2
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	4611      	mov	r1, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fe8a 	bl	80044b0 <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	4413      	add	r3, r2
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ed      	bne.n	800478a <LCD16X2_Write_String+0x12>
    }
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <memset>:
 80047b8:	4603      	mov	r3, r0
 80047ba:	4402      	add	r2, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	f803 1b01 	strb.w	r1, [r3], #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	2600      	movs	r6, #0
 80047cc:	4d0c      	ldr	r5, [pc, #48]	@ (8004800 <__libc_init_array+0x38>)
 80047ce:	4c0d      	ldr	r4, [pc, #52]	@ (8004804 <__libc_init_array+0x3c>)
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	42a6      	cmp	r6, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	f000 f81a 	bl	8004810 <_init>
 80047dc:	2600      	movs	r6, #0
 80047de:	4d0a      	ldr	r5, [pc, #40]	@ (8004808 <__libc_init_array+0x40>)
 80047e0:	4c0a      	ldr	r4, [pc, #40]	@ (800480c <__libc_init_array+0x44>)
 80047e2:	1b64      	subs	r4, r4, r5
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	42a6      	cmp	r6, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f0:	4798      	blx	r3
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fa:	4798      	blx	r3
 80047fc:	3601      	adds	r6, #1
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	080048a4 	.word	0x080048a4
 8004804:	080048a4 	.word	0x080048a4
 8004808:	080048a4 	.word	0x080048a4
 800480c:	080048a8 	.word	0x080048a8

08004810 <_init>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr

0800481c <_fini>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr
