
HAL_SPI_Static_IND.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027c0  080027c0  000037c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e4  080027e4  000037e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027e8  080027e8  000037e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  080027f8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  080027f8  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004fc6  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000139b  00000000  00000000  00008ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  0000a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000452  00000000  00000000  0000a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b8c  00000000  00000000  0000adca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ef8  00000000  00000000  00020956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bbb4  00000000  00000000  0002784e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000160c  00000000  00000000  000a3448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000a4a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027a8 	.word	0x080027a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080027a8 	.word	0x080027a8

0800014c <initSegment>:
#include "led.h"


void initSegment(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  cs_set();
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	480c      	ldr	r0, [pc, #48]	@ (8000188 <initSegment+0x3c>)
 8000156:	f001 fc97 	bl	8001a88 <HAL_GPIO_WritePin>
  aTxBuffer[0]=0xFF;
 800015a:	4b0c      	ldr	r3, [pc, #48]	@ (800018c <initSegment+0x40>)
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit (&hspi1, (uint8_t*)aTxBuffer, 1, 5000);
 8000160:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000164:	2201      	movs	r2, #1
 8000166:	4909      	ldr	r1, [pc, #36]	@ (800018c <initSegment+0x40>)
 8000168:	4809      	ldr	r0, [pc, #36]	@ (8000190 <initSegment+0x44>)
 800016a:	f002 f907 	bl	800237c <HAL_SPI_Transmit>
  cs_strob();
 800016e:	2201      	movs	r2, #1
 8000170:	2110      	movs	r1, #16
 8000172:	4805      	ldr	r0, [pc, #20]	@ (8000188 <initSegment+0x3c>)
 8000174:	f001 fc88 	bl	8001a88 <HAL_GPIO_WritePin>
 8000178:	2200      	movs	r2, #0
 800017a:	2110      	movs	r1, #16
 800017c:	4802      	ldr	r0, [pc, #8]	@ (8000188 <initSegment+0x3c>)
 800017e:	f001 fc83 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010800 	.word	0x40010800
 800018c:	20000080 	.word	0x20000080
 8000190:	20000028 	.word	0x20000028

08000194 <segchar>:

void segchar (uint8_t seg)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
  switch(seg)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b09      	cmp	r3, #9
 80001a2:	f200 87e0 	bhi.w	8001166 <segchar+0xfd2>
 80001a6:	a201      	add	r2, pc, #4	@ (adr r2, 80001ac <segchar+0x18>)
 80001a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ac:	08000fe5 	.word	0x08000fe5
 80001b0:	080001d5 	.word	0x080001d5
 80001b4:	08000365 	.word	0x08000365
 80001b8:	080004f5 	.word	0x080004f5
 80001bc:	08000685 	.word	0x08000685
 80001c0:	08000815 	.word	0x08000815
 80001c4:	080009a5 	.word	0x080009a5
 80001c8:	08000b35 	.word	0x08000b35
 80001cc:	08000cc5 	.word	0x08000cc5
 80001d0:	08000e55 	.word	0x08000e55
  {
	case 1: SA_RESET; SB_SET;   SC_SET;   SD_RESET; SE_RESET; SF_RESET; SG_RESET; SH_RESET; break;
 80001d4:	4b60      	ldr	r3, [pc, #384]	@ (8000358 <segchar+0x1c4>)
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4b5e      	ldr	r3, [pc, #376]	@ (8000358 <segchar+0x1c4>)
 80001e0:	701a      	strb	r2, [r3, #0]
 80001e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80001e6:	2201      	movs	r2, #1
 80001e8:	495b      	ldr	r1, [pc, #364]	@ (8000358 <segchar+0x1c4>)
 80001ea:	485c      	ldr	r0, [pc, #368]	@ (800035c <segchar+0x1c8>)
 80001ec:	f002 f8c6 	bl	800237c <HAL_SPI_Transmit>
 80001f0:	2201      	movs	r2, #1
 80001f2:	2110      	movs	r1, #16
 80001f4:	485a      	ldr	r0, [pc, #360]	@ (8000360 <segchar+0x1cc>)
 80001f6:	f001 fc47 	bl	8001a88 <HAL_GPIO_WritePin>
 80001fa:	2200      	movs	r2, #0
 80001fc:	2110      	movs	r1, #16
 80001fe:	4858      	ldr	r0, [pc, #352]	@ (8000360 <segchar+0x1cc>)
 8000200:	f001 fc42 	bl	8001a88 <HAL_GPIO_WritePin>
 8000204:	4b54      	ldr	r3, [pc, #336]	@ (8000358 <segchar+0x1c4>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f023 0302 	bic.w	r3, r3, #2
 800020c:	b2da      	uxtb	r2, r3
 800020e:	4b52      	ldr	r3, [pc, #328]	@ (8000358 <segchar+0x1c4>)
 8000210:	701a      	strb	r2, [r3, #0]
 8000212:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000216:	2201      	movs	r2, #1
 8000218:	494f      	ldr	r1, [pc, #316]	@ (8000358 <segchar+0x1c4>)
 800021a:	4850      	ldr	r0, [pc, #320]	@ (800035c <segchar+0x1c8>)
 800021c:	f002 f8ae 	bl	800237c <HAL_SPI_Transmit>
 8000220:	2201      	movs	r2, #1
 8000222:	2110      	movs	r1, #16
 8000224:	484e      	ldr	r0, [pc, #312]	@ (8000360 <segchar+0x1cc>)
 8000226:	f001 fc2f 	bl	8001a88 <HAL_GPIO_WritePin>
 800022a:	2200      	movs	r2, #0
 800022c:	2110      	movs	r1, #16
 800022e:	484c      	ldr	r0, [pc, #304]	@ (8000360 <segchar+0x1cc>)
 8000230:	f001 fc2a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000234:	4b48      	ldr	r3, [pc, #288]	@ (8000358 <segchar+0x1c4>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	f023 0304 	bic.w	r3, r3, #4
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4b46      	ldr	r3, [pc, #280]	@ (8000358 <segchar+0x1c4>)
 8000240:	701a      	strb	r2, [r3, #0]
 8000242:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000246:	2201      	movs	r2, #1
 8000248:	4943      	ldr	r1, [pc, #268]	@ (8000358 <segchar+0x1c4>)
 800024a:	4844      	ldr	r0, [pc, #272]	@ (800035c <segchar+0x1c8>)
 800024c:	f002 f896 	bl	800237c <HAL_SPI_Transmit>
 8000250:	2201      	movs	r2, #1
 8000252:	2110      	movs	r1, #16
 8000254:	4842      	ldr	r0, [pc, #264]	@ (8000360 <segchar+0x1cc>)
 8000256:	f001 fc17 	bl	8001a88 <HAL_GPIO_WritePin>
 800025a:	2200      	movs	r2, #0
 800025c:	2110      	movs	r1, #16
 800025e:	4840      	ldr	r0, [pc, #256]	@ (8000360 <segchar+0x1cc>)
 8000260:	f001 fc12 	bl	8001a88 <HAL_GPIO_WritePin>
 8000264:	4b3c      	ldr	r3, [pc, #240]	@ (8000358 <segchar+0x1c4>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f043 0308 	orr.w	r3, r3, #8
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4b3a      	ldr	r3, [pc, #232]	@ (8000358 <segchar+0x1c4>)
 8000270:	701a      	strb	r2, [r3, #0]
 8000272:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000276:	2201      	movs	r2, #1
 8000278:	4937      	ldr	r1, [pc, #220]	@ (8000358 <segchar+0x1c4>)
 800027a:	4838      	ldr	r0, [pc, #224]	@ (800035c <segchar+0x1c8>)
 800027c:	f002 f87e 	bl	800237c <HAL_SPI_Transmit>
 8000280:	2201      	movs	r2, #1
 8000282:	2110      	movs	r1, #16
 8000284:	4836      	ldr	r0, [pc, #216]	@ (8000360 <segchar+0x1cc>)
 8000286:	f001 fbff 	bl	8001a88 <HAL_GPIO_WritePin>
 800028a:	2200      	movs	r2, #0
 800028c:	2110      	movs	r1, #16
 800028e:	4834      	ldr	r0, [pc, #208]	@ (8000360 <segchar+0x1cc>)
 8000290:	f001 fbfa 	bl	8001a88 <HAL_GPIO_WritePin>
 8000294:	4b30      	ldr	r3, [pc, #192]	@ (8000358 <segchar+0x1c4>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	f043 0310 	orr.w	r3, r3, #16
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b2e      	ldr	r3, [pc, #184]	@ (8000358 <segchar+0x1c4>)
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80002a6:	2201      	movs	r2, #1
 80002a8:	492b      	ldr	r1, [pc, #172]	@ (8000358 <segchar+0x1c4>)
 80002aa:	482c      	ldr	r0, [pc, #176]	@ (800035c <segchar+0x1c8>)
 80002ac:	f002 f866 	bl	800237c <HAL_SPI_Transmit>
 80002b0:	2201      	movs	r2, #1
 80002b2:	2110      	movs	r1, #16
 80002b4:	482a      	ldr	r0, [pc, #168]	@ (8000360 <segchar+0x1cc>)
 80002b6:	f001 fbe7 	bl	8001a88 <HAL_GPIO_WritePin>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2110      	movs	r1, #16
 80002be:	4828      	ldr	r0, [pc, #160]	@ (8000360 <segchar+0x1cc>)
 80002c0:	f001 fbe2 	bl	8001a88 <HAL_GPIO_WritePin>
 80002c4:	4b24      	ldr	r3, [pc, #144]	@ (8000358 <segchar+0x1c4>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	f043 0320 	orr.w	r3, r3, #32
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <segchar+0x1c4>)
 80002d0:	701a      	strb	r2, [r3, #0]
 80002d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80002d6:	2201      	movs	r2, #1
 80002d8:	491f      	ldr	r1, [pc, #124]	@ (8000358 <segchar+0x1c4>)
 80002da:	4820      	ldr	r0, [pc, #128]	@ (800035c <segchar+0x1c8>)
 80002dc:	f002 f84e 	bl	800237c <HAL_SPI_Transmit>
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	481e      	ldr	r0, [pc, #120]	@ (8000360 <segchar+0x1cc>)
 80002e6:	f001 fbcf 	bl	8001a88 <HAL_GPIO_WritePin>
 80002ea:	2200      	movs	r2, #0
 80002ec:	2110      	movs	r1, #16
 80002ee:	481c      	ldr	r0, [pc, #112]	@ (8000360 <segchar+0x1cc>)
 80002f0:	f001 fbca 	bl	8001a88 <HAL_GPIO_WritePin>
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <segchar+0x1c4>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <segchar+0x1c4>)
 8000300:	701a      	strb	r2, [r3, #0]
 8000302:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000306:	2201      	movs	r2, #1
 8000308:	4913      	ldr	r1, [pc, #76]	@ (8000358 <segchar+0x1c4>)
 800030a:	4814      	ldr	r0, [pc, #80]	@ (800035c <segchar+0x1c8>)
 800030c:	f002 f836 	bl	800237c <HAL_SPI_Transmit>
 8000310:	2201      	movs	r2, #1
 8000312:	2110      	movs	r1, #16
 8000314:	4812      	ldr	r0, [pc, #72]	@ (8000360 <segchar+0x1cc>)
 8000316:	f001 fbb7 	bl	8001a88 <HAL_GPIO_WritePin>
 800031a:	2200      	movs	r2, #0
 800031c:	2110      	movs	r1, #16
 800031e:	4810      	ldr	r0, [pc, #64]	@ (8000360 <segchar+0x1cc>)
 8000320:	f001 fbb2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <segchar+0x1c4>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <segchar+0x1c4>)
 8000330:	701a      	strb	r2, [r3, #0]
 8000332:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000336:	2201      	movs	r2, #1
 8000338:	4907      	ldr	r1, [pc, #28]	@ (8000358 <segchar+0x1c4>)
 800033a:	4808      	ldr	r0, [pc, #32]	@ (800035c <segchar+0x1c8>)
 800033c:	f002 f81e 	bl	800237c <HAL_SPI_Transmit>
 8000340:	2201      	movs	r2, #1
 8000342:	2110      	movs	r1, #16
 8000344:	4806      	ldr	r0, [pc, #24]	@ (8000360 <segchar+0x1cc>)
 8000346:	f001 fb9f 	bl	8001a88 <HAL_GPIO_WritePin>
 800034a:	2200      	movs	r2, #0
 800034c:	2110      	movs	r1, #16
 800034e:	4804      	ldr	r0, [pc, #16]	@ (8000360 <segchar+0x1cc>)
 8000350:	f001 fb9a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000354:	f000 bf07 	b.w	8001166 <segchar+0xfd2>
 8000358:	20000080 	.word	0x20000080
 800035c:	20000028 	.word	0x20000028
 8000360:	40010800 	.word	0x40010800
	case 2: SA_SET;	  SB_SET;   SC_RESET; SD_SET;   SE_SET;   SF_RESET; SG_SET;   SH_RESET; break;
 8000364:	4b60      	ldr	r3, [pc, #384]	@ (80004e8 <segchar+0x354>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	f023 0301 	bic.w	r3, r3, #1
 800036c:	b2da      	uxtb	r2, r3
 800036e:	4b5e      	ldr	r3, [pc, #376]	@ (80004e8 <segchar+0x354>)
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000376:	2201      	movs	r2, #1
 8000378:	495b      	ldr	r1, [pc, #364]	@ (80004e8 <segchar+0x354>)
 800037a:	485c      	ldr	r0, [pc, #368]	@ (80004ec <segchar+0x358>)
 800037c:	f001 fffe 	bl	800237c <HAL_SPI_Transmit>
 8000380:	2201      	movs	r2, #1
 8000382:	2110      	movs	r1, #16
 8000384:	485a      	ldr	r0, [pc, #360]	@ (80004f0 <segchar+0x35c>)
 8000386:	f001 fb7f 	bl	8001a88 <HAL_GPIO_WritePin>
 800038a:	2200      	movs	r2, #0
 800038c:	2110      	movs	r1, #16
 800038e:	4858      	ldr	r0, [pc, #352]	@ (80004f0 <segchar+0x35c>)
 8000390:	f001 fb7a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000394:	4b54      	ldr	r3, [pc, #336]	@ (80004e8 <segchar+0x354>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	f023 0302 	bic.w	r3, r3, #2
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b52      	ldr	r3, [pc, #328]	@ (80004e8 <segchar+0x354>)
 80003a0:	701a      	strb	r2, [r3, #0]
 80003a2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80003a6:	2201      	movs	r2, #1
 80003a8:	494f      	ldr	r1, [pc, #316]	@ (80004e8 <segchar+0x354>)
 80003aa:	4850      	ldr	r0, [pc, #320]	@ (80004ec <segchar+0x358>)
 80003ac:	f001 ffe6 	bl	800237c <HAL_SPI_Transmit>
 80003b0:	2201      	movs	r2, #1
 80003b2:	2110      	movs	r1, #16
 80003b4:	484e      	ldr	r0, [pc, #312]	@ (80004f0 <segchar+0x35c>)
 80003b6:	f001 fb67 	bl	8001a88 <HAL_GPIO_WritePin>
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	484c      	ldr	r0, [pc, #304]	@ (80004f0 <segchar+0x35c>)
 80003c0:	f001 fb62 	bl	8001a88 <HAL_GPIO_WritePin>
 80003c4:	4b48      	ldr	r3, [pc, #288]	@ (80004e8 <segchar+0x354>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b46      	ldr	r3, [pc, #280]	@ (80004e8 <segchar+0x354>)
 80003d0:	701a      	strb	r2, [r3, #0]
 80003d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80003d6:	2201      	movs	r2, #1
 80003d8:	4943      	ldr	r1, [pc, #268]	@ (80004e8 <segchar+0x354>)
 80003da:	4844      	ldr	r0, [pc, #272]	@ (80004ec <segchar+0x358>)
 80003dc:	f001 ffce 	bl	800237c <HAL_SPI_Transmit>
 80003e0:	2201      	movs	r2, #1
 80003e2:	2110      	movs	r1, #16
 80003e4:	4842      	ldr	r0, [pc, #264]	@ (80004f0 <segchar+0x35c>)
 80003e6:	f001 fb4f 	bl	8001a88 <HAL_GPIO_WritePin>
 80003ea:	2200      	movs	r2, #0
 80003ec:	2110      	movs	r1, #16
 80003ee:	4840      	ldr	r0, [pc, #256]	@ (80004f0 <segchar+0x35c>)
 80003f0:	f001 fb4a 	bl	8001a88 <HAL_GPIO_WritePin>
 80003f4:	4b3c      	ldr	r3, [pc, #240]	@ (80004e8 <segchar+0x354>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	f023 0308 	bic.w	r3, r3, #8
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b3a      	ldr	r3, [pc, #232]	@ (80004e8 <segchar+0x354>)
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000406:	2201      	movs	r2, #1
 8000408:	4937      	ldr	r1, [pc, #220]	@ (80004e8 <segchar+0x354>)
 800040a:	4838      	ldr	r0, [pc, #224]	@ (80004ec <segchar+0x358>)
 800040c:	f001 ffb6 	bl	800237c <HAL_SPI_Transmit>
 8000410:	2201      	movs	r2, #1
 8000412:	2110      	movs	r1, #16
 8000414:	4836      	ldr	r0, [pc, #216]	@ (80004f0 <segchar+0x35c>)
 8000416:	f001 fb37 	bl	8001a88 <HAL_GPIO_WritePin>
 800041a:	2200      	movs	r2, #0
 800041c:	2110      	movs	r1, #16
 800041e:	4834      	ldr	r0, [pc, #208]	@ (80004f0 <segchar+0x35c>)
 8000420:	f001 fb32 	bl	8001a88 <HAL_GPIO_WritePin>
 8000424:	4b30      	ldr	r3, [pc, #192]	@ (80004e8 <segchar+0x354>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	f023 0310 	bic.w	r3, r3, #16
 800042c:	b2da      	uxtb	r2, r3
 800042e:	4b2e      	ldr	r3, [pc, #184]	@ (80004e8 <segchar+0x354>)
 8000430:	701a      	strb	r2, [r3, #0]
 8000432:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000436:	2201      	movs	r2, #1
 8000438:	492b      	ldr	r1, [pc, #172]	@ (80004e8 <segchar+0x354>)
 800043a:	482c      	ldr	r0, [pc, #176]	@ (80004ec <segchar+0x358>)
 800043c:	f001 ff9e 	bl	800237c <HAL_SPI_Transmit>
 8000440:	2201      	movs	r2, #1
 8000442:	2110      	movs	r1, #16
 8000444:	482a      	ldr	r0, [pc, #168]	@ (80004f0 <segchar+0x35c>)
 8000446:	f001 fb1f 	bl	8001a88 <HAL_GPIO_WritePin>
 800044a:	2200      	movs	r2, #0
 800044c:	2110      	movs	r1, #16
 800044e:	4828      	ldr	r0, [pc, #160]	@ (80004f0 <segchar+0x35c>)
 8000450:	f001 fb1a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000454:	4b24      	ldr	r3, [pc, #144]	@ (80004e8 <segchar+0x354>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	f043 0320 	orr.w	r3, r3, #32
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b22      	ldr	r3, [pc, #136]	@ (80004e8 <segchar+0x354>)
 8000460:	701a      	strb	r2, [r3, #0]
 8000462:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000466:	2201      	movs	r2, #1
 8000468:	491f      	ldr	r1, [pc, #124]	@ (80004e8 <segchar+0x354>)
 800046a:	4820      	ldr	r0, [pc, #128]	@ (80004ec <segchar+0x358>)
 800046c:	f001 ff86 	bl	800237c <HAL_SPI_Transmit>
 8000470:	2201      	movs	r2, #1
 8000472:	2110      	movs	r1, #16
 8000474:	481e      	ldr	r0, [pc, #120]	@ (80004f0 <segchar+0x35c>)
 8000476:	f001 fb07 	bl	8001a88 <HAL_GPIO_WritePin>
 800047a:	2200      	movs	r2, #0
 800047c:	2110      	movs	r1, #16
 800047e:	481c      	ldr	r0, [pc, #112]	@ (80004f0 <segchar+0x35c>)
 8000480:	f001 fb02 	bl	8001a88 <HAL_GPIO_WritePin>
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <segchar+0x354>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <segchar+0x354>)
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000496:	2201      	movs	r2, #1
 8000498:	4913      	ldr	r1, [pc, #76]	@ (80004e8 <segchar+0x354>)
 800049a:	4814      	ldr	r0, [pc, #80]	@ (80004ec <segchar+0x358>)
 800049c:	f001 ff6e 	bl	800237c <HAL_SPI_Transmit>
 80004a0:	2201      	movs	r2, #1
 80004a2:	2110      	movs	r1, #16
 80004a4:	4812      	ldr	r0, [pc, #72]	@ (80004f0 <segchar+0x35c>)
 80004a6:	f001 faef 	bl	8001a88 <HAL_GPIO_WritePin>
 80004aa:	2200      	movs	r2, #0
 80004ac:	2110      	movs	r1, #16
 80004ae:	4810      	ldr	r0, [pc, #64]	@ (80004f0 <segchar+0x35c>)
 80004b0:	f001 faea 	bl	8001a88 <HAL_GPIO_WritePin>
 80004b4:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <segchar+0x354>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b0a      	ldr	r3, [pc, #40]	@ (80004e8 <segchar+0x354>)
 80004c0:	701a      	strb	r2, [r3, #0]
 80004c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80004c6:	2201      	movs	r2, #1
 80004c8:	4907      	ldr	r1, [pc, #28]	@ (80004e8 <segchar+0x354>)
 80004ca:	4808      	ldr	r0, [pc, #32]	@ (80004ec <segchar+0x358>)
 80004cc:	f001 ff56 	bl	800237c <HAL_SPI_Transmit>
 80004d0:	2201      	movs	r2, #1
 80004d2:	2110      	movs	r1, #16
 80004d4:	4806      	ldr	r0, [pc, #24]	@ (80004f0 <segchar+0x35c>)
 80004d6:	f001 fad7 	bl	8001a88 <HAL_GPIO_WritePin>
 80004da:	2200      	movs	r2, #0
 80004dc:	2110      	movs	r1, #16
 80004de:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <segchar+0x35c>)
 80004e0:	f001 fad2 	bl	8001a88 <HAL_GPIO_WritePin>
 80004e4:	f000 be3f 	b.w	8001166 <segchar+0xfd2>
 80004e8:	20000080 	.word	0x20000080
 80004ec:	20000028 	.word	0x20000028
 80004f0:	40010800 	.word	0x40010800
	case 3:	SA_SET;   SB_SET;   SC_SET;   SD_SET;   SE_RESET; SF_RESET; SG_SET;   SH_RESET; break;
 80004f4:	4b60      	ldr	r3, [pc, #384]	@ (8000678 <segchar+0x4e4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f023 0301 	bic.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b5e      	ldr	r3, [pc, #376]	@ (8000678 <segchar+0x4e4>)
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000506:	2201      	movs	r2, #1
 8000508:	495b      	ldr	r1, [pc, #364]	@ (8000678 <segchar+0x4e4>)
 800050a:	485c      	ldr	r0, [pc, #368]	@ (800067c <segchar+0x4e8>)
 800050c:	f001 ff36 	bl	800237c <HAL_SPI_Transmit>
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	485a      	ldr	r0, [pc, #360]	@ (8000680 <segchar+0x4ec>)
 8000516:	f001 fab7 	bl	8001a88 <HAL_GPIO_WritePin>
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4858      	ldr	r0, [pc, #352]	@ (8000680 <segchar+0x4ec>)
 8000520:	f001 fab2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000524:	4b54      	ldr	r3, [pc, #336]	@ (8000678 <segchar+0x4e4>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	f023 0302 	bic.w	r3, r3, #2
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b52      	ldr	r3, [pc, #328]	@ (8000678 <segchar+0x4e4>)
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000536:	2201      	movs	r2, #1
 8000538:	494f      	ldr	r1, [pc, #316]	@ (8000678 <segchar+0x4e4>)
 800053a:	4850      	ldr	r0, [pc, #320]	@ (800067c <segchar+0x4e8>)
 800053c:	f001 ff1e 	bl	800237c <HAL_SPI_Transmit>
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	484e      	ldr	r0, [pc, #312]	@ (8000680 <segchar+0x4ec>)
 8000546:	f001 fa9f 	bl	8001a88 <HAL_GPIO_WritePin>
 800054a:	2200      	movs	r2, #0
 800054c:	2110      	movs	r1, #16
 800054e:	484c      	ldr	r0, [pc, #304]	@ (8000680 <segchar+0x4ec>)
 8000550:	f001 fa9a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000554:	4b48      	ldr	r3, [pc, #288]	@ (8000678 <segchar+0x4e4>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	f023 0304 	bic.w	r3, r3, #4
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b46      	ldr	r3, [pc, #280]	@ (8000678 <segchar+0x4e4>)
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000566:	2201      	movs	r2, #1
 8000568:	4943      	ldr	r1, [pc, #268]	@ (8000678 <segchar+0x4e4>)
 800056a:	4844      	ldr	r0, [pc, #272]	@ (800067c <segchar+0x4e8>)
 800056c:	f001 ff06 	bl	800237c <HAL_SPI_Transmit>
 8000570:	2201      	movs	r2, #1
 8000572:	2110      	movs	r1, #16
 8000574:	4842      	ldr	r0, [pc, #264]	@ (8000680 <segchar+0x4ec>)
 8000576:	f001 fa87 	bl	8001a88 <HAL_GPIO_WritePin>
 800057a:	2200      	movs	r2, #0
 800057c:	2110      	movs	r1, #16
 800057e:	4840      	ldr	r0, [pc, #256]	@ (8000680 <segchar+0x4ec>)
 8000580:	f001 fa82 	bl	8001a88 <HAL_GPIO_WritePin>
 8000584:	4b3c      	ldr	r3, [pc, #240]	@ (8000678 <segchar+0x4e4>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	f023 0308 	bic.w	r3, r3, #8
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b3a      	ldr	r3, [pc, #232]	@ (8000678 <segchar+0x4e4>)
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000596:	2201      	movs	r2, #1
 8000598:	4937      	ldr	r1, [pc, #220]	@ (8000678 <segchar+0x4e4>)
 800059a:	4838      	ldr	r0, [pc, #224]	@ (800067c <segchar+0x4e8>)
 800059c:	f001 feee 	bl	800237c <HAL_SPI_Transmit>
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4836      	ldr	r0, [pc, #216]	@ (8000680 <segchar+0x4ec>)
 80005a6:	f001 fa6f 	bl	8001a88 <HAL_GPIO_WritePin>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2110      	movs	r1, #16
 80005ae:	4834      	ldr	r0, [pc, #208]	@ (8000680 <segchar+0x4ec>)
 80005b0:	f001 fa6a 	bl	8001a88 <HAL_GPIO_WritePin>
 80005b4:	4b30      	ldr	r3, [pc, #192]	@ (8000678 <segchar+0x4e4>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <segchar+0x4e4>)
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80005c6:	2201      	movs	r2, #1
 80005c8:	492b      	ldr	r1, [pc, #172]	@ (8000678 <segchar+0x4e4>)
 80005ca:	482c      	ldr	r0, [pc, #176]	@ (800067c <segchar+0x4e8>)
 80005cc:	f001 fed6 	bl	800237c <HAL_SPI_Transmit>
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	482a      	ldr	r0, [pc, #168]	@ (8000680 <segchar+0x4ec>)
 80005d6:	f001 fa57 	bl	8001a88 <HAL_GPIO_WritePin>
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	4828      	ldr	r0, [pc, #160]	@ (8000680 <segchar+0x4ec>)
 80005e0:	f001 fa52 	bl	8001a88 <HAL_GPIO_WritePin>
 80005e4:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <segchar+0x4e4>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <segchar+0x4e4>)
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80005f6:	2201      	movs	r2, #1
 80005f8:	491f      	ldr	r1, [pc, #124]	@ (8000678 <segchar+0x4e4>)
 80005fa:	4820      	ldr	r0, [pc, #128]	@ (800067c <segchar+0x4e8>)
 80005fc:	f001 febe 	bl	800237c <HAL_SPI_Transmit>
 8000600:	2201      	movs	r2, #1
 8000602:	2110      	movs	r1, #16
 8000604:	481e      	ldr	r0, [pc, #120]	@ (8000680 <segchar+0x4ec>)
 8000606:	f001 fa3f 	bl	8001a88 <HAL_GPIO_WritePin>
 800060a:	2200      	movs	r2, #0
 800060c:	2110      	movs	r1, #16
 800060e:	481c      	ldr	r0, [pc, #112]	@ (8000680 <segchar+0x4ec>)
 8000610:	f001 fa3a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <segchar+0x4e4>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b16      	ldr	r3, [pc, #88]	@ (8000678 <segchar+0x4e4>)
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000626:	2201      	movs	r2, #1
 8000628:	4913      	ldr	r1, [pc, #76]	@ (8000678 <segchar+0x4e4>)
 800062a:	4814      	ldr	r0, [pc, #80]	@ (800067c <segchar+0x4e8>)
 800062c:	f001 fea6 	bl	800237c <HAL_SPI_Transmit>
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	4812      	ldr	r0, [pc, #72]	@ (8000680 <segchar+0x4ec>)
 8000636:	f001 fa27 	bl	8001a88 <HAL_GPIO_WritePin>
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	4810      	ldr	r0, [pc, #64]	@ (8000680 <segchar+0x4ec>)
 8000640:	f001 fa22 	bl	8001a88 <HAL_GPIO_WritePin>
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <segchar+0x4e4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <segchar+0x4e4>)
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000656:	2201      	movs	r2, #1
 8000658:	4907      	ldr	r1, [pc, #28]	@ (8000678 <segchar+0x4e4>)
 800065a:	4808      	ldr	r0, [pc, #32]	@ (800067c <segchar+0x4e8>)
 800065c:	f001 fe8e 	bl	800237c <HAL_SPI_Transmit>
 8000660:	2201      	movs	r2, #1
 8000662:	2110      	movs	r1, #16
 8000664:	4806      	ldr	r0, [pc, #24]	@ (8000680 <segchar+0x4ec>)
 8000666:	f001 fa0f 	bl	8001a88 <HAL_GPIO_WritePin>
 800066a:	2200      	movs	r2, #0
 800066c:	2110      	movs	r1, #16
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <segchar+0x4ec>)
 8000670:	f001 fa0a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000674:	f000 bd77 	b.w	8001166 <segchar+0xfd2>
 8000678:	20000080 	.word	0x20000080
 800067c:	20000028 	.word	0x20000028
 8000680:	40010800 	.word	0x40010800
	case 4:	SA_RESET; SB_SET;   SC_SET;   SD_RESET; SE_RESET; SF_SET;   SG_SET;   SH_RESET; break;
 8000684:	4b60      	ldr	r3, [pc, #384]	@ (8000808 <segchar+0x674>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b5e      	ldr	r3, [pc, #376]	@ (8000808 <segchar+0x674>)
 8000690:	701a      	strb	r2, [r3, #0]
 8000692:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000696:	2201      	movs	r2, #1
 8000698:	495b      	ldr	r1, [pc, #364]	@ (8000808 <segchar+0x674>)
 800069a:	485c      	ldr	r0, [pc, #368]	@ (800080c <segchar+0x678>)
 800069c:	f001 fe6e 	bl	800237c <HAL_SPI_Transmit>
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	485a      	ldr	r0, [pc, #360]	@ (8000810 <segchar+0x67c>)
 80006a6:	f001 f9ef 	bl	8001a88 <HAL_GPIO_WritePin>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	4858      	ldr	r0, [pc, #352]	@ (8000810 <segchar+0x67c>)
 80006b0:	f001 f9ea 	bl	8001a88 <HAL_GPIO_WritePin>
 80006b4:	4b54      	ldr	r3, [pc, #336]	@ (8000808 <segchar+0x674>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	f023 0302 	bic.w	r3, r3, #2
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b52      	ldr	r3, [pc, #328]	@ (8000808 <segchar+0x674>)
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006c6:	2201      	movs	r2, #1
 80006c8:	494f      	ldr	r1, [pc, #316]	@ (8000808 <segchar+0x674>)
 80006ca:	4850      	ldr	r0, [pc, #320]	@ (800080c <segchar+0x678>)
 80006cc:	f001 fe56 	bl	800237c <HAL_SPI_Transmit>
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	484e      	ldr	r0, [pc, #312]	@ (8000810 <segchar+0x67c>)
 80006d6:	f001 f9d7 	bl	8001a88 <HAL_GPIO_WritePin>
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	484c      	ldr	r0, [pc, #304]	@ (8000810 <segchar+0x67c>)
 80006e0:	f001 f9d2 	bl	8001a88 <HAL_GPIO_WritePin>
 80006e4:	4b48      	ldr	r3, [pc, #288]	@ (8000808 <segchar+0x674>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f023 0304 	bic.w	r3, r3, #4
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b46      	ldr	r3, [pc, #280]	@ (8000808 <segchar+0x674>)
 80006f0:	701a      	strb	r2, [r3, #0]
 80006f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006f6:	2201      	movs	r2, #1
 80006f8:	4943      	ldr	r1, [pc, #268]	@ (8000808 <segchar+0x674>)
 80006fa:	4844      	ldr	r0, [pc, #272]	@ (800080c <segchar+0x678>)
 80006fc:	f001 fe3e 	bl	800237c <HAL_SPI_Transmit>
 8000700:	2201      	movs	r2, #1
 8000702:	2110      	movs	r1, #16
 8000704:	4842      	ldr	r0, [pc, #264]	@ (8000810 <segchar+0x67c>)
 8000706:	f001 f9bf 	bl	8001a88 <HAL_GPIO_WritePin>
 800070a:	2200      	movs	r2, #0
 800070c:	2110      	movs	r1, #16
 800070e:	4840      	ldr	r0, [pc, #256]	@ (8000810 <segchar+0x67c>)
 8000710:	f001 f9ba 	bl	8001a88 <HAL_GPIO_WritePin>
 8000714:	4b3c      	ldr	r3, [pc, #240]	@ (8000808 <segchar+0x674>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b3a      	ldr	r3, [pc, #232]	@ (8000808 <segchar+0x674>)
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000726:	2201      	movs	r2, #1
 8000728:	4937      	ldr	r1, [pc, #220]	@ (8000808 <segchar+0x674>)
 800072a:	4838      	ldr	r0, [pc, #224]	@ (800080c <segchar+0x678>)
 800072c:	f001 fe26 	bl	800237c <HAL_SPI_Transmit>
 8000730:	2201      	movs	r2, #1
 8000732:	2110      	movs	r1, #16
 8000734:	4836      	ldr	r0, [pc, #216]	@ (8000810 <segchar+0x67c>)
 8000736:	f001 f9a7 	bl	8001a88 <HAL_GPIO_WritePin>
 800073a:	2200      	movs	r2, #0
 800073c:	2110      	movs	r1, #16
 800073e:	4834      	ldr	r0, [pc, #208]	@ (8000810 <segchar+0x67c>)
 8000740:	f001 f9a2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000744:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <segchar+0x674>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b2e      	ldr	r3, [pc, #184]	@ (8000808 <segchar+0x674>)
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000756:	2201      	movs	r2, #1
 8000758:	492b      	ldr	r1, [pc, #172]	@ (8000808 <segchar+0x674>)
 800075a:	482c      	ldr	r0, [pc, #176]	@ (800080c <segchar+0x678>)
 800075c:	f001 fe0e 	bl	800237c <HAL_SPI_Transmit>
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	482a      	ldr	r0, [pc, #168]	@ (8000810 <segchar+0x67c>)
 8000766:	f001 f98f 	bl	8001a88 <HAL_GPIO_WritePin>
 800076a:	2200      	movs	r2, #0
 800076c:	2110      	movs	r1, #16
 800076e:	4828      	ldr	r0, [pc, #160]	@ (8000810 <segchar+0x67c>)
 8000770:	f001 f98a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000774:	4b24      	ldr	r3, [pc, #144]	@ (8000808 <segchar+0x674>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f023 0320 	bic.w	r3, r3, #32
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <segchar+0x674>)
 8000780:	701a      	strb	r2, [r3, #0]
 8000782:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000786:	2201      	movs	r2, #1
 8000788:	491f      	ldr	r1, [pc, #124]	@ (8000808 <segchar+0x674>)
 800078a:	4820      	ldr	r0, [pc, #128]	@ (800080c <segchar+0x678>)
 800078c:	f001 fdf6 	bl	800237c <HAL_SPI_Transmit>
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	481e      	ldr	r0, [pc, #120]	@ (8000810 <segchar+0x67c>)
 8000796:	f001 f977 	bl	8001a88 <HAL_GPIO_WritePin>
 800079a:	2200      	movs	r2, #0
 800079c:	2110      	movs	r1, #16
 800079e:	481c      	ldr	r0, [pc, #112]	@ (8000810 <segchar+0x67c>)
 80007a0:	f001 f972 	bl	8001a88 <HAL_GPIO_WritePin>
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <segchar+0x674>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <segchar+0x674>)
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007b6:	2201      	movs	r2, #1
 80007b8:	4913      	ldr	r1, [pc, #76]	@ (8000808 <segchar+0x674>)
 80007ba:	4814      	ldr	r0, [pc, #80]	@ (800080c <segchar+0x678>)
 80007bc:	f001 fdde 	bl	800237c <HAL_SPI_Transmit>
 80007c0:	2201      	movs	r2, #1
 80007c2:	2110      	movs	r1, #16
 80007c4:	4812      	ldr	r0, [pc, #72]	@ (8000810 <segchar+0x67c>)
 80007c6:	f001 f95f 	bl	8001a88 <HAL_GPIO_WritePin>
 80007ca:	2200      	movs	r2, #0
 80007cc:	2110      	movs	r1, #16
 80007ce:	4810      	ldr	r0, [pc, #64]	@ (8000810 <segchar+0x67c>)
 80007d0:	f001 f95a 	bl	8001a88 <HAL_GPIO_WritePin>
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <segchar+0x674>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <segchar+0x674>)
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007e6:	2201      	movs	r2, #1
 80007e8:	4907      	ldr	r1, [pc, #28]	@ (8000808 <segchar+0x674>)
 80007ea:	4808      	ldr	r0, [pc, #32]	@ (800080c <segchar+0x678>)
 80007ec:	f001 fdc6 	bl	800237c <HAL_SPI_Transmit>
 80007f0:	2201      	movs	r2, #1
 80007f2:	2110      	movs	r1, #16
 80007f4:	4806      	ldr	r0, [pc, #24]	@ (8000810 <segchar+0x67c>)
 80007f6:	f001 f947 	bl	8001a88 <HAL_GPIO_WritePin>
 80007fa:	2200      	movs	r2, #0
 80007fc:	2110      	movs	r1, #16
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <segchar+0x67c>)
 8000800:	f001 f942 	bl	8001a88 <HAL_GPIO_WritePin>
 8000804:	f000 bcaf 	b.w	8001166 <segchar+0xfd2>
 8000808:	20000080 	.word	0x20000080
 800080c:	20000028 	.word	0x20000028
 8000810:	40010800 	.word	0x40010800
	case 5:	SA_SET;   SB_RESET; SC_SET;   SD_SET;   SE_RESET; SF_SET;   SG_SET;   SH_RESET; break;
 8000814:	4b60      	ldr	r3, [pc, #384]	@ (8000998 <segchar+0x804>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f023 0301 	bic.w	r3, r3, #1
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b5e      	ldr	r3, [pc, #376]	@ (8000998 <segchar+0x804>)
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000826:	2201      	movs	r2, #1
 8000828:	495b      	ldr	r1, [pc, #364]	@ (8000998 <segchar+0x804>)
 800082a:	485c      	ldr	r0, [pc, #368]	@ (800099c <segchar+0x808>)
 800082c:	f001 fda6 	bl	800237c <HAL_SPI_Transmit>
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	485a      	ldr	r0, [pc, #360]	@ (80009a0 <segchar+0x80c>)
 8000836:	f001 f927 	bl	8001a88 <HAL_GPIO_WritePin>
 800083a:	2200      	movs	r2, #0
 800083c:	2110      	movs	r1, #16
 800083e:	4858      	ldr	r0, [pc, #352]	@ (80009a0 <segchar+0x80c>)
 8000840:	f001 f922 	bl	8001a88 <HAL_GPIO_WritePin>
 8000844:	4b54      	ldr	r3, [pc, #336]	@ (8000998 <segchar+0x804>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b52      	ldr	r3, [pc, #328]	@ (8000998 <segchar+0x804>)
 8000850:	701a      	strb	r2, [r3, #0]
 8000852:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000856:	2201      	movs	r2, #1
 8000858:	494f      	ldr	r1, [pc, #316]	@ (8000998 <segchar+0x804>)
 800085a:	4850      	ldr	r0, [pc, #320]	@ (800099c <segchar+0x808>)
 800085c:	f001 fd8e 	bl	800237c <HAL_SPI_Transmit>
 8000860:	2201      	movs	r2, #1
 8000862:	2110      	movs	r1, #16
 8000864:	484e      	ldr	r0, [pc, #312]	@ (80009a0 <segchar+0x80c>)
 8000866:	f001 f90f 	bl	8001a88 <HAL_GPIO_WritePin>
 800086a:	2200      	movs	r2, #0
 800086c:	2110      	movs	r1, #16
 800086e:	484c      	ldr	r0, [pc, #304]	@ (80009a0 <segchar+0x80c>)
 8000870:	f001 f90a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000874:	4b48      	ldr	r3, [pc, #288]	@ (8000998 <segchar+0x804>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	f023 0304 	bic.w	r3, r3, #4
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b46      	ldr	r3, [pc, #280]	@ (8000998 <segchar+0x804>)
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000886:	2201      	movs	r2, #1
 8000888:	4943      	ldr	r1, [pc, #268]	@ (8000998 <segchar+0x804>)
 800088a:	4844      	ldr	r0, [pc, #272]	@ (800099c <segchar+0x808>)
 800088c:	f001 fd76 	bl	800237c <HAL_SPI_Transmit>
 8000890:	2201      	movs	r2, #1
 8000892:	2110      	movs	r1, #16
 8000894:	4842      	ldr	r0, [pc, #264]	@ (80009a0 <segchar+0x80c>)
 8000896:	f001 f8f7 	bl	8001a88 <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	2110      	movs	r1, #16
 800089e:	4840      	ldr	r0, [pc, #256]	@ (80009a0 <segchar+0x80c>)
 80008a0:	f001 f8f2 	bl	8001a88 <HAL_GPIO_WritePin>
 80008a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000998 <segchar+0x804>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f023 0308 	bic.w	r3, r3, #8
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000998 <segchar+0x804>)
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008b6:	2201      	movs	r2, #1
 80008b8:	4937      	ldr	r1, [pc, #220]	@ (8000998 <segchar+0x804>)
 80008ba:	4838      	ldr	r0, [pc, #224]	@ (800099c <segchar+0x808>)
 80008bc:	f001 fd5e 	bl	800237c <HAL_SPI_Transmit>
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	4836      	ldr	r0, [pc, #216]	@ (80009a0 <segchar+0x80c>)
 80008c6:	f001 f8df 	bl	8001a88 <HAL_GPIO_WritePin>
 80008ca:	2200      	movs	r2, #0
 80008cc:	2110      	movs	r1, #16
 80008ce:	4834      	ldr	r0, [pc, #208]	@ (80009a0 <segchar+0x80c>)
 80008d0:	f001 f8da 	bl	8001a88 <HAL_GPIO_WritePin>
 80008d4:	4b30      	ldr	r3, [pc, #192]	@ (8000998 <segchar+0x804>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b2e      	ldr	r3, [pc, #184]	@ (8000998 <segchar+0x804>)
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008e6:	2201      	movs	r2, #1
 80008e8:	492b      	ldr	r1, [pc, #172]	@ (8000998 <segchar+0x804>)
 80008ea:	482c      	ldr	r0, [pc, #176]	@ (800099c <segchar+0x808>)
 80008ec:	f001 fd46 	bl	800237c <HAL_SPI_Transmit>
 80008f0:	2201      	movs	r2, #1
 80008f2:	2110      	movs	r1, #16
 80008f4:	482a      	ldr	r0, [pc, #168]	@ (80009a0 <segchar+0x80c>)
 80008f6:	f001 f8c7 	bl	8001a88 <HAL_GPIO_WritePin>
 80008fa:	2200      	movs	r2, #0
 80008fc:	2110      	movs	r1, #16
 80008fe:	4828      	ldr	r0, [pc, #160]	@ (80009a0 <segchar+0x80c>)
 8000900:	f001 f8c2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <segchar+0x804>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	f023 0320 	bic.w	r3, r3, #32
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <segchar+0x804>)
 8000910:	701a      	strb	r2, [r3, #0]
 8000912:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000916:	2201      	movs	r2, #1
 8000918:	491f      	ldr	r1, [pc, #124]	@ (8000998 <segchar+0x804>)
 800091a:	4820      	ldr	r0, [pc, #128]	@ (800099c <segchar+0x808>)
 800091c:	f001 fd2e 	bl	800237c <HAL_SPI_Transmit>
 8000920:	2201      	movs	r2, #1
 8000922:	2110      	movs	r1, #16
 8000924:	481e      	ldr	r0, [pc, #120]	@ (80009a0 <segchar+0x80c>)
 8000926:	f001 f8af 	bl	8001a88 <HAL_GPIO_WritePin>
 800092a:	2200      	movs	r2, #0
 800092c:	2110      	movs	r1, #16
 800092e:	481c      	ldr	r0, [pc, #112]	@ (80009a0 <segchar+0x80c>)
 8000930:	f001 f8aa 	bl	8001a88 <HAL_GPIO_WritePin>
 8000934:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <segchar+0x804>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <segchar+0x804>)
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000946:	2201      	movs	r2, #1
 8000948:	4913      	ldr	r1, [pc, #76]	@ (8000998 <segchar+0x804>)
 800094a:	4814      	ldr	r0, [pc, #80]	@ (800099c <segchar+0x808>)
 800094c:	f001 fd16 	bl	800237c <HAL_SPI_Transmit>
 8000950:	2201      	movs	r2, #1
 8000952:	2110      	movs	r1, #16
 8000954:	4812      	ldr	r0, [pc, #72]	@ (80009a0 <segchar+0x80c>)
 8000956:	f001 f897 	bl	8001a88 <HAL_GPIO_WritePin>
 800095a:	2200      	movs	r2, #0
 800095c:	2110      	movs	r1, #16
 800095e:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <segchar+0x80c>)
 8000960:	f001 f892 	bl	8001a88 <HAL_GPIO_WritePin>
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <segchar+0x804>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <segchar+0x804>)
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000976:	2201      	movs	r2, #1
 8000978:	4907      	ldr	r1, [pc, #28]	@ (8000998 <segchar+0x804>)
 800097a:	4808      	ldr	r0, [pc, #32]	@ (800099c <segchar+0x808>)
 800097c:	f001 fcfe 	bl	800237c <HAL_SPI_Transmit>
 8000980:	2201      	movs	r2, #1
 8000982:	2110      	movs	r1, #16
 8000984:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <segchar+0x80c>)
 8000986:	f001 f87f 	bl	8001a88 <HAL_GPIO_WritePin>
 800098a:	2200      	movs	r2, #0
 800098c:	2110      	movs	r1, #16
 800098e:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <segchar+0x80c>)
 8000990:	f001 f87a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000994:	e3e7      	b.n	8001166 <segchar+0xfd2>
 8000996:	bf00      	nop
 8000998:	20000080 	.word	0x20000080
 800099c:	20000028 	.word	0x20000028
 80009a0:	40010800 	.word	0x40010800
	case 6:	SA_SET;   SB_RESET; SC_SET;   SD_SET;   SE_SET;   SF_SET;   SG_SET;   SH_RESET; break;
 80009a4:	4b60      	ldr	r3, [pc, #384]	@ (8000b28 <segchar+0x994>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	f023 0301 	bic.w	r3, r3, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b5e      	ldr	r3, [pc, #376]	@ (8000b28 <segchar+0x994>)
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009b6:	2201      	movs	r2, #1
 80009b8:	495b      	ldr	r1, [pc, #364]	@ (8000b28 <segchar+0x994>)
 80009ba:	485c      	ldr	r0, [pc, #368]	@ (8000b2c <segchar+0x998>)
 80009bc:	f001 fcde 	bl	800237c <HAL_SPI_Transmit>
 80009c0:	2201      	movs	r2, #1
 80009c2:	2110      	movs	r1, #16
 80009c4:	485a      	ldr	r0, [pc, #360]	@ (8000b30 <segchar+0x99c>)
 80009c6:	f001 f85f 	bl	8001a88 <HAL_GPIO_WritePin>
 80009ca:	2200      	movs	r2, #0
 80009cc:	2110      	movs	r1, #16
 80009ce:	4858      	ldr	r0, [pc, #352]	@ (8000b30 <segchar+0x99c>)
 80009d0:	f001 f85a 	bl	8001a88 <HAL_GPIO_WritePin>
 80009d4:	4b54      	ldr	r3, [pc, #336]	@ (8000b28 <segchar+0x994>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b52      	ldr	r3, [pc, #328]	@ (8000b28 <segchar+0x994>)
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009e6:	2201      	movs	r2, #1
 80009e8:	494f      	ldr	r1, [pc, #316]	@ (8000b28 <segchar+0x994>)
 80009ea:	4850      	ldr	r0, [pc, #320]	@ (8000b2c <segchar+0x998>)
 80009ec:	f001 fcc6 	bl	800237c <HAL_SPI_Transmit>
 80009f0:	2201      	movs	r2, #1
 80009f2:	2110      	movs	r1, #16
 80009f4:	484e      	ldr	r0, [pc, #312]	@ (8000b30 <segchar+0x99c>)
 80009f6:	f001 f847 	bl	8001a88 <HAL_GPIO_WritePin>
 80009fa:	2200      	movs	r2, #0
 80009fc:	2110      	movs	r1, #16
 80009fe:	484c      	ldr	r0, [pc, #304]	@ (8000b30 <segchar+0x99c>)
 8000a00:	f001 f842 	bl	8001a88 <HAL_GPIO_WritePin>
 8000a04:	4b48      	ldr	r3, [pc, #288]	@ (8000b28 <segchar+0x994>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f023 0304 	bic.w	r3, r3, #4
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b46      	ldr	r3, [pc, #280]	@ (8000b28 <segchar+0x994>)
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a16:	2201      	movs	r2, #1
 8000a18:	4943      	ldr	r1, [pc, #268]	@ (8000b28 <segchar+0x994>)
 8000a1a:	4844      	ldr	r0, [pc, #272]	@ (8000b2c <segchar+0x998>)
 8000a1c:	f001 fcae 	bl	800237c <HAL_SPI_Transmit>
 8000a20:	2201      	movs	r2, #1
 8000a22:	2110      	movs	r1, #16
 8000a24:	4842      	ldr	r0, [pc, #264]	@ (8000b30 <segchar+0x99c>)
 8000a26:	f001 f82f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	4840      	ldr	r0, [pc, #256]	@ (8000b30 <segchar+0x99c>)
 8000a30:	f001 f82a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000a34:	4b3c      	ldr	r3, [pc, #240]	@ (8000b28 <segchar+0x994>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	f023 0308 	bic.w	r3, r3, #8
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b28 <segchar+0x994>)
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a46:	2201      	movs	r2, #1
 8000a48:	4937      	ldr	r1, [pc, #220]	@ (8000b28 <segchar+0x994>)
 8000a4a:	4838      	ldr	r0, [pc, #224]	@ (8000b2c <segchar+0x998>)
 8000a4c:	f001 fc96 	bl	800237c <HAL_SPI_Transmit>
 8000a50:	2201      	movs	r2, #1
 8000a52:	2110      	movs	r1, #16
 8000a54:	4836      	ldr	r0, [pc, #216]	@ (8000b30 <segchar+0x99c>)
 8000a56:	f001 f817 	bl	8001a88 <HAL_GPIO_WritePin>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	4834      	ldr	r0, [pc, #208]	@ (8000b30 <segchar+0x99c>)
 8000a60:	f001 f812 	bl	8001a88 <HAL_GPIO_WritePin>
 8000a64:	4b30      	ldr	r3, [pc, #192]	@ (8000b28 <segchar+0x994>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	f023 0310 	bic.w	r3, r3, #16
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b28 <segchar+0x994>)
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a76:	2201      	movs	r2, #1
 8000a78:	492b      	ldr	r1, [pc, #172]	@ (8000b28 <segchar+0x994>)
 8000a7a:	482c      	ldr	r0, [pc, #176]	@ (8000b2c <segchar+0x998>)
 8000a7c:	f001 fc7e 	bl	800237c <HAL_SPI_Transmit>
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	482a      	ldr	r0, [pc, #168]	@ (8000b30 <segchar+0x99c>)
 8000a86:	f000 ffff 	bl	8001a88 <HAL_GPIO_WritePin>
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	4828      	ldr	r0, [pc, #160]	@ (8000b30 <segchar+0x99c>)
 8000a90:	f000 fffa 	bl	8001a88 <HAL_GPIO_WritePin>
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <segchar+0x994>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f023 0320 	bic.w	r3, r3, #32
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <segchar+0x994>)
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	491f      	ldr	r1, [pc, #124]	@ (8000b28 <segchar+0x994>)
 8000aaa:	4820      	ldr	r0, [pc, #128]	@ (8000b2c <segchar+0x998>)
 8000aac:	f001 fc66 	bl	800237c <HAL_SPI_Transmit>
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	481e      	ldr	r0, [pc, #120]	@ (8000b30 <segchar+0x99c>)
 8000ab6:	f000 ffe7 	bl	8001a88 <HAL_GPIO_WritePin>
 8000aba:	2200      	movs	r2, #0
 8000abc:	2110      	movs	r1, #16
 8000abe:	481c      	ldr	r0, [pc, #112]	@ (8000b30 <segchar+0x99c>)
 8000ac0:	f000 ffe2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <segchar+0x994>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <segchar+0x994>)
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4913      	ldr	r1, [pc, #76]	@ (8000b28 <segchar+0x994>)
 8000ada:	4814      	ldr	r0, [pc, #80]	@ (8000b2c <segchar+0x998>)
 8000adc:	f001 fc4e 	bl	800237c <HAL_SPI_Transmit>
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <segchar+0x99c>)
 8000ae6:	f000 ffcf 	bl	8001a88 <HAL_GPIO_WritePin>
 8000aea:	2200      	movs	r2, #0
 8000aec:	2110      	movs	r1, #16
 8000aee:	4810      	ldr	r0, [pc, #64]	@ (8000b30 <segchar+0x99c>)
 8000af0:	f000 ffca 	bl	8001a88 <HAL_GPIO_WritePin>
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <segchar+0x994>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <segchar+0x994>)
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b06:	2201      	movs	r2, #1
 8000b08:	4907      	ldr	r1, [pc, #28]	@ (8000b28 <segchar+0x994>)
 8000b0a:	4808      	ldr	r0, [pc, #32]	@ (8000b2c <segchar+0x998>)
 8000b0c:	f001 fc36 	bl	800237c <HAL_SPI_Transmit>
 8000b10:	2201      	movs	r2, #1
 8000b12:	2110      	movs	r1, #16
 8000b14:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <segchar+0x99c>)
 8000b16:	f000 ffb7 	bl	8001a88 <HAL_GPIO_WritePin>
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <segchar+0x99c>)
 8000b20:	f000 ffb2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000b24:	e31f      	b.n	8001166 <segchar+0xfd2>
 8000b26:	bf00      	nop
 8000b28:	20000080 	.word	0x20000080
 8000b2c:	20000028 	.word	0x20000028
 8000b30:	40010800 	.word	0x40010800
	case 7:	SA_SET;   SB_SET;   SC_SET;   SD_RESET; SE_RESET; SF_RESET; SG_RESET; SH_RESET; break;
 8000b34:	4b60      	ldr	r3, [pc, #384]	@ (8000cb8 <segchar+0xb24>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	f023 0301 	bic.w	r3, r3, #1
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb8 <segchar+0xb24>)
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b46:	2201      	movs	r2, #1
 8000b48:	495b      	ldr	r1, [pc, #364]	@ (8000cb8 <segchar+0xb24>)
 8000b4a:	485c      	ldr	r0, [pc, #368]	@ (8000cbc <segchar+0xb28>)
 8000b4c:	f001 fc16 	bl	800237c <HAL_SPI_Transmit>
 8000b50:	2201      	movs	r2, #1
 8000b52:	2110      	movs	r1, #16
 8000b54:	485a      	ldr	r0, [pc, #360]	@ (8000cc0 <segchar+0xb2c>)
 8000b56:	f000 ff97 	bl	8001a88 <HAL_GPIO_WritePin>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	4858      	ldr	r0, [pc, #352]	@ (8000cc0 <segchar+0xb2c>)
 8000b60:	f000 ff92 	bl	8001a88 <HAL_GPIO_WritePin>
 8000b64:	4b54      	ldr	r3, [pc, #336]	@ (8000cb8 <segchar+0xb24>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f023 0302 	bic.w	r3, r3, #2
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b52      	ldr	r3, [pc, #328]	@ (8000cb8 <segchar+0xb24>)
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b76:	2201      	movs	r2, #1
 8000b78:	494f      	ldr	r1, [pc, #316]	@ (8000cb8 <segchar+0xb24>)
 8000b7a:	4850      	ldr	r0, [pc, #320]	@ (8000cbc <segchar+0xb28>)
 8000b7c:	f001 fbfe 	bl	800237c <HAL_SPI_Transmit>
 8000b80:	2201      	movs	r2, #1
 8000b82:	2110      	movs	r1, #16
 8000b84:	484e      	ldr	r0, [pc, #312]	@ (8000cc0 <segchar+0xb2c>)
 8000b86:	f000 ff7f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2110      	movs	r1, #16
 8000b8e:	484c      	ldr	r0, [pc, #304]	@ (8000cc0 <segchar+0xb2c>)
 8000b90:	f000 ff7a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000b94:	4b48      	ldr	r3, [pc, #288]	@ (8000cb8 <segchar+0xb24>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f023 0304 	bic.w	r3, r3, #4
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b46      	ldr	r3, [pc, #280]	@ (8000cb8 <segchar+0xb24>)
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4943      	ldr	r1, [pc, #268]	@ (8000cb8 <segchar+0xb24>)
 8000baa:	4844      	ldr	r0, [pc, #272]	@ (8000cbc <segchar+0xb28>)
 8000bac:	f001 fbe6 	bl	800237c <HAL_SPI_Transmit>
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	4842      	ldr	r0, [pc, #264]	@ (8000cc0 <segchar+0xb2c>)
 8000bb6:	f000 ff67 	bl	8001a88 <HAL_GPIO_WritePin>
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	4840      	ldr	r0, [pc, #256]	@ (8000cc0 <segchar+0xb2c>)
 8000bc0:	f000 ff62 	bl	8001a88 <HAL_GPIO_WritePin>
 8000bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb8 <segchar+0xb24>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb8 <segchar+0xb24>)
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4937      	ldr	r1, [pc, #220]	@ (8000cb8 <segchar+0xb24>)
 8000bda:	4838      	ldr	r0, [pc, #224]	@ (8000cbc <segchar+0xb28>)
 8000bdc:	f001 fbce 	bl	800237c <HAL_SPI_Transmit>
 8000be0:	2201      	movs	r2, #1
 8000be2:	2110      	movs	r1, #16
 8000be4:	4836      	ldr	r0, [pc, #216]	@ (8000cc0 <segchar+0xb2c>)
 8000be6:	f000 ff4f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000bea:	2200      	movs	r2, #0
 8000bec:	2110      	movs	r1, #16
 8000bee:	4834      	ldr	r0, [pc, #208]	@ (8000cc0 <segchar+0xb2c>)
 8000bf0:	f000 ff4a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000bf4:	4b30      	ldr	r3, [pc, #192]	@ (8000cb8 <segchar+0xb24>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb8 <segchar+0xb24>)
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c06:	2201      	movs	r2, #1
 8000c08:	492b      	ldr	r1, [pc, #172]	@ (8000cb8 <segchar+0xb24>)
 8000c0a:	482c      	ldr	r0, [pc, #176]	@ (8000cbc <segchar+0xb28>)
 8000c0c:	f001 fbb6 	bl	800237c <HAL_SPI_Transmit>
 8000c10:	2201      	movs	r2, #1
 8000c12:	2110      	movs	r1, #16
 8000c14:	482a      	ldr	r0, [pc, #168]	@ (8000cc0 <segchar+0xb2c>)
 8000c16:	f000 ff37 	bl	8001a88 <HAL_GPIO_WritePin>
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	4828      	ldr	r0, [pc, #160]	@ (8000cc0 <segchar+0xb2c>)
 8000c20:	f000 ff32 	bl	8001a88 <HAL_GPIO_WritePin>
 8000c24:	4b24      	ldr	r3, [pc, #144]	@ (8000cb8 <segchar+0xb24>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <segchar+0xb24>)
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c36:	2201      	movs	r2, #1
 8000c38:	491f      	ldr	r1, [pc, #124]	@ (8000cb8 <segchar+0xb24>)
 8000c3a:	4820      	ldr	r0, [pc, #128]	@ (8000cbc <segchar+0xb28>)
 8000c3c:	f001 fb9e 	bl	800237c <HAL_SPI_Transmit>
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	481e      	ldr	r0, [pc, #120]	@ (8000cc0 <segchar+0xb2c>)
 8000c46:	f000 ff1f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	481c      	ldr	r0, [pc, #112]	@ (8000cc0 <segchar+0xb2c>)
 8000c50:	f000 ff1a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <segchar+0xb24>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <segchar+0xb24>)
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c66:	2201      	movs	r2, #1
 8000c68:	4913      	ldr	r1, [pc, #76]	@ (8000cb8 <segchar+0xb24>)
 8000c6a:	4814      	ldr	r0, [pc, #80]	@ (8000cbc <segchar+0xb28>)
 8000c6c:	f001 fb86 	bl	800237c <HAL_SPI_Transmit>
 8000c70:	2201      	movs	r2, #1
 8000c72:	2110      	movs	r1, #16
 8000c74:	4812      	ldr	r0, [pc, #72]	@ (8000cc0 <segchar+0xb2c>)
 8000c76:	f000 ff07 	bl	8001a88 <HAL_GPIO_WritePin>
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	4810      	ldr	r0, [pc, #64]	@ (8000cc0 <segchar+0xb2c>)
 8000c80:	f000 ff02 	bl	8001a88 <HAL_GPIO_WritePin>
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <segchar+0xb24>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <segchar+0xb24>)
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c96:	2201      	movs	r2, #1
 8000c98:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <segchar+0xb24>)
 8000c9a:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <segchar+0xb28>)
 8000c9c:	f001 fb6e 	bl	800237c <HAL_SPI_Transmit>
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <segchar+0xb2c>)
 8000ca6:	f000 feef 	bl	8001a88 <HAL_GPIO_WritePin>
 8000caa:	2200      	movs	r2, #0
 8000cac:	2110      	movs	r1, #16
 8000cae:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <segchar+0xb2c>)
 8000cb0:	f000 feea 	bl	8001a88 <HAL_GPIO_WritePin>
 8000cb4:	e257      	b.n	8001166 <segchar+0xfd2>
 8000cb6:	bf00      	nop
 8000cb8:	20000080 	.word	0x20000080
 8000cbc:	20000028 	.word	0x20000028
 8000cc0:	40010800 	.word	0x40010800
	case 8:	SA_SET;   SB_SET;   SC_SET;   SD_SET;   SE_SET;   SF_SET;   SG_SET;   SH_RESET; break;
 8000cc4:	4b60      	ldr	r3, [pc, #384]	@ (8000e48 <segchar+0xcb4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b5e      	ldr	r3, [pc, #376]	@ (8000e48 <segchar+0xcb4>)
 8000cd0:	701a      	strb	r2, [r3, #0]
 8000cd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	495b      	ldr	r1, [pc, #364]	@ (8000e48 <segchar+0xcb4>)
 8000cda:	485c      	ldr	r0, [pc, #368]	@ (8000e4c <segchar+0xcb8>)
 8000cdc:	f001 fb4e 	bl	800237c <HAL_SPI_Transmit>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	485a      	ldr	r0, [pc, #360]	@ (8000e50 <segchar+0xcbc>)
 8000ce6:	f000 fecf 	bl	8001a88 <HAL_GPIO_WritePin>
 8000cea:	2200      	movs	r2, #0
 8000cec:	2110      	movs	r1, #16
 8000cee:	4858      	ldr	r0, [pc, #352]	@ (8000e50 <segchar+0xcbc>)
 8000cf0:	f000 feca 	bl	8001a88 <HAL_GPIO_WritePin>
 8000cf4:	4b54      	ldr	r3, [pc, #336]	@ (8000e48 <segchar+0xcb4>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	f023 0302 	bic.w	r3, r3, #2
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b52      	ldr	r3, [pc, #328]	@ (8000e48 <segchar+0xcb4>)
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d06:	2201      	movs	r2, #1
 8000d08:	494f      	ldr	r1, [pc, #316]	@ (8000e48 <segchar+0xcb4>)
 8000d0a:	4850      	ldr	r0, [pc, #320]	@ (8000e4c <segchar+0xcb8>)
 8000d0c:	f001 fb36 	bl	800237c <HAL_SPI_Transmit>
 8000d10:	2201      	movs	r2, #1
 8000d12:	2110      	movs	r1, #16
 8000d14:	484e      	ldr	r0, [pc, #312]	@ (8000e50 <segchar+0xcbc>)
 8000d16:	f000 feb7 	bl	8001a88 <HAL_GPIO_WritePin>
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2110      	movs	r1, #16
 8000d1e:	484c      	ldr	r0, [pc, #304]	@ (8000e50 <segchar+0xcbc>)
 8000d20:	f000 feb2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000d24:	4b48      	ldr	r3, [pc, #288]	@ (8000e48 <segchar+0xcb4>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	f023 0304 	bic.w	r3, r3, #4
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b46      	ldr	r3, [pc, #280]	@ (8000e48 <segchar+0xcb4>)
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d36:	2201      	movs	r2, #1
 8000d38:	4943      	ldr	r1, [pc, #268]	@ (8000e48 <segchar+0xcb4>)
 8000d3a:	4844      	ldr	r0, [pc, #272]	@ (8000e4c <segchar+0xcb8>)
 8000d3c:	f001 fb1e 	bl	800237c <HAL_SPI_Transmit>
 8000d40:	2201      	movs	r2, #1
 8000d42:	2110      	movs	r1, #16
 8000d44:	4842      	ldr	r0, [pc, #264]	@ (8000e50 <segchar+0xcbc>)
 8000d46:	f000 fe9f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	4840      	ldr	r0, [pc, #256]	@ (8000e50 <segchar+0xcbc>)
 8000d50:	f000 fe9a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000d54:	4b3c      	ldr	r3, [pc, #240]	@ (8000e48 <segchar+0xcb4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f023 0308 	bic.w	r3, r3, #8
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e48 <segchar+0xcb4>)
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d66:	2201      	movs	r2, #1
 8000d68:	4937      	ldr	r1, [pc, #220]	@ (8000e48 <segchar+0xcb4>)
 8000d6a:	4838      	ldr	r0, [pc, #224]	@ (8000e4c <segchar+0xcb8>)
 8000d6c:	f001 fb06 	bl	800237c <HAL_SPI_Transmit>
 8000d70:	2201      	movs	r2, #1
 8000d72:	2110      	movs	r1, #16
 8000d74:	4836      	ldr	r0, [pc, #216]	@ (8000e50 <segchar+0xcbc>)
 8000d76:	f000 fe87 	bl	8001a88 <HAL_GPIO_WritePin>
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	4834      	ldr	r0, [pc, #208]	@ (8000e50 <segchar+0xcbc>)
 8000d80:	f000 fe82 	bl	8001a88 <HAL_GPIO_WritePin>
 8000d84:	4b30      	ldr	r3, [pc, #192]	@ (8000e48 <segchar+0xcb4>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f023 0310 	bic.w	r3, r3, #16
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e48 <segchar+0xcb4>)
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d96:	2201      	movs	r2, #1
 8000d98:	492b      	ldr	r1, [pc, #172]	@ (8000e48 <segchar+0xcb4>)
 8000d9a:	482c      	ldr	r0, [pc, #176]	@ (8000e4c <segchar+0xcb8>)
 8000d9c:	f001 faee 	bl	800237c <HAL_SPI_Transmit>
 8000da0:	2201      	movs	r2, #1
 8000da2:	2110      	movs	r1, #16
 8000da4:	482a      	ldr	r0, [pc, #168]	@ (8000e50 <segchar+0xcbc>)
 8000da6:	f000 fe6f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000daa:	2200      	movs	r2, #0
 8000dac:	2110      	movs	r1, #16
 8000dae:	4828      	ldr	r0, [pc, #160]	@ (8000e50 <segchar+0xcbc>)
 8000db0:	f000 fe6a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000db4:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <segchar+0xcb4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	f023 0320 	bic.w	r3, r3, #32
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <segchar+0xcb4>)
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	491f      	ldr	r1, [pc, #124]	@ (8000e48 <segchar+0xcb4>)
 8000dca:	4820      	ldr	r0, [pc, #128]	@ (8000e4c <segchar+0xcb8>)
 8000dcc:	f001 fad6 	bl	800237c <HAL_SPI_Transmit>
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	481e      	ldr	r0, [pc, #120]	@ (8000e50 <segchar+0xcbc>)
 8000dd6:	f000 fe57 	bl	8001a88 <HAL_GPIO_WritePin>
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2110      	movs	r1, #16
 8000dde:	481c      	ldr	r0, [pc, #112]	@ (8000e50 <segchar+0xcbc>)
 8000de0:	f000 fe52 	bl	8001a88 <HAL_GPIO_WritePin>
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <segchar+0xcb4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <segchar+0xcb4>)
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000df6:	2201      	movs	r2, #1
 8000df8:	4913      	ldr	r1, [pc, #76]	@ (8000e48 <segchar+0xcb4>)
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <segchar+0xcb8>)
 8000dfc:	f001 fabe 	bl	800237c <HAL_SPI_Transmit>
 8000e00:	2201      	movs	r2, #1
 8000e02:	2110      	movs	r1, #16
 8000e04:	4812      	ldr	r0, [pc, #72]	@ (8000e50 <segchar+0xcbc>)
 8000e06:	f000 fe3f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4810      	ldr	r0, [pc, #64]	@ (8000e50 <segchar+0xcbc>)
 8000e10:	f000 fe3a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <segchar+0xcb4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <segchar+0xcb4>)
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e26:	2201      	movs	r2, #1
 8000e28:	4907      	ldr	r1, [pc, #28]	@ (8000e48 <segchar+0xcb4>)
 8000e2a:	4808      	ldr	r0, [pc, #32]	@ (8000e4c <segchar+0xcb8>)
 8000e2c:	f001 faa6 	bl	800237c <HAL_SPI_Transmit>
 8000e30:	2201      	movs	r2, #1
 8000e32:	2110      	movs	r1, #16
 8000e34:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <segchar+0xcbc>)
 8000e36:	f000 fe27 	bl	8001a88 <HAL_GPIO_WritePin>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <segchar+0xcbc>)
 8000e40:	f000 fe22 	bl	8001a88 <HAL_GPIO_WritePin>
 8000e44:	e18f      	b.n	8001166 <segchar+0xfd2>
 8000e46:	bf00      	nop
 8000e48:	20000080 	.word	0x20000080
 8000e4c:	20000028 	.word	0x20000028
 8000e50:	40010800 	.word	0x40010800
	case 9:	SA_SET;   SB_SET;   SC_SET;   SD_SET;   SE_RESET; SF_SET;   SG_SET;   SH_RESET; break;
 8000e54:	4b60      	ldr	r3, [pc, #384]	@ (8000fd8 <segchar+0xe44>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8000fd8 <segchar+0xe44>)
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e66:	2201      	movs	r2, #1
 8000e68:	495b      	ldr	r1, [pc, #364]	@ (8000fd8 <segchar+0xe44>)
 8000e6a:	485c      	ldr	r0, [pc, #368]	@ (8000fdc <segchar+0xe48>)
 8000e6c:	f001 fa86 	bl	800237c <HAL_SPI_Transmit>
 8000e70:	2201      	movs	r2, #1
 8000e72:	2110      	movs	r1, #16
 8000e74:	485a      	ldr	r0, [pc, #360]	@ (8000fe0 <segchar+0xe4c>)
 8000e76:	f000 fe07 	bl	8001a88 <HAL_GPIO_WritePin>
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	4858      	ldr	r0, [pc, #352]	@ (8000fe0 <segchar+0xe4c>)
 8000e80:	f000 fe02 	bl	8001a88 <HAL_GPIO_WritePin>
 8000e84:	4b54      	ldr	r3, [pc, #336]	@ (8000fd8 <segchar+0xe44>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	f023 0302 	bic.w	r3, r3, #2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b52      	ldr	r3, [pc, #328]	@ (8000fd8 <segchar+0xe44>)
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e96:	2201      	movs	r2, #1
 8000e98:	494f      	ldr	r1, [pc, #316]	@ (8000fd8 <segchar+0xe44>)
 8000e9a:	4850      	ldr	r0, [pc, #320]	@ (8000fdc <segchar+0xe48>)
 8000e9c:	f001 fa6e 	bl	800237c <HAL_SPI_Transmit>
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	484e      	ldr	r0, [pc, #312]	@ (8000fe0 <segchar+0xe4c>)
 8000ea6:	f000 fdef 	bl	8001a88 <HAL_GPIO_WritePin>
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2110      	movs	r1, #16
 8000eae:	484c      	ldr	r0, [pc, #304]	@ (8000fe0 <segchar+0xe4c>)
 8000eb0:	f000 fdea 	bl	8001a88 <HAL_GPIO_WritePin>
 8000eb4:	4b48      	ldr	r3, [pc, #288]	@ (8000fd8 <segchar+0xe44>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b46      	ldr	r3, [pc, #280]	@ (8000fd8 <segchar+0xe44>)
 8000ec0:	701a      	strb	r2, [r3, #0]
 8000ec2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4943      	ldr	r1, [pc, #268]	@ (8000fd8 <segchar+0xe44>)
 8000eca:	4844      	ldr	r0, [pc, #272]	@ (8000fdc <segchar+0xe48>)
 8000ecc:	f001 fa56 	bl	800237c <HAL_SPI_Transmit>
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2110      	movs	r1, #16
 8000ed4:	4842      	ldr	r0, [pc, #264]	@ (8000fe0 <segchar+0xe4c>)
 8000ed6:	f000 fdd7 	bl	8001a88 <HAL_GPIO_WritePin>
 8000eda:	2200      	movs	r2, #0
 8000edc:	2110      	movs	r1, #16
 8000ede:	4840      	ldr	r0, [pc, #256]	@ (8000fe0 <segchar+0xe4c>)
 8000ee0:	f000 fdd2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000ee4:	4b3c      	ldr	r3, [pc, #240]	@ (8000fd8 <segchar+0xe44>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	f023 0308 	bic.w	r3, r3, #8
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd8 <segchar+0xe44>)
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4937      	ldr	r1, [pc, #220]	@ (8000fd8 <segchar+0xe44>)
 8000efa:	4838      	ldr	r0, [pc, #224]	@ (8000fdc <segchar+0xe48>)
 8000efc:	f001 fa3e 	bl	800237c <HAL_SPI_Transmit>
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	4836      	ldr	r0, [pc, #216]	@ (8000fe0 <segchar+0xe4c>)
 8000f06:	f000 fdbf 	bl	8001a88 <HAL_GPIO_WritePin>
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4834      	ldr	r0, [pc, #208]	@ (8000fe0 <segchar+0xe4c>)
 8000f10:	f000 fdba 	bl	8001a88 <HAL_GPIO_WritePin>
 8000f14:	4b30      	ldr	r3, [pc, #192]	@ (8000fd8 <segchar+0xe44>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <segchar+0xe44>)
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f26:	2201      	movs	r2, #1
 8000f28:	492b      	ldr	r1, [pc, #172]	@ (8000fd8 <segchar+0xe44>)
 8000f2a:	482c      	ldr	r0, [pc, #176]	@ (8000fdc <segchar+0xe48>)
 8000f2c:	f001 fa26 	bl	800237c <HAL_SPI_Transmit>
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	482a      	ldr	r0, [pc, #168]	@ (8000fe0 <segchar+0xe4c>)
 8000f36:	f000 fda7 	bl	8001a88 <HAL_GPIO_WritePin>
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	4828      	ldr	r0, [pc, #160]	@ (8000fe0 <segchar+0xe4c>)
 8000f40:	f000 fda2 	bl	8001a88 <HAL_GPIO_WritePin>
 8000f44:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <segchar+0xe44>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	f023 0320 	bic.w	r3, r3, #32
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <segchar+0xe44>)
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f56:	2201      	movs	r2, #1
 8000f58:	491f      	ldr	r1, [pc, #124]	@ (8000fd8 <segchar+0xe44>)
 8000f5a:	4820      	ldr	r0, [pc, #128]	@ (8000fdc <segchar+0xe48>)
 8000f5c:	f001 fa0e 	bl	800237c <HAL_SPI_Transmit>
 8000f60:	2201      	movs	r2, #1
 8000f62:	2110      	movs	r1, #16
 8000f64:	481e      	ldr	r0, [pc, #120]	@ (8000fe0 <segchar+0xe4c>)
 8000f66:	f000 fd8f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <segchar+0xe4c>)
 8000f70:	f000 fd8a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <segchar+0xe44>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <segchar+0xe44>)
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000f86:	2201      	movs	r2, #1
 8000f88:	4913      	ldr	r1, [pc, #76]	@ (8000fd8 <segchar+0xe44>)
 8000f8a:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <segchar+0xe48>)
 8000f8c:	f001 f9f6 	bl	800237c <HAL_SPI_Transmit>
 8000f90:	2201      	movs	r2, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <segchar+0xe4c>)
 8000f96:	f000 fd77 	bl	8001a88 <HAL_GPIO_WritePin>
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <segchar+0xe4c>)
 8000fa0:	f000 fd72 	bl	8001a88 <HAL_GPIO_WritePin>
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <segchar+0xe44>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <segchar+0xe44>)
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <segchar+0xe44>)
 8000fba:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <segchar+0xe48>)
 8000fbc:	f001 f9de 	bl	800237c <HAL_SPI_Transmit>
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <segchar+0xe4c>)
 8000fc6:	f000 fd5f 	bl	8001a88 <HAL_GPIO_WritePin>
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <segchar+0xe4c>)
 8000fd0:	f000 fd5a 	bl	8001a88 <HAL_GPIO_WritePin>
 8000fd4:	e0c7      	b.n	8001166 <segchar+0xfd2>
 8000fd6:	bf00      	nop
 8000fd8:	20000080 	.word	0x20000080
 8000fdc:	20000028 	.word	0x20000028
 8000fe0:	40010800 	.word	0x40010800
	case 0:	SA_SET;   SB_SET;   SC_SET;   SD_SET;   SE_SET;   SF_SET;   SG_RESET; SH_RESET; break;
 8000fe4:	4b62      	ldr	r3, [pc, #392]	@ (8001170 <segchar+0xfdc>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f023 0301 	bic.w	r3, r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b60      	ldr	r3, [pc, #384]	@ (8001170 <segchar+0xfdc>)
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	495d      	ldr	r1, [pc, #372]	@ (8001170 <segchar+0xfdc>)
 8000ffa:	485e      	ldr	r0, [pc, #376]	@ (8001174 <segchar+0xfe0>)
 8000ffc:	f001 f9be 	bl	800237c <HAL_SPI_Transmit>
 8001000:	2201      	movs	r2, #1
 8001002:	2110      	movs	r1, #16
 8001004:	485c      	ldr	r0, [pc, #368]	@ (8001178 <segchar+0xfe4>)
 8001006:	f000 fd3f 	bl	8001a88 <HAL_GPIO_WritePin>
 800100a:	2200      	movs	r2, #0
 800100c:	2110      	movs	r1, #16
 800100e:	485a      	ldr	r0, [pc, #360]	@ (8001178 <segchar+0xfe4>)
 8001010:	f000 fd3a 	bl	8001a88 <HAL_GPIO_WritePin>
 8001014:	4b56      	ldr	r3, [pc, #344]	@ (8001170 <segchar+0xfdc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f023 0302 	bic.w	r3, r3, #2
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b54      	ldr	r3, [pc, #336]	@ (8001170 <segchar+0xfdc>)
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001026:	2201      	movs	r2, #1
 8001028:	4951      	ldr	r1, [pc, #324]	@ (8001170 <segchar+0xfdc>)
 800102a:	4852      	ldr	r0, [pc, #328]	@ (8001174 <segchar+0xfe0>)
 800102c:	f001 f9a6 	bl	800237c <HAL_SPI_Transmit>
 8001030:	2201      	movs	r2, #1
 8001032:	2110      	movs	r1, #16
 8001034:	4850      	ldr	r0, [pc, #320]	@ (8001178 <segchar+0xfe4>)
 8001036:	f000 fd27 	bl	8001a88 <HAL_GPIO_WritePin>
 800103a:	2200      	movs	r2, #0
 800103c:	2110      	movs	r1, #16
 800103e:	484e      	ldr	r0, [pc, #312]	@ (8001178 <segchar+0xfe4>)
 8001040:	f000 fd22 	bl	8001a88 <HAL_GPIO_WritePin>
 8001044:	4b4a      	ldr	r3, [pc, #296]	@ (8001170 <segchar+0xfdc>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b48      	ldr	r3, [pc, #288]	@ (8001170 <segchar+0xfdc>)
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001056:	2201      	movs	r2, #1
 8001058:	4945      	ldr	r1, [pc, #276]	@ (8001170 <segchar+0xfdc>)
 800105a:	4846      	ldr	r0, [pc, #280]	@ (8001174 <segchar+0xfe0>)
 800105c:	f001 f98e 	bl	800237c <HAL_SPI_Transmit>
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	4844      	ldr	r0, [pc, #272]	@ (8001178 <segchar+0xfe4>)
 8001066:	f000 fd0f 	bl	8001a88 <HAL_GPIO_WritePin>
 800106a:	2200      	movs	r2, #0
 800106c:	2110      	movs	r1, #16
 800106e:	4842      	ldr	r0, [pc, #264]	@ (8001178 <segchar+0xfe4>)
 8001070:	f000 fd0a 	bl	8001a88 <HAL_GPIO_WritePin>
 8001074:	4b3e      	ldr	r3, [pc, #248]	@ (8001170 <segchar+0xfdc>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f023 0308 	bic.w	r3, r3, #8
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <segchar+0xfdc>)
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001086:	2201      	movs	r2, #1
 8001088:	4939      	ldr	r1, [pc, #228]	@ (8001170 <segchar+0xfdc>)
 800108a:	483a      	ldr	r0, [pc, #232]	@ (8001174 <segchar+0xfe0>)
 800108c:	f001 f976 	bl	800237c <HAL_SPI_Transmit>
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	4838      	ldr	r0, [pc, #224]	@ (8001178 <segchar+0xfe4>)
 8001096:	f000 fcf7 	bl	8001a88 <HAL_GPIO_WritePin>
 800109a:	2200      	movs	r2, #0
 800109c:	2110      	movs	r1, #16
 800109e:	4836      	ldr	r0, [pc, #216]	@ (8001178 <segchar+0xfe4>)
 80010a0:	f000 fcf2 	bl	8001a88 <HAL_GPIO_WritePin>
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <segchar+0xfdc>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f023 0310 	bic.w	r3, r3, #16
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <segchar+0xfdc>)
 80010b0:	701a      	strb	r2, [r3, #0]
 80010b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010b6:	2201      	movs	r2, #1
 80010b8:	492d      	ldr	r1, [pc, #180]	@ (8001170 <segchar+0xfdc>)
 80010ba:	482e      	ldr	r0, [pc, #184]	@ (8001174 <segchar+0xfe0>)
 80010bc:	f001 f95e 	bl	800237c <HAL_SPI_Transmit>
 80010c0:	2201      	movs	r2, #1
 80010c2:	2110      	movs	r1, #16
 80010c4:	482c      	ldr	r0, [pc, #176]	@ (8001178 <segchar+0xfe4>)
 80010c6:	f000 fcdf 	bl	8001a88 <HAL_GPIO_WritePin>
 80010ca:	2200      	movs	r2, #0
 80010cc:	2110      	movs	r1, #16
 80010ce:	482a      	ldr	r0, [pc, #168]	@ (8001178 <segchar+0xfe4>)
 80010d0:	f000 fcda 	bl	8001a88 <HAL_GPIO_WritePin>
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <segchar+0xfdc>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f023 0320 	bic.w	r3, r3, #32
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <segchar+0xfdc>)
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010e6:	2201      	movs	r2, #1
 80010e8:	4921      	ldr	r1, [pc, #132]	@ (8001170 <segchar+0xfdc>)
 80010ea:	4822      	ldr	r0, [pc, #136]	@ (8001174 <segchar+0xfe0>)
 80010ec:	f001 f946 	bl	800237c <HAL_SPI_Transmit>
 80010f0:	2201      	movs	r2, #1
 80010f2:	2110      	movs	r1, #16
 80010f4:	4820      	ldr	r0, [pc, #128]	@ (8001178 <segchar+0xfe4>)
 80010f6:	f000 fcc7 	bl	8001a88 <HAL_GPIO_WritePin>
 80010fa:	2200      	movs	r2, #0
 80010fc:	2110      	movs	r1, #16
 80010fe:	481e      	ldr	r0, [pc, #120]	@ (8001178 <segchar+0xfe4>)
 8001100:	f000 fcc2 	bl	8001a88 <HAL_GPIO_WritePin>
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <segchar+0xfdc>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <segchar+0xfdc>)
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001116:	2201      	movs	r2, #1
 8001118:	4915      	ldr	r1, [pc, #84]	@ (8001170 <segchar+0xfdc>)
 800111a:	4816      	ldr	r0, [pc, #88]	@ (8001174 <segchar+0xfe0>)
 800111c:	f001 f92e 	bl	800237c <HAL_SPI_Transmit>
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4814      	ldr	r0, [pc, #80]	@ (8001178 <segchar+0xfe4>)
 8001126:	f000 fcaf 	bl	8001a88 <HAL_GPIO_WritePin>
 800112a:	2200      	movs	r2, #0
 800112c:	2110      	movs	r1, #16
 800112e:	4812      	ldr	r0, [pc, #72]	@ (8001178 <segchar+0xfe4>)
 8001130:	f000 fcaa 	bl	8001a88 <HAL_GPIO_WritePin>
 8001134:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <segchar+0xfdc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <segchar+0xfdc>)
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001146:	2201      	movs	r2, #1
 8001148:	4909      	ldr	r1, [pc, #36]	@ (8001170 <segchar+0xfdc>)
 800114a:	480a      	ldr	r0, [pc, #40]	@ (8001174 <segchar+0xfe0>)
 800114c:	f001 f916 	bl	800237c <HAL_SPI_Transmit>
 8001150:	2201      	movs	r2, #1
 8001152:	2110      	movs	r1, #16
 8001154:	4808      	ldr	r0, [pc, #32]	@ (8001178 <segchar+0xfe4>)
 8001156:	f000 fc97 	bl	8001a88 <HAL_GPIO_WritePin>
 800115a:	2200      	movs	r2, #0
 800115c:	2110      	movs	r1, #16
 800115e:	4806      	ldr	r0, [pc, #24]	@ (8001178 <segchar+0xfe4>)
 8001160:	f000 fc92 	bl	8001a88 <HAL_GPIO_WritePin>
 8001164:	bf00      	nop
  }

}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000080 	.word	0x20000080
 8001174:	20000028 	.word	0x20000028
 8001178:	40010800 	.word	0x40010800

0800117c <main>:

uint8_t aTxBuffer[1]={0};


int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  HAL_Init();
 8001182:	f000 f99b 	bl	80014bc <HAL_Init>
  SystemClock_Config();
 8001186:	f000 f81c 	bl	80011c2 <SystemClock_Config>

  MX_GPIO_Init();
 800118a:	f000 f88b 	bl	80012a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800118e:	f000 f853 	bl	8001238 <MX_SPI1_Init>


  initSegment();
 8001192:	f7fe ffdb 	bl	800014c <initSegment>
  HAL_Delay(200);
 8001196:	20c8      	movs	r0, #200	@ 0xc8
 8001198:	f000 f9f2 	bl	8001580 <HAL_Delay>


  while (1)
  {
	  for(int i=0;i<=9;i++)
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	e00b      	b.n	80011ba <main+0x3e>
	  {
		  segchar(i);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7fe fff4 	bl	8000194 <segchar>
		  HAL_Delay(1000);
 80011ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b0:	f000 f9e6 	bl	8001580 <HAL_Delay>
	  for(int i=0;i<=9;i++)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3301      	adds	r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	ddf0      	ble.n	80011a2 <main+0x26>
 80011c0:	e7ec      	b.n	800119c <main+0x20>

080011c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b090      	sub	sp, #64	@ 0x40
 80011c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	2228      	movs	r2, #40	@ 0x28
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fabd 	bl	8002750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2310      	movs	r3, #16
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fc5d 	bl	8001ab8 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001204:	f000 f880 	bl	8001308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fecb 	bl	8001fbc <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800122c:	f000 f86c 	bl	8001308 <Error_Handler>
  }
}
 8001230:	bf00      	nop
 8001232:	3740      	adds	r7, #64	@ 0x40
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <MX_SPI1_Init+0x64>)
 800123e:	4a18      	ldr	r2, [pc, #96]	@ (80012a0 <MX_SPI1_Init+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_SPI1_Init+0x64>)
 8001244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_SPI1_Init+0x64>)
 8001264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_SPI1_Init+0x64>)
 8001284:	220a      	movs	r2, #10
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_SPI1_Init+0x64>)
 800128a:	f000 fff3 	bl	8002274 <HAL_SPI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001294:	f000 f838 	bl	8001308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000028 	.word	0x20000028
 80012a0:	40013000 	.word	0x40013000

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_GPIO_Init+0x5c>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <MX_GPIO_Init+0x5c>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_GPIO_Init+0x5c>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2110      	movs	r1, #16
 80012d4:	480b      	ldr	r0, [pc, #44]	@ (8001304 <MX_GPIO_Init+0x60>)
 80012d6:	f000 fbd7 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012da:	2310      	movs	r3, #16
 80012dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2302      	movs	r3, #2
 80012e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_GPIO_Init+0x60>)
 80012f2:	f000 fa4d 	bl	8001790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000
 8001304:	40010800 	.word	0x40010800

08001308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130c:	b672      	cpsid	i
}
 800130e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <Error_Handler+0x8>

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_MspInit+0x5c>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <HAL_MspInit+0x5c>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6193      	str	r3, [r2, #24]
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_MspInit+0x5c>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_MspInit+0x5c>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <HAL_MspInit+0x5c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <HAL_MspInit+0x5c>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_MspInit+0x60>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_MspInit+0x60>)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <HAL_SPI_MspInit+0x88>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d12f      	bne.n	80013f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 800139e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a13      	ldr	r2, [pc, #76]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_SPI_MspInit+0x8c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013c8:	23a0      	movs	r3, #160	@ 0xa0
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	@ (8001408 <HAL_SPI_MspInit+0x90>)
 80013dc:	f000 f9d8 	bl	8001790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e0:	2340      	movs	r3, #64	@ 0x40
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <HAL_SPI_MspInit+0x90>)
 80013f4:	f000 f9cc 	bl	8001790 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013000 	.word	0x40013000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <NMI_Handler+0x4>

08001414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <MemManage_Handler+0x4>

08001424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <UsageFault_Handler+0x4>

08001434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145c:	f000 f874 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001470:	f7ff fff8 	bl	8001464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001474:	480b      	ldr	r0, [pc, #44]	@ (80014a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001476:	490c      	ldr	r1, [pc, #48]	@ (80014a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001478:	4a0c      	ldr	r2, [pc, #48]	@ (80014ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800147c:	e002      	b.n	8001484 <LoopCopyDataInit>

0800147e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001482:	3304      	adds	r3, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001488:	d3f9      	bcc.n	800147e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148a:	4a09      	ldr	r2, [pc, #36]	@ (80014b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800148c:	4c09      	ldr	r4, [pc, #36]	@ (80014b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001490:	e001      	b.n	8001496 <LoopFillZerobss>

08001492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001494:	3204      	adds	r2, #4

08001496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001498:	d3fb      	bcc.n	8001492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149a:	f001 f961 	bl	8002760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149e:	f7ff fe6d 	bl	800117c <main>
  bx lr
 80014a2:	4770      	bx	lr
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014ac:	080027ec 	.word	0x080027ec
  ldr r2, =_sbss
 80014b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b4:	20000088 	.word	0x20000088

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <HAL_Init+0x28>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <HAL_Init+0x28>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f92b 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff ff1c 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f935 	bl	8001776 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f90b 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20000008 	.word	0x20000008
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_IncTick+0x1c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <HAL_IncTick+0x20>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a03      	ldr	r2, [pc, #12]	@ (8001568 <HAL_IncTick+0x20>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	20000008 	.word	0x20000008
 8001568:	20000084 	.word	0x20000084

0800156c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b02      	ldr	r3, [pc, #8]	@ (800157c <HAL_GetTick+0x10>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000084 	.word	0x20000084

08001580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff fff0 	bl	800156c <HAL_GetTick>
 800158c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d005      	beq.n	80015a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_Delay+0x44>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a6:	bf00      	nop
 80015a8:	f7ff ffe0 	bl	800156c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d8f7      	bhi.n	80015a8 <HAL_Delay+0x28>
  {
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	@ (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	@ (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	@ 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	@ 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff90 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff49 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff5e 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffb0 	bl	80016e4 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b08b      	sub	sp, #44	@ 0x2c
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	e161      	b.n	8001a68 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017a4:	2201      	movs	r2, #1
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 8150 	bne.w	8001a62 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a97      	ldr	r2, [pc, #604]	@ (8001a24 <HAL_GPIO_Init+0x294>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d05e      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017cc:	4a95      	ldr	r2, [pc, #596]	@ (8001a24 <HAL_GPIO_Init+0x294>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d875      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017d2:	4a95      	ldr	r2, [pc, #596]	@ (8001a28 <HAL_GPIO_Init+0x298>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d058      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017d8:	4a93      	ldr	r2, [pc, #588]	@ (8001a28 <HAL_GPIO_Init+0x298>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d86f      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017de:	4a93      	ldr	r2, [pc, #588]	@ (8001a2c <HAL_GPIO_Init+0x29c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d052      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017e4:	4a91      	ldr	r2, [pc, #580]	@ (8001a2c <HAL_GPIO_Init+0x29c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d869      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017ea:	4a91      	ldr	r2, [pc, #580]	@ (8001a30 <HAL_GPIO_Init+0x2a0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d04c      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017f0:	4a8f      	ldr	r2, [pc, #572]	@ (8001a30 <HAL_GPIO_Init+0x2a0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d863      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017f6:	4a8f      	ldr	r2, [pc, #572]	@ (8001a34 <HAL_GPIO_Init+0x2a4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d046      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017fc:	4a8d      	ldr	r2, [pc, #564]	@ (8001a34 <HAL_GPIO_Init+0x2a4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d85d      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 8001802:	2b12      	cmp	r3, #18
 8001804:	d82a      	bhi.n	800185c <HAL_GPIO_Init+0xcc>
 8001806:	2b12      	cmp	r3, #18
 8001808:	d859      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 800180a:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <HAL_GPIO_Init+0x80>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	0800188b 	.word	0x0800188b
 8001814:	08001865 	.word	0x08001865
 8001818:	08001877 	.word	0x08001877
 800181c:	080018b9 	.word	0x080018b9
 8001820:	080018bf 	.word	0x080018bf
 8001824:	080018bf 	.word	0x080018bf
 8001828:	080018bf 	.word	0x080018bf
 800182c:	080018bf 	.word	0x080018bf
 8001830:	080018bf 	.word	0x080018bf
 8001834:	080018bf 	.word	0x080018bf
 8001838:	080018bf 	.word	0x080018bf
 800183c:	080018bf 	.word	0x080018bf
 8001840:	080018bf 	.word	0x080018bf
 8001844:	080018bf 	.word	0x080018bf
 8001848:	080018bf 	.word	0x080018bf
 800184c:	080018bf 	.word	0x080018bf
 8001850:	080018bf 	.word	0x080018bf
 8001854:	0800186d 	.word	0x0800186d
 8001858:	08001881 	.word	0x08001881
 800185c:	4a76      	ldr	r2, [pc, #472]	@ (8001a38 <HAL_GPIO_Init+0x2a8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001862:	e02c      	b.n	80018be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e029      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	3304      	adds	r3, #4
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e024      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	3308      	adds	r3, #8
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e01f      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	330c      	adds	r3, #12
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e01a      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001892:	2304      	movs	r3, #4
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e013      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a0:	2308      	movs	r3, #8
 80018a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	611a      	str	r2, [r3, #16]
          break;
 80018aa:	e009      	b.n	80018c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	615a      	str	r2, [r3, #20]
          break;
 80018b6:	e003      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          break;
 80018be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2bff      	cmp	r3, #255	@ 0xff
 80018c4:	d801      	bhi.n	80018ca <HAL_GPIO_Init+0x13a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e001      	b.n	80018ce <HAL_GPIO_Init+0x13e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	@ 0xff
 80018d4:	d802      	bhi.n	80018dc <HAL_GPIO_Init+0x14c>
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0x152>
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	3b08      	subs	r3, #8
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	210f      	movs	r1, #15
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80a9 	beq.w	8001a62 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001910:	4b4a      	ldr	r3, [pc, #296]	@ (8001a3c <HAL_GPIO_Init+0x2ac>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a49      	ldr	r2, [pc, #292]	@ (8001a3c <HAL_GPIO_Init+0x2ac>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b47      	ldr	r3, [pc, #284]	@ (8001a3c <HAL_GPIO_Init+0x2ac>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001928:	4a45      	ldr	r2, [pc, #276]	@ (8001a40 <HAL_GPIO_Init+0x2b0>)
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a44 <HAL_GPIO_Init+0x2b4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d00d      	beq.n	8001970 <HAL_GPIO_Init+0x1e0>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3c      	ldr	r2, [pc, #240]	@ (8001a48 <HAL_GPIO_Init+0x2b8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x1dc>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a4c <HAL_GPIO_Init+0x2bc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d101      	bne.n	8001968 <HAL_GPIO_Init+0x1d8>
 8001964:	2302      	movs	r3, #2
 8001966:	e004      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 8001968:	2303      	movs	r3, #3
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_GPIO_Init+0x1e2>
 8001970:	2300      	movs	r3, #0
 8001972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001974:	f002 0203 	and.w	r2, r2, #3
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	4093      	lsls	r3, r2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001982:	492f      	ldr	r1, [pc, #188]	@ (8001a40 <HAL_GPIO_Init+0x2b0>)
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800199c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	492b      	ldr	r1, [pc, #172]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019aa:	4b29      	ldr	r3, [pc, #164]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4927      	ldr	r1, [pc, #156]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c4:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4921      	ldr	r1, [pc, #132]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	491d      	ldr	r1, [pc, #116]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019ec:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4917      	ldr	r1, [pc, #92]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4913      	ldr	r1, [pc, #76]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01f      	beq.n	8001a54 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	490d      	ldr	r1, [pc, #52]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e01f      	b.n	8001a62 <HAL_GPIO_Init+0x2d2>
 8001a22:	bf00      	nop
 8001a24:	10320000 	.word	0x10320000
 8001a28:	10310000 	.word	0x10310000
 8001a2c:	10220000 	.word	0x10220000
 8001a30:	10210000 	.word	0x10210000
 8001a34:	10120000 	.word	0x10120000
 8001a38:	10110000 	.word	0x10110000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40010800 	.word	0x40010800
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	40011000 	.word	0x40011000
 8001a50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_GPIO_Init+0x2f4>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4909      	ldr	r1, [pc, #36]	@ (8001a84 <HAL_GPIO_Init+0x2f4>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	3301      	adds	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f47f ae96 	bne.w	80017a4 <HAL_GPIO_Init+0x14>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	372c      	adds	r7, #44	@ 0x2c
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e272      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8087 	beq.w	8001be6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad8:	4b92      	ldr	r3, [pc, #584]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	d00c      	beq.n	8001afe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae4:	4b8f      	ldr	r3, [pc, #572]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d112      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5e>
 8001af0:	4b8c      	ldr	r3, [pc, #560]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001afc:	d10b      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afe:	4b89      	ldr	r3, [pc, #548]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d06c      	beq.n	8001be4 <HAL_RCC_OscConfig+0x12c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d168      	bne.n	8001be4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e24c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1e:	d106      	bne.n	8001b2e <HAL_RCC_OscConfig+0x76>
 8001b20:	4b80      	ldr	r3, [pc, #512]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a7f      	ldr	r2, [pc, #508]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e02e      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x98>
 8001b36:	4b7b      	ldr	r3, [pc, #492]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7a      	ldr	r2, [pc, #488]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b78      	ldr	r3, [pc, #480]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a77      	ldr	r2, [pc, #476]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0xbc>
 8001b5a:	4b72      	ldr	r3, [pc, #456]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a71      	ldr	r2, [pc, #452]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b6f      	ldr	r3, [pc, #444]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xd4>
 8001b74:	4b6b      	ldr	r3, [pc, #428]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6a      	ldr	r2, [pc, #424]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b68      	ldr	r3, [pc, #416]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a67      	ldr	r2, [pc, #412]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fcea 	bl	800156c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fce6 	bl	800156c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e200      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b5d      	ldr	r3, [pc, #372]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xe4>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fcd6 	bl	800156c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcd2 	bl	800156c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	@ 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1ec      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	4b53      	ldr	r3, [pc, #332]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x10c>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d063      	beq.n	8001cba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bfe:	4b49      	ldr	r3, [pc, #292]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x18c>
 8001c0a:	4b46      	ldr	r3, [pc, #280]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x176>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e1c0      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4939      	ldr	r1, [pc, #228]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b36      	ldr	r3, [pc, #216]	@ (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fc8b 	bl	800156c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fc87 	bl	800156c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1a1      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4927      	ldr	r1, [pc, #156]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4b26      	ldr	r3, [pc, #152]	@ (8001d28 <HAL_RCC_OscConfig+0x270>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fc6a 	bl	800156c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fc66 	bl	800156c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e180      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03a      	beq.n	8001d3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d019      	beq.n	8001d02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cce:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fc4a 	bl	800156c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fc46 	bl	800156c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e160      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f000 fa9c 	bl	8002238 <RCC_Delay>
 8001d00:	e01c      	b.n	8001d3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_RCC_OscConfig+0x274>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d08:	f7ff fc30 	bl	800156c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0e:	e00f      	b.n	8001d30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc2c 	bl	800156c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d908      	bls.n	8001d30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e146      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	42420000 	.word	0x42420000
 8001d2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b92      	ldr	r3, [pc, #584]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e9      	bne.n	8001d10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a6 	beq.w	8001e96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10d      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b88      	ldr	r3, [pc, #544]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a87      	ldr	r2, [pc, #540]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b85      	ldr	r3, [pc, #532]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b82      	ldr	r3, [pc, #520]	@ (8001f80 <HAL_RCC_OscConfig+0x4c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b7f      	ldr	r3, [pc, #508]	@ (8001f80 <HAL_RCC_OscConfig+0x4c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7e      	ldr	r2, [pc, #504]	@ (8001f80 <HAL_RCC_OscConfig+0x4c8>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fbed 	bl	800156c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7ff fbe9 	bl	800156c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b64      	cmp	r3, #100	@ 0x64
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e103      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b75      	ldr	r3, [pc, #468]	@ (8001f80 <HAL_RCC_OscConfig+0x4c8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x312>
 8001dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a6e      	ldr	r2, [pc, #440]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	e02d      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x334>
 8001dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a69      	ldr	r2, [pc, #420]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b67      	ldr	r3, [pc, #412]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a66      	ldr	r2, [pc, #408]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	e01c      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x356>
 8001df4:	4b61      	ldr	r3, [pc, #388]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a60      	ldr	r2, [pc, #384]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	4b5e      	ldr	r3, [pc, #376]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a5d      	ldr	r2, [pc, #372]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	e00b      	b.n	8001e26 <HAL_RCC_OscConfig+0x36e>
 8001e0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a5a      	ldr	r2, [pc, #360]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	4b58      	ldr	r3, [pc, #352]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fb9d 	bl	800156c <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff fb99 	bl	800156c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0b1      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ee      	beq.n	8001e36 <HAL_RCC_OscConfig+0x37e>
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fb87 	bl	800156c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff fb83 	bl	800156c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e09b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	4b40      	ldr	r3, [pc, #256]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1ee      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8087 	beq.w	8001fae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea0:	4b36      	ldr	r3, [pc, #216]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d061      	beq.n	8001f70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d146      	bne.n	8001f42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb4:	4b33      	ldr	r3, [pc, #204]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff fb57 	bl	800156c <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7ff fb53 	bl	800156c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e06d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed4:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f0      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eea:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4921      	ldr	r1, [pc, #132]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a19      	ldr	r1, [r3, #32]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	491b      	ldr	r1, [pc, #108]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fb27 	bl	800156c <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff fb23 	bl	800156c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e03d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x46a>
 8001f40:	e035      	b.n	8001fae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_RCC_OscConfig+0x4cc>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fb10 	bl	800156c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff fb0c 	bl	800156c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e026      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f62:	4b06      	ldr	r3, [pc, #24]	@ (8001f7c <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x498>
 8001f6e:	e01e      	b.n	8001fae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e019      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
 8001f84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_RCC_OscConfig+0x500>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0d0      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d910      	bls.n	8002000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b67      	ldr	r3, [pc, #412]	@ (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4965      	ldr	r1, [pc, #404]	@ (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b63      	ldr	r3, [pc, #396]	@ (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b8      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002018:	4b59      	ldr	r3, [pc, #356]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a58      	ldr	r2, [pc, #352]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002022:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002030:	4b53      	ldr	r3, [pc, #332]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4a52      	ldr	r2, [pc, #328]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800203a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b50      	ldr	r3, [pc, #320]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	494d      	ldr	r1, [pc, #308]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d040      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b47      	ldr	r3, [pc, #284]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e07f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b41      	ldr	r3, [pc, #260]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e073      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3d      	ldr	r3, [pc, #244]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06b      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b39      	ldr	r3, [pc, #228]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4936      	ldr	r1, [pc, #216]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7ff fa5e 	bl	800156c <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff fa5a 	bl	800156c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e053      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b27      	ldr	r3, [pc, #156]	@ (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d210      	bcs.n	800210c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	4922      	ldr	r1, [pc, #136]	@ (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e032      	b.n	8002172 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4b19      	ldr	r3, [pc, #100]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4916      	ldr	r1, [pc, #88]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002136:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	490e      	ldr	r1, [pc, #56]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214a:	f000 f821 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800214e:	4602      	mov	r2, r0
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	490a      	ldr	r1, [pc, #40]	@ (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800215c:	5ccb      	ldrb	r3, [r1, r3]
 800215e:	fa22 f303 	lsr.w	r3, r2, r3
 8002162:	4a09      	ldr	r2, [pc, #36]	@ (8002188 <HAL_RCC_ClockConfig+0x1cc>)
 8002164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_RCC_ClockConfig+0x1d0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f9bc 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000
 8002180:	40021000 	.word	0x40021000
 8002184:	080027c0 	.word	0x080027c0
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x94>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x36>
 80021be:	e027      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c0:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x98>)
 80021c2:	613b      	str	r3, [r7, #16]
      break;
 80021c4:	e027      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	0c9b      	lsrs	r3, r3, #18
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	4a17      	ldr	r2, [pc, #92]	@ (800222c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d010      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021de:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x94>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	0c5b      	lsrs	r3, r3, #17
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	4a11      	ldr	r2, [pc, #68]	@ (8002230 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	fb03 f202 	mul.w	r2, r3, r2
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e004      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a0c      	ldr	r2, [pc, #48]	@ (8002234 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	613b      	str	r3, [r7, #16]
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x98>)
 8002212:	613b      	str	r3, [r7, #16]
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	693b      	ldr	r3, [r7, #16]
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	007a1200 	.word	0x007a1200
 800222c:	080027d0 	.word	0x080027d0
 8002230:	080027e0 	.word	0x080027e0
 8002234:	003d0900 	.word	0x003d0900

08002238 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002240:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <RCC_Delay+0x34>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <RCC_Delay+0x38>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	0a5b      	lsrs	r3, r3, #9
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002254:	bf00      	nop
  }
  while (Delay --);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	60fa      	str	r2, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f9      	bne.n	8002254 <RCC_Delay+0x1c>
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000000 	.word	0x20000000
 8002270:	10624dd3 	.word	0x10624dd3

08002274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e076      	b.n	8002374 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002296:	d009      	beq.n	80022ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
 800229e:	e005      	b.n	80022ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff f856 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	431a      	orrs	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002330:	ea42 0103 	orr.w	r1, r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	0c1a      	lsrs	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f002 0204 	and.w	r2, r2, #4
 8002352:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002362:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_SPI_Transmit+0x22>
 800239a:	2302      	movs	r3, #2
 800239c:	e12d      	b.n	80025fa <HAL_SPI_Transmit+0x27e>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023a6:	f7ff f8e1 	bl	800156c <HAL_GetTick>
 80023aa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d002      	beq.n	80023c2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
 80023be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023c0:	e116      	b.n	80025f0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_SPI_Transmit+0x52>
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023d2:	e10d      	b.n	80025f0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2203      	movs	r2, #3
 80023d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	88fa      	ldrh	r2, [r7, #6]
 80023ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800241a:	d10f      	bne.n	800243c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800242a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800243a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002446:	2b40      	cmp	r3, #64	@ 0x40
 8002448:	d007      	beq.n	800245a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002462:	d14f      	bne.n	8002504 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_SPI_Transmit+0xf6>
 800246c:	8afb      	ldrh	r3, [r7, #22]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d142      	bne.n	80024f8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	1c9a      	adds	r2, r3, #2
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002496:	e02f      	b.n	80024f8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d112      	bne.n	80024cc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024aa:	881a      	ldrh	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	1c9a      	adds	r2, r3, #2
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80024ca:	e015      	b.n	80024f8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024cc:	f7ff f84e 	bl	800156c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d803      	bhi.n	80024e4 <HAL_SPI_Transmit+0x168>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d102      	bne.n	80024ea <HAL_SPI_Transmit+0x16e>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80024f6:	e07b      	b.n	80025f0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ca      	bne.n	8002498 <HAL_SPI_Transmit+0x11c>
 8002502:	e050      	b.n	80025a6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_SPI_Transmit+0x196>
 800250c:	8afb      	ldrh	r3, [r7, #22]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d144      	bne.n	800259c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002538:	e030      	b.n	800259c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b02      	cmp	r3, #2
 8002546:	d113      	bne.n	8002570 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	330c      	adds	r3, #12
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800256e:	e015      	b.n	800259c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002570:	f7fe fffc 	bl	800156c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d803      	bhi.n	8002588 <HAL_SPI_Transmit+0x20c>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d102      	bne.n	800258e <HAL_SPI_Transmit+0x212>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800259a:	e029      	b.n	80025f0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1c9      	bne.n	800253a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f000 f8b2 	bl	8002714 <SPI_EndRxTxTransaction>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	77fb      	strb	r3, [r7, #31]
 80025e6:	e003      	b.n	80025f0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80025f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002614:	f7fe ffaa 	bl	800156c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002624:	f7fe ffa2 	bl	800156c <HAL_GetTick>
 8002628:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800262a:	4b39      	ldr	r3, [pc, #228]	@ (8002710 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	015b      	lsls	r3, r3, #5
 8002630:	0d1b      	lsrs	r3, r3, #20
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263a:	e054      	b.n	80026e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d050      	beq.n	80026e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002644:	f7fe ff92 	bl	800156c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	429a      	cmp	r2, r3
 8002652:	d902      	bls.n	800265a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d13d      	bne.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002672:	d111      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800267c:	d004      	beq.n	8002688 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002686:	d107      	bne.n	8002698 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a0:	d10f      	bne.n	80026c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e017      	b.n	8002706 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	429a      	cmp	r2, r3
 8002702:	d19b      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000000 	.word	0x20000000

08002714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	2180      	movs	r1, #128	@ 0x80
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff ff6a 	bl	8002604 <SPI_WaitFlagStateUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e000      	b.n	8002748 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <memset>:
 8002750:	4603      	mov	r3, r0
 8002752:	4402      	add	r2, r0
 8002754:	4293      	cmp	r3, r2
 8002756:	d100      	bne.n	800275a <memset+0xa>
 8002758:	4770      	bx	lr
 800275a:	f803 1b01 	strb.w	r1, [r3], #1
 800275e:	e7f9      	b.n	8002754 <memset+0x4>

08002760 <__libc_init_array>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	2600      	movs	r6, #0
 8002764:	4d0c      	ldr	r5, [pc, #48]	@ (8002798 <__libc_init_array+0x38>)
 8002766:	4c0d      	ldr	r4, [pc, #52]	@ (800279c <__libc_init_array+0x3c>)
 8002768:	1b64      	subs	r4, r4, r5
 800276a:	10a4      	asrs	r4, r4, #2
 800276c:	42a6      	cmp	r6, r4
 800276e:	d109      	bne.n	8002784 <__libc_init_array+0x24>
 8002770:	f000 f81a 	bl	80027a8 <_init>
 8002774:	2600      	movs	r6, #0
 8002776:	4d0a      	ldr	r5, [pc, #40]	@ (80027a0 <__libc_init_array+0x40>)
 8002778:	4c0a      	ldr	r4, [pc, #40]	@ (80027a4 <__libc_init_array+0x44>)
 800277a:	1b64      	subs	r4, r4, r5
 800277c:	10a4      	asrs	r4, r4, #2
 800277e:	42a6      	cmp	r6, r4
 8002780:	d105      	bne.n	800278e <__libc_init_array+0x2e>
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	f855 3b04 	ldr.w	r3, [r5], #4
 8002788:	4798      	blx	r3
 800278a:	3601      	adds	r6, #1
 800278c:	e7ee      	b.n	800276c <__libc_init_array+0xc>
 800278e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002792:	4798      	blx	r3
 8002794:	3601      	adds	r6, #1
 8002796:	e7f2      	b.n	800277e <__libc_init_array+0x1e>
 8002798:	080027e4 	.word	0x080027e4
 800279c:	080027e4 	.word	0x080027e4
 80027a0:	080027e4 	.word	0x080027e4
 80027a4:	080027e8 	.word	0x080027e8

080027a8 <_init>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	bf00      	nop
 80027ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ae:	bc08      	pop	{r3}
 80027b0:	469e      	mov	lr, r3
 80027b2:	4770      	bx	lr

080027b4 <_fini>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr
