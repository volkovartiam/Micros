
ATMEGA_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000002c4  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800088  00800088  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a0  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000347  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a1  00000000  00000000  0000111f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000235  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003db  00000000  00000000  0000182d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	2f c0       	rjmp	.+94     	; 0x74 <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ec       	ldi	r30, 0xC4	; 196
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 38       	cpi	r26, 0x88	; 136
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e8       	ldi	r26, 0x88	; 136
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 39       	cpi	r26, 0x92	; 146
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	41 d0       	rcall	.+130    	; 0xdc <main>
  5a:	32 c1       	rjmp	.+612    	; 0x2c0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_ini>:
//----------------------------------------
char str[10];
//----------------------------------------
void port_ini(void)
{
	PORTD=0x00;
  5e:	12 ba       	out	0x12, r1	; 18
	DDRD=0xFF;
  60:	8f ef       	ldi	r24, 0xFF	; 255
  62:	81 bb       	out	0x11, r24	; 17
  64:	08 95       	ret

00000066 <SPI_init_SL>:
}
//----------------------------------------
void SPI_init_SL(void)
{
	DDRB |= (1<<PORTB4);//ножки SPI на выход
  66:	bc 9a       	sbi	0x17, 4	; 23
	DDRB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5));//ножки SPI на вход
  68:	87 b3       	in	r24, 0x17	; 23
  6a:	83 7d       	andi	r24, 0xD3	; 211
  6c:	87 bb       	out	0x17, r24	; 23
	SPCR = ((1<<SPE)|(1<<SPIE));//включим шину, включим прерывания
  6e:	80 ec       	ldi	r24, 0xC0	; 192
  70:	8d b9       	out	0x0d, r24	; 13
  72:	08 95       	ret

00000074 <__vector_10>:
}
//----------------------------------------
ISR(SPI_STC_vect)//прерывание SPI прием байта
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	2f 93       	push	r18
  80:	3f 93       	push	r19
  82:	4f 93       	push	r20
  84:	5f 93       	push	r21
  86:	6f 93       	push	r22
  88:	7f 93       	push	r23
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
  8e:	af 93       	push	r26
  90:	bf 93       	push	r27
  92:	cf 93       	push	r28
  94:	ef 93       	push	r30
  96:	ff 93       	push	r31
	unsigned char n;
	n = SPDR;
  98:	cf b1       	in	r28, 0x0f	; 15
	clearlcd();//очистим дисплей
  9a:	c7 d0       	rcall	.+398    	; 0x22a <clearlcd>
	setpos(0,0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	63 d0       	rcall	.+198    	; 0x16a <setpos>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  a4:	4a e0       	ldi	r20, 0x0A	; 10
  a6:	68 e8       	ldi	r22, 0x88	; 136
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	8c 2f       	mov	r24, r28
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	d5 d0       	rcall	.+426    	; 0x25a <__itoa_ncheck>
	itoa(n,str,10);
	str_lcd(str);
  b0:	88 e8       	ldi	r24, 0x88	; 136
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	c4 d0       	rcall	.+392    	; 0x23e <str_lcd>
	SPDR = n;
  b6:	cf b9       	out	0x0f, r28	; 15
}
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	cf 91       	pop	r28
  be:	bf 91       	pop	r27
  c0:	af 91       	pop	r26
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	7f 91       	pop	r23
  c8:	6f 91       	pop	r22
  ca:	5f 91       	pop	r21
  cc:	4f 91       	pop	r20
  ce:	3f 91       	pop	r19
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <main>:
//----------------------------------------
int main(void)
{
	port_ini(); //»нициализируем порты
  dc:	c0 df       	rcall	.-128    	; 0x5e <port_ini>
	LCD_ini();  //»нициализируем дисплей
  de:	63 d0       	rcall	.+198    	; 0x1a6 <LCD_ini>
	SPI_init_SL();//инициализируем SPI
  e0:	c2 df       	rcall	.-124    	; 0x66 <SPI_init_SL>
	sei();
  e2:	78 94       	sei
	clearlcd();//очистим дисплей
  e4:	a2 d0       	rcall	.+324    	; 0x22a <clearlcd>
	setpos(0,0);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	3e d0       	rcall	.+124    	; 0x16a <setpos>
	str_lcd("Hello World!");
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	a5 d0       	rcall	.+330    	; 0x23e <str_lcd>
	setpos(2,1);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	37 d0       	rcall	.+110    	; 0x16a <setpos>
	str_lcd("String 2");
  fc:	8d e6       	ldi	r24, 0x6D	; 109
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	9e d0       	rcall	.+316    	; 0x23e <str_lcd>
	setpos(4,2);
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	30 d0       	rcall	.+96     	; 0x16a <setpos>
	str_lcd("String 3");
 10a:	86 e7       	ldi	r24, 0x76	; 118
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	97 d0       	rcall	.+302    	; 0x23e <str_lcd>
	setpos(6,3);
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	29 d0       	rcall	.+82     	; 0x16a <setpos>
	str_lcd("String 4");
 118:	8f e7       	ldi	r24, 0x7F	; 127
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 d0       	rcall	.+288    	; 0x23e <str_lcd>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x42>

00000120 <sendhalfbyte>:

//----------------------------------------
void sendhalfbyte(unsigned char c)
{
	c<<=4;
	e1; //включаем линию Е
 120:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	95 e8       	ldi	r25, 0x85	; 133
 124:	9a 95       	dec	r25
 126:	f1 f7       	brne	.-4      	; 0x124 <sendhalfbyte+0x4>
 128:	00 00       	nop
	_delay_us(50);
	PORTD&=0b00001111; //стираем информацию на входах DB4-DB7, остальное не трогаем
 12a:	92 b3       	in	r25, 0x12	; 18
 12c:	9f 70       	andi	r25, 0x0F	; 15
 12e:	92 bb       	out	0x12, r25	; 18
	PORTD|=c;
 130:	92 b3       	in	r25, 0x12	; 18
﻿#include "lcd.h"

//----------------------------------------
void sendhalfbyte(unsigned char c)
{
	c<<=4;
 132:	82 95       	swap	r24
 134:	80 7f       	andi	r24, 0xF0	; 240
	e1; //включаем линию Е
	_delay_us(50);
	PORTD&=0b00001111; //стираем информацию на входах DB4-DB7, остальное не трогаем
	PORTD|=c;
 136:	89 2b       	or	r24, r25
 138:	82 bb       	out	0x12, r24	; 18
	e0; //выключаем линию Е
 13a:	93 98       	cbi	0x12, 3	; 18
 13c:	85 e8       	ldi	r24, 0x85	; 133
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <sendhalfbyte+0x1e>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <sendbyte>:
	_delay_us(50);
}
//----------------------------------------
void sendbyte(unsigned char c, unsigned char mode)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	if (mode==0) rs0;
 14a:	61 11       	cpse	r22, r1
 14c:	02 c0       	rjmp	.+4      	; 0x152 <sendbyte+0xc>
 14e:	92 98       	cbi	0x12, 2	; 18
 150:	01 c0       	rjmp	.+2      	; 0x154 <sendbyte+0xe>
	else         rs1;
 152:	92 9a       	sbi	0x12, 2	; 18
	unsigned char hc=0;
	hc=c>>4;
	sendhalfbyte(hc); sendhalfbyte(c);
 154:	8c 2f       	mov	r24, r28
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	e2 df       	rcall	.-60     	; 0x120 <sendhalfbyte>
 15c:	8c 2f       	mov	r24, r28
 15e:	e0 df       	rcall	.-64     	; 0x120 <sendhalfbyte>
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <sendcharlcd>:
//----------------------------------------
void sendcharlcd(unsigned char c)
{
	sendbyte(c,1);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	ef df       	rcall	.-34     	; 0x146 <sendbyte>
 168:	08 95       	ret

0000016a <setpos>:
}
//----------------------------------------
void setpos(unsigned char x, unsigned y)
{
	switch(y)
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	71 05       	cpc	r23, r1
 16e:	61 f0       	breq	.+24     	; 0x188 <setpos+0x1e>
 170:	38 f0       	brcs	.+14     	; 0x180 <setpos+0x16>
 172:	62 30       	cpi	r22, 0x02	; 2
 174:	71 05       	cpc	r23, r1
 176:	69 f0       	breq	.+26     	; 0x192 <setpos+0x28>
 178:	63 30       	cpi	r22, 0x03	; 3
 17a:	71 05       	cpc	r23, r1
 17c:	79 f0       	breq	.+30     	; 0x19c <setpos+0x32>
 17e:	08 95       	ret
	{
		case 0:
		sendbyte(x|0x80,0);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	80 68       	ori	r24, 0x80	; 128
 184:	e0 df       	rcall	.-64     	; 0x146 <sendbyte>
		break;
 186:	08 95       	ret
		case 1:
		sendbyte((0x40+x)|0x80,0);
 188:	80 5c       	subi	r24, 0xC0	; 192
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	db df       	rcall	.-74     	; 0x146 <sendbyte>
		break;
 190:	08 95       	ret
		case 2:
		sendbyte((0x14+x)|0x80,0);
 192:	8c 5e       	subi	r24, 0xEC	; 236
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	80 68       	ori	r24, 0x80	; 128
 198:	d6 df       	rcall	.-84     	; 0x146 <sendbyte>
		break;
 19a:	08 95       	ret
		case 3:
		sendbyte((0x54+x)|0x80,0);
 19c:	8c 5a       	subi	r24, 0xAC	; 172
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	d1 df       	rcall	.-94     	; 0x146 <sendbyte>
 1a4:	08 95       	ret

000001a6 <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8f e2       	ldi	r24, 0x2F	; 47
 1a8:	95 e7       	ldi	r25, 0x75	; 117
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_ini+0x4>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_ini+0xa>
 1b0:	00 00       	nop
}
//----------------------------------------
void LCD_ini(void)
{
	_delay_ms(15); //Ждем 15 мс (стр 45)
	sendhalfbyte(0b00000011);
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	b5 df       	rcall	.-150    	; 0x120 <sendhalfbyte>
 1b6:	8f e3       	ldi	r24, 0x3F	; 63
 1b8:	9f e1       	ldi	r25, 0x1F	; 31
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_ini+0x14>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_ini+0x1a>
 1c0:	00 00       	nop
	_delay_ms(4);
	sendhalfbyte(0b00000011);
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	ad df       	rcall	.-166    	; 0x120 <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	87 ec       	ldi	r24, 0xC7	; 199
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_ini+0x24>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_ini+0x2a>
 1d0:	00 00       	nop
	_delay_us(100);
	sendhalfbyte(0b00000011);
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	a5 df       	rcall	.-182    	; 0x120 <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d6:	8f ec       	ldi	r24, 0xCF	; 207
 1d8:	97 e0       	ldi	r25, 0x07	; 7
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_ini+0x34>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_ini+0x3a>
 1e0:	00 00       	nop
	_delay_ms(1);
	sendhalfbyte(0b00000010);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	9d df       	rcall	.-198    	; 0x120 <sendhalfbyte>
 1e6:	8f ec       	ldi	r24, 0xCF	; 207
 1e8:	97 e0       	ldi	r25, 0x07	; 7
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCD_ini+0x44>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <LCD_ini+0x4a>
 1f0:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00101000, 0); //4бит-режим (DL=0) и 2 линии (N=1)
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	a7 df       	rcall	.-178    	; 0x146 <sendbyte>
 1f8:	8f ec       	ldi	r24, 0xCF	; 207
 1fa:	97 e0       	ldi	r25, 0x07	; 7
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_ini+0x56>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_ini+0x5c>
 202:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00001100, 0); //включаем изображение на дисплее (D=1), курсоры никакие не включаем (C=0, B=0)
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	9e df       	rcall	.-196    	; 0x146 <sendbyte>
 20a:	8f ec       	ldi	r24, 0xCF	; 207
 20c:	97 e0       	ldi	r25, 0x07	; 7
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_ini+0x68>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_ini+0x6e>
 214:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00000110, 0); //курсор (хоть он у нас и невидимый) будет двигаться влево
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	95 df       	rcall	.-214    	; 0x146 <sendbyte>
 21c:	8f ec       	ldi	r24, 0xCF	; 207
 21e:	97 e0       	ldi	r25, 0x07	; 7
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCD_ini+0x7a>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCD_ini+0x80>
 226:	00 00       	nop
 228:	08 95       	ret

0000022a <clearlcd>:
	_delay_ms(1);
}
//----------------------------------------
void clearlcd(void)
{
	sendbyte(0b00000001, 0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	8b df       	rcall	.-234    	; 0x146 <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	87 eb       	ldi	r24, 0xB7	; 183
 232:	9b e0       	ldi	r25, 0x0B	; 11
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <clearlcd+0xa>
 238:	00 c0       	rjmp	.+0      	; 0x23a <clearlcd+0x10>
 23a:	00 00       	nop
 23c:	08 95       	ret

0000023e <str_lcd>:
	_delay_us(1500);
}
//----------------------------------------
void str_lcd (char str1[])
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
 244:	88 81       	ld	r24, Y
 246:	88 23       	and	r24, r24
 248:	29 f0       	breq	.+10     	; 0x254 <str_lcd+0x16>
 24a:	21 96       	adiw	r28, 0x01	; 1
	sendcharlcd(str1[n]);
 24c:	8b df       	rcall	.-234    	; 0x164 <sendcharlcd>
}
//----------------------------------------
void str_lcd (char str1[])
{
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
 24e:	89 91       	ld	r24, Y+
 250:	81 11       	cpse	r24, r1
 252:	fc cf       	rjmp	.-8      	; 0x24c <str_lcd+0xe>
	sendcharlcd(str1[n]);
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <__itoa_ncheck>:
 25a:	bb 27       	eor	r27, r27
 25c:	4a 30       	cpi	r20, 0x0A	; 10
 25e:	31 f4       	brne	.+12     	; 0x26c <__itoa_ncheck+0x12>
 260:	99 23       	and	r25, r25
 262:	22 f4       	brpl	.+8      	; 0x26c <__itoa_ncheck+0x12>
 264:	bd e2       	ldi	r27, 0x2D	; 45
 266:	90 95       	com	r25
 268:	81 95       	neg	r24
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	01 c0       	rjmp	.+2      	; 0x270 <__utoa_common>

0000026e <__utoa_ncheck>:
 26e:	bb 27       	eor	r27, r27

00000270 <__utoa_common>:
 270:	fb 01       	movw	r30, r22
 272:	55 27       	eor	r21, r21
 274:	aa 27       	eor	r26, r26
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	aa 1f       	adc	r26, r26
 27c:	a4 17       	cp	r26, r20
 27e:	10 f0       	brcs	.+4      	; 0x284 <__utoa_common+0x14>
 280:	a4 1b       	sub	r26, r20
 282:	83 95       	inc	r24
 284:	50 51       	subi	r21, 0x10	; 16
 286:	b9 f7       	brne	.-18     	; 0x276 <__utoa_common+0x6>
 288:	a0 5d       	subi	r26, 0xD0	; 208
 28a:	aa 33       	cpi	r26, 0x3A	; 58
 28c:	08 f0       	brcs	.+2      	; 0x290 <__utoa_common+0x20>
 28e:	a9 5d       	subi	r26, 0xD9	; 217
 290:	a1 93       	st	Z+, r26
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	79 f7       	brne	.-34     	; 0x274 <__utoa_common+0x4>
 296:	b1 11       	cpse	r27, r1
 298:	b1 93       	st	Z+, r27
 29a:	11 92       	st	Z+, r1
 29c:	cb 01       	movw	r24, r22
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <strrev>

000002a0 <strrev>:
 2a0:	dc 01       	movw	r26, r24
 2a2:	fc 01       	movw	r30, r24
 2a4:	67 2f       	mov	r22, r23
 2a6:	71 91       	ld	r23, Z+
 2a8:	77 23       	and	r23, r23
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <strrev+0x4>
 2ac:	32 97       	sbiw	r30, 0x02	; 2
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <strrev+0x18>
 2b0:	7c 91       	ld	r23, X
 2b2:	6d 93       	st	X+, r22
 2b4:	70 83       	st	Z, r23
 2b6:	62 91       	ld	r22, -Z
 2b8:	ae 17       	cp	r26, r30
 2ba:	bf 07       	cpc	r27, r31
 2bc:	c8 f3       	brcs	.-14     	; 0x2b0 <strrev+0x10>
 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
