
Atmega328P_SPI_Dinamic_IND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba1  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00000f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000485  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000410  00000000  00000000  000020b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000024c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	89 00       	.word	0x0089	; ????
  6a:	5c 00       	.word	0x005c	; ????
  6c:	61 00       	.word	0x0061	; ????
  6e:	66 00       	.word	0x0066	; ????
  70:	6b 00       	.word	0x006b	; ????
  72:	70 00       	.word	0x0070	; ????
  74:	75 00       	.word	0x0075	; ????
  76:	7a 00       	.word	0x007a	; ????
  78:	7f 00       	.word	0x007f	; ????
  7a:	84 00       	.word	0x0084	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:


int main(void)
{
	
	SPI_init();
  94:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SPI_init>
	
    while (1) 
    {
		ledprint(6789);
  98:	85 e8       	ldi	r24, 0x85	; 133
  9a:	9a e1       	ldi	r25, 0x1A	; 26
  9c:	0e 94 8e 00 	call	0x11c	; 0x11c <ledprint>
  a0:	fb cf       	rjmp	.-10     	; 0x98 <main+0x4>

000000a2 <displayNumber>:
 */ 

#include "segment_ind.h"

void displayNumber(int number){
	SPI_transmit(number);
  a2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SPI_transmit>
  a6:	08 95       	ret

000000a8 <segchar>:
}

void segchar(int seg)
{
	switch (seg)
  a8:	8a 30       	cpi	r24, 0x0A	; 10
  aa:	91 05       	cpc	r25, r1
  ac:	b0 f5       	brcc	.+108    	; 0x11a <segchar+0x72>
  ae:	fc 01       	movw	r30, r24
  b0:	ec 5c       	subi	r30, 0xCC	; 204
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	0c 94 17 01 	jmp	0x22e	; 0x22e <__tablejump2__>
	{
		case 1:
		displayNumber(249);
  b8:	89 ef       	ldi	r24, 0xF9	; 249
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
  c0:	08 95       	ret
		case 2:
		displayNumber(164);
  c2:	84 ea       	ldi	r24, 0xA4	; 164
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
  ca:	08 95       	ret
		case 3:
		displayNumber(176);
  cc:	80 eb       	ldi	r24, 0xB0	; 176
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
  d4:	08 95       	ret
		case 4:
		displayNumber(153);
  d6:	89 e9       	ldi	r24, 0x99	; 153
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
  de:	08 95       	ret
		case 5:
		displayNumber(146);
  e0:	82 e9       	ldi	r24, 0x92	; 146
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
  e8:	08 95       	ret
		case 6:
		displayNumber(130);
  ea:	82 e8       	ldi	r24, 0x82	; 130
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
  f2:	08 95       	ret
		case 7:
		displayNumber(248);
  f4:	88 ef       	ldi	r24, 0xF8	; 248
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
  fc:	08 95       	ret
		case 8:
		displayNumber(128);
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
 106:	08 95       	ret
		case 9:
		displayNumber(144);
 108:	80 e9       	ldi	r24, 0x90	; 144
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
		break;
 110:	08 95       	ret
		case 0:
		displayNumber(192);
 112:	80 ec       	ldi	r24, 0xC0	; 192
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
 11a:	08 95       	ret

0000011c <ledprint>:
		break;
	}
}

void ledprint(int number)
{
 11c:	cf 92       	push	r12
 11e:	df 92       	push	r13
 120:	ef 92       	push	r14
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	9c 01       	movw	r18, r24
	int R0 = number%10;
 12e:	ca e0       	ldi	r28, 0x0A	; 10
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	be 01       	movw	r22, r28
 134:	0e 94 03 01 	call	0x206	; 0x206 <__divmodhi4>
 138:	6c 01       	movw	r12, r24
	int R1 = number%100/10;
 13a:	e4 e6       	ldi	r30, 0x64	; 100
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	c9 01       	movw	r24, r18
 140:	bf 01       	movw	r22, r30
 142:	0e 94 03 01 	call	0x206	; 0x206 <__divmodhi4>
 146:	be 01       	movw	r22, r28
 148:	0e 94 03 01 	call	0x206	; 0x206 <__divmodhi4>
 14c:	7b 01       	movw	r14, r22
	int R2 = number%1000/100;
 14e:	c9 01       	movw	r24, r18
 150:	68 ee       	ldi	r22, 0xE8	; 232
 152:	73 e0       	ldi	r23, 0x03	; 3
 154:	0e 94 03 01 	call	0x206	; 0x206 <__divmodhi4>
 158:	eb 01       	movw	r28, r22
 15a:	bf 01       	movw	r22, r30
 15c:	0e 94 03 01 	call	0x206	; 0x206 <__divmodhi4>
 160:	8b 01       	movw	r16, r22
	int R3 = number/1000;

	segchar(R0);
 162:	c6 01       	movw	r24, r12
 164:	0e 94 54 00 	call	0xa8	; 0xa8 <segchar>
	displayNumber(LED_ON_0);
 168:	88 e0       	ldi	r24, 0x08	; 8
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	8f e1       	ldi	r24, 0x1F	; 31
 172:	9e e4       	ldi	r25, 0x4E	; 78
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <ledprint+0x58>
 178:	00 c0       	rjmp	.+0      	; 0x17a <ledprint+0x5e>
 17a:	00 00       	nop
	_delay_ms(delayTimer);

	segchar(R1);
 17c:	c7 01       	movw	r24, r14
 17e:	0e 94 54 00 	call	0xa8	; 0xa8 <segchar>
	displayNumber(LED_ON_1);
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
 18a:	8f e1       	ldi	r24, 0x1F	; 31
 18c:	9e e4       	ldi	r25, 0x4E	; 78
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <ledprint+0x72>
 192:	00 c0       	rjmp	.+0      	; 0x194 <ledprint+0x78>
 194:	00 00       	nop
	_delay_ms(delayTimer);

	segchar(R2);
 196:	c8 01       	movw	r24, r16
 198:	0e 94 54 00 	call	0xa8	; 0xa8 <segchar>
	displayNumber(LED_ON_2);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
 1a4:	8f e1       	ldi	r24, 0x1F	; 31
 1a6:	9e e4       	ldi	r25, 0x4E	; 78
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <ledprint+0x8c>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <ledprint+0x92>
 1ae:	00 00       	nop
	_delay_ms(delayTimer);
	
	segchar(R3);
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 54 00 	call	0xa8	; 0xa8 <segchar>
	displayNumber(LED_ON_3);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 51 00 	call	0xa2	; 0xa2 <displayNumber>
 1be:	8f e1       	ldi	r24, 0x1F	; 31
 1c0:	9e e4       	ldi	r25, 0x4E	; 78
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <ledprint+0xa6>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <ledprint+0xac>
 1c8:	00 00       	nop
	_delay_ms(delayTimer);
	
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

000001dc <SPI_init>:
 */ 

#include "spi.h"

void SPI_init(){
	SPI_DDR |= ((1<<SS_PIN)|(1<<MOSI_PIN)|(1<<SCK_PIN));
 1dc:	84 b1       	in	r24, 0x04	; 4
 1de:	8c 62       	ori	r24, 0x2C	; 44
 1e0:	84 b9       	out	0x04, r24	; 4
	SPI_PORT &= ~((1<<SS_PIN)|(1<<MOSI_PIN)|(1<<SCK_PIN));
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	83 7d       	andi	r24, 0xD3	; 211
 1e6:	85 b9       	out	0x05, r24	; 5
	
	SPCR |= (SPIE_Interrupt_Disable|SPE_Enable|MSB_Order|Master_Select|CPOL_Rising|CPHA_0|F_OSC_4);
 1e8:	8c b5       	in	r24, 0x2c	; 44
 1ea:	80 65       	ori	r24, 0x50	; 80
 1ec:	8c bd       	out	0x2c, r24	; 44
 1ee:	08 95       	ret

000001f0 <SPI_transmit>:
}


void SPI_transmit(uint8_t data_to_transfer)
{
	SPI_DATA_TRANSFER = data_to_transfer;
 1f0:	8e bd       	out	0x2e, r24	; 46
	while (Wait_Transmission_Complete){}
 1f2:	0d b4       	in	r0, 0x2d	; 45
 1f4:	07 fe       	sbrs	r0, 7
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <SPI_transmit+0x2>
	SPI_PORT |= (1<<SS_PIN);
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	84 60       	ori	r24, 0x04	; 4
 1fc:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~(1<<SS_PIN);
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	8b 7f       	andi	r24, 0xFB	; 251
 202:	85 b9       	out	0x05, r24	; 5
 204:	08 95       	ret

00000206 <__divmodhi4>:
 206:	97 fb       	bst	r25, 7
 208:	07 2e       	mov	r0, r23
 20a:	16 f4       	brtc	.+4      	; 0x210 <__divmodhi4+0xa>
 20c:	00 94       	com	r0
 20e:	07 d0       	rcall	.+14     	; 0x21e <__divmodhi4_neg1>
 210:	77 fd       	sbrc	r23, 7
 212:	09 d0       	rcall	.+18     	; 0x226 <__divmodhi4_neg2>
 214:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodhi4>
 218:	07 fc       	sbrc	r0, 7
 21a:	05 d0       	rcall	.+10     	; 0x226 <__divmodhi4_neg2>
 21c:	3e f4       	brtc	.+14     	; 0x22c <__divmodhi4_exit>

0000021e <__divmodhi4_neg1>:
 21e:	90 95       	com	r25
 220:	81 95       	neg	r24
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	08 95       	ret

00000226 <__divmodhi4_neg2>:
 226:	70 95       	com	r23
 228:	61 95       	neg	r22
 22a:	7f 4f       	sbci	r23, 0xFF	; 255

0000022c <__divmodhi4_exit>:
 22c:	08 95       	ret

0000022e <__tablejump2__>:
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	05 90       	lpm	r0, Z+
 234:	f4 91       	lpm	r31, Z
 236:	e0 2d       	mov	r30, r0
 238:	09 94       	ijmp

0000023a <__udivmodhi4>:
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	51 e1       	ldi	r21, 0x11	; 17
 240:	07 c0       	rjmp	.+14     	; 0x250 <__udivmodhi4_ep>

00000242 <__udivmodhi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	a6 17       	cp	r26, r22
 248:	b7 07       	cpc	r27, r23
 24a:	10 f0       	brcs	.+4      	; 0x250 <__udivmodhi4_ep>
 24c:	a6 1b       	sub	r26, r22
 24e:	b7 0b       	sbc	r27, r23

00000250 <__udivmodhi4_ep>:
 250:	88 1f       	adc	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	5a 95       	dec	r21
 256:	a9 f7       	brne	.-22     	; 0x242 <__udivmodhi4_loop>
 258:	80 95       	com	r24
 25a:	90 95       	com	r25
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
