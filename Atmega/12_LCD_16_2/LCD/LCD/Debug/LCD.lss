
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000270  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ec1  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c0  00000000  00000000  00001299  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044f  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000414  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000028cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  8e:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <send_half_byte>:
}


void send_half_byte(uint8_t data_DB)
{
	data_DB<<=4;
  96:	82 95       	swap	r24
  98:	80 7f       	andi	r24, 0xF0	; 240
	e1;	
  9a:	95 b1       	in	r25, 0x05	; 5
  9c:	92 60       	ori	r25, 0x02	; 2
  9e:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	90 e1       	ldi	r25, 0x10	; 16
  a2:	9a 95       	dec	r25
  a4:	f1 f7       	brne	.-4      	; 0xa2 <send_half_byte+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <send_half_byte+0x12>
	_delay_us(50);					
	DB_PORT_CLEAR;		
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	9f 70       	andi	r25, 0x0F	; 15
  ac:	9b b9       	out	0x0b, r25	; 11
	DB_PORT |= data_DB;
  ae:	9b b1       	in	r25, 0x0b	; 11
  b0:	89 2b       	or	r24, r25
  b2:	8b b9       	out	0x0b, r24	; 11
	e0;	
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	8a 95       	dec	r24
  be:	f1 f7       	brne	.-4      	; 0xbc <send_half_byte+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <send_half_byte+0x2c>
  c2:	08 95       	ret

000000c4 <send_half_byte_with_delay>:
}


void send_half_byte_with_delay(uint8_t data_DB)
{
	send_half_byte(data_DB);
  c4:	0e 94 4b 00 	call	0x96	; 0x96 <send_half_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	89 ef       	ldi	r24, 0xF9	; 249
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <send_half_byte_with_delay+0x8>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <send_half_byte_with_delay+0xe>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <send_byte_with_delay>:
	_delay_ms(1);	
}

void send_byte_with_delay(uint8_t data_DB, uint8_t mode)
{
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
	if(mode==COMMAND_MODE){
  da:	61 11       	cpse	r22, r1
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <send_byte_with_delay+0x10>
		rs0;
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	03 c0       	rjmp	.+6      	; 0xec <send_byte_with_delay+0x16>
	}
	else{
		rs1;
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	85 b9       	out	0x05, r24	; 5
	}       
	uint8_t temp=0;
	temp=data_DB>>4;
	send_half_byte_with_delay(temp); 
  ec:	8c 2f       	mov	r24, r28
  ee:	82 95       	swap	r24
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	0e 94 62 00 	call	0xc4	; 0xc4 <send_half_byte_with_delay>
	send_half_byte_with_delay(data_DB);
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 62 00 	call	0xc4	; 0xc4 <send_half_byte_with_delay>
}
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <LCD_init>:
#define DELAY_1_ms 1


void LCD_init(void)
{
	rs0; 
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	85 b9       	out	0x05, r24	; 5
 106:	85 ea       	ldi	r24, 0xA5	; 165
 108:	9e e0       	ldi	r25, 0x0E	; 14
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_init+0xa>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_init+0x10>
 110:	00 00       	nop
	_delay_ms(15);						// wait time > 15 ms  
	send_half_byte(DB7_DB4_INIT); 		
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 4b 00 	call	0x96	; 0x96 <send_half_byte>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	94 e0       	ldi	r25, 0x04	; 4
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_init+0x1e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_init+0x24>
 124:	00 00       	nop
	_delay_ms(4.1);						// wait time > 4.1 ms 
	send_half_byte(DB7_DB4_INIT);
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <send_half_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	91 e2       	ldi	r25, 0x21	; 33
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_init+0x30>
 134:	00 00       	nop
	_delay_us(100);						// wait time > 100 us  
	send_half_byte(DB7_DB4_INIT);
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 4b 00 	call	0x96	; 0x96 <send_half_byte>

	send_half_byte_with_delay(0b0010);				// page 14
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 62 00 	call	0xc4	; 0xc4 <send_half_byte_with_delay>
	send_half_byte_with_delay(0b0010);				// page 14
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 62 00 	call	0xc4	; 0xc4 <send_half_byte_with_delay>
	send_byte_with_delay(0b00001100, COMMAND_MODE);	// Set display (D) cursor(C) and blinking of cursor(B) on/off	(datasheet page 9)
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_byte_with_delay>
	send_byte_with_delay(0b00000110, COMMAND_MODE);	// Assign cursor moving direction and enable the shift of entire display
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_byte_with_delay>
	
	send_byte_with_delay(0b10000000, COMMAND_MODE);	// Clear Display
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e8       	ldi	r24, 0x80	; 128
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_byte_with_delay>
 172:	08 95       	ret

00000174 <send_char>:
}


void send_char(char c)
{
	send_byte_with_delay(c, DATA_MODE);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_byte_with_delay>
 17a:	08 95       	ret

0000017c <set_pos>:
}


void set_pos(uint8_t x, uint8_t y)
{
	if(x > 16){
 17c:	81 31       	cpi	r24, 0x11	; 17
 17e:	08 f0       	brcs	.+2      	; 0x182 <set_pos+0x6>
		x = 16;
 180:	80 e1       	ldi	r24, 0x10	; 16
	}
	if(x < 0){
		x = 0;
	}
	
	if(y > 2){
 182:	63 30       	cpi	r22, 0x03	; 3
 184:	08 f0       	brcs	.+2      	; 0x188 <set_pos+0xc>
		y = 1;
 186:	61 e0       	ldi	r22, 0x01	; 1
	}
	if(y < 0){
		y = 0;
	}
	uint8_t adress= (0x40*y+x)|0b10000000;
 188:	90 e4       	ldi	r25, 0x40	; 64
 18a:	69 9f       	mul	r22, r25
 18c:	80 0d       	add	r24, r0
 18e:	11 24       	eor	r1, r1
	send_byte_with_delay(adress, COMMAND_MODE);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	80 68       	ori	r24, 0x80	; 128
 194:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_byte_with_delay>
 198:	08 95       	ret

0000019a <clearlcd>:
}


void clearlcd()
{
	rs0;
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	85 b9       	out	0x05, r24	; 5
	send_byte_with_delay(0b10000000, COMMAND_MODE);	// Clear Display
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_byte_with_delay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	83 ef       	ldi	r24, 0xF3	; 243
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <clearlcd+0x12>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <clearlcd+0x18>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <str_lcd>:
	_delay_ms(2);
}


void str_lcd(char string[])
{  
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	8c 01       	movw	r16, r24
	for(char n=0; string[n] != '\0'; n++){
 1be:	c0 e0       	ldi	r28, 0x00	; 0
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <str_lcd+0x12>
		send_char(string[n]);
 1c2:	0e 94 ba 00 	call	0x174	; 0x174 <send_char>
}


void str_lcd(char string[])
{  
	for(char n=0; string[n] != '\0'; n++){
 1c6:	cf 5f       	subi	r28, 0xFF	; 255
 1c8:	f8 01       	movw	r30, r16
 1ca:	ec 0f       	add	r30, r28
 1cc:	f1 1d       	adc	r31, r1
 1ce:	80 81       	ld	r24, Z
 1d0:	81 11       	cpse	r24, r1
 1d2:	f7 cf       	rjmp	.-18     	; 0x1c2 <str_lcd+0xc>
		send_char(string[n]);
	}
}
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <port_init>:

#include "main.h"
//----------------------------------------
void port_init(void)
{
	PORTD=0x00;
 1dc:	1b b8       	out	0x0b, r1	; 11
	DDRD=0b11110000;
 1de:	80 ef       	ldi	r24, 0xF0	; 240
 1e0:	8a b9       	out	0x0a, r24	; 10
	
	PORTB=0x00;
 1e2:	15 b8       	out	0x05, r1	; 5
	DDRB=0b00000011;
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	84 b9       	out	0x04, r24	; 4
 1e8:	08 95       	ret

000001ea <main>:
}
//----------------------------------------
int main(void)
{
	port_init(); 
 1ea:	0e 94 ee 00 	call	0x1dc	; 0x1dc <port_init>
	LCD_init(); 
 1ee:	0e 94 80 00 	call	0x100	; 0x100 <LCD_init>
	
	set_pos(8,0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 be 00 	call	0x17c	; 0x17c <set_pos>
	send_char('0');
 1fe:	80 e3       	ldi	r24, 0x30	; 48
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 ba 00 	call	0x174	; 0x174 <send_char>
	send_char('1');
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 ba 00 	call	0x174	; 0x174 <send_char>
	send_char('3');
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 ba 00 	call	0x174	; 0x174 <send_char>
	
	set_pos(0,1);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 be 00 	call	0x17c	; 0x17c <set_pos>
	send_char('5');
 222:	85 e3       	ldi	r24, 0x35	; 53
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 ba 00 	call	0x174	; 0x174 <send_char>
	send_char('6');
 22a:	86 e3       	ldi	r24, 0x36	; 54
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 ba 00 	call	0x174	; 0x174 <send_char>
	send_char('7');
 232:	87 e3       	ldi	r24, 0x37	; 55
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 ba 00 	call	0x174	; 0x174 <send_char>
 23a:	2f e3       	ldi	r18, 0x3F	; 63
 23c:	87 e7       	ldi	r24, 0x77	; 119
 23e:	9b e1       	ldi	r25, 0x1B	; 27
 240:	21 50       	subi	r18, 0x01	; 1
 242:	80 40       	sbci	r24, 0x00	; 0
 244:	90 40       	sbci	r25, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x56>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x60>
 24a:	00 00       	nop
	//clearlcd();
	
	/**/	
	while(1)
	{
		str_lcd("abc");
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 db 00 	call	0x1b6	; 0x1b6 <str_lcd>
 254:	2f e3       	ldi	r18, 0x3F	; 63
 256:	82 e4       	ldi	r24, 0x42	; 66
 258:	9f e0       	ldi	r25, 0x0F	; 15
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x70>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x7a>
 264:	00 00       	nop
		_delay_ms(5000);
		//clearlcd();
		//str_lcd("01234");
		//_delay_ms(9000);
		clearlcd();
 266:	0e 94 cd 00 	call	0x19a	; 0x19a <clearlcd>
 26a:	f0 cf       	rjmp	.-32     	; 0x24c <main+0x62>

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
