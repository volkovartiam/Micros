
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001f6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d01  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f9  00000000  00000000  00001069  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a1  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051b  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000026e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  8e:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <sendhalfbyte>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	82 95       	swap	r24
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	9b b1       	in	r25, 0x0b	; 11
  9c:	98 60       	ori	r25, 0x08	; 8
  9e:	9b b9       	out	0x0b, r25	; 11
  a0:	98 ec       	ldi	r25, 0xC8	; 200
  a2:	9a 95       	dec	r25
  a4:	f1 f7       	brne	.-4      	; 0xa2 <sendhalfbyte+0xc>
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	9f 70       	andi	r25, 0x0F	; 15
  aa:	9b b9       	out	0x0b, r25	; 11
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	89 2b       	or	r24, r25
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	8b b1       	in	r24, 0x0b	; 11
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	8b b9       	out	0x0b, r24	; 11
  b8:	88 ec       	ldi	r24, 0xC8	; 200
  ba:	8a 95       	dec	r24
  bc:	f1 f7       	brne	.-4      	; 0xba <sendhalfbyte+0x24>
  be:	08 95       	ret

000000c0 <sendbyte>:
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	61 11       	cpse	r22, r1
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <sendbyte+0x10>
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <sendbyte+0x16>
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	8c 2f       	mov	r24, r28
  d8:	82 95       	swap	r24
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <sendhalfbyte>
  e0:	8c 2f       	mov	r24, r28
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <sendhalfbyte>
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <sendchar>:
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	0e 94 60 00 	call	0xc0	; 0xc0 <sendbyte>
  f0:	08 95       	ret

000000f2 <setpos>:
  f2:	90 e4       	ldi	r25, 0x40	; 64
  f4:	69 9f       	mul	r22, r25
  f6:	80 0d       	add	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	0e 94 60 00 	call	0xc0	; 0xc0 <sendbyte>
 102:	08 95       	ret

00000104 <LCD_ini>:
 104:	87 ec       	ldi	r24, 0xC7	; 199
 106:	9f ea       	ldi	r25, 0xAF	; 175
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_ini+0x4>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_ini+0xa>
 10e:	00 00       	nop
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 4b 00 	call	0x96	; 0x96 <sendhalfbyte>
 116:	8f ed       	ldi	r24, 0xDF	; 223
 118:	9e e2       	ldi	r25, 0x2E	; 46
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_ini+0x16>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_ini+0x1c>
 120:	00 00       	nop
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 4b 00 	call	0x96	; 0x96 <sendhalfbyte>
 128:	8b e2       	ldi	r24, 0x2B	; 43
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_ini+0x28>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_ini+0x2e>
 132:	00 00       	nop
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 4b 00 	call	0x96	; 0x96 <sendhalfbyte>
 13a:	87 eb       	ldi	r24, 0xB7	; 183
 13c:	9b e0       	ldi	r25, 0x0B	; 11
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_ini+0x3a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_ini+0x40>
 144:	00 00       	nop
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	0e 94 4b 00 	call	0x96	; 0x96 <sendhalfbyte>
 14c:	87 eb       	ldi	r24, 0xB7	; 183
 14e:	9b e0       	ldi	r25, 0x0B	; 11
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_ini+0x4c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_ini+0x52>
 156:	00 00       	nop
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	88 e2       	ldi	r24, 0x28	; 40
 15c:	0e 94 60 00 	call	0xc0	; 0xc0 <sendbyte>
 160:	87 eb       	ldi	r24, 0xB7	; 183
 162:	9b e0       	ldi	r25, 0x0B	; 11
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_ini+0x60>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_ini+0x66>
 16a:	00 00       	nop
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	0e 94 60 00 	call	0xc0	; 0xc0 <sendbyte>
 174:	87 eb       	ldi	r24, 0xB7	; 183
 176:	9b e0       	ldi	r25, 0x0B	; 11
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_ini+0x74>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_ini+0x7a>
 17e:	00 00       	nop
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 60 00 	call	0xc0	; 0xc0 <sendbyte>
 188:	87 eb       	ldi	r24, 0xB7	; 183
 18a:	9b e0       	ldi	r25, 0x0B	; 11
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_ini+0x88>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_ini+0x8e>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <str_lcd>:
	sendbyte(0b00000001, 0);
	_delay_us(1500);
}
//----------------------------------------
void str_lcd (char str1[])
{  
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	8c 01       	movw	r16, r24
	char n;
	for(n=0;str1[n]!='\0';n++)
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <str_lcd+0x12>
	sendchar(str1[n]);
 1a2:	0e 94 75 00 	call	0xea	; 0xea <sendchar>
}
//----------------------------------------
void str_lcd (char str1[])
{  
	char n;
	for(n=0;str1[n]!='\0';n++)
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	f8 01       	movw	r30, r16
 1aa:	ec 0f       	add	r30, r28
 1ac:	f1 1d       	adc	r31, r1
 1ae:	80 81       	ld	r24, Z
 1b0:	81 11       	cpse	r24, r1
 1b2:	f7 cf       	rjmp	.-18     	; 0x1a2 <str_lcd+0xc>
	sendchar(str1[n]);
}
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <port_ini>:

#include "main.h"
//----------------------------------------
void port_ini(void)
{
	PORTD=0x00;
 1bc:	1b b8       	out	0x0b, r1	; 11
	DDRD=0xFF;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	8a b9       	out	0x0a, r24	; 10
 1c2:	08 95       	ret

000001c4 <main>:
}
//----------------------------------------
int main(void)
{
	port_ini(); //Инициализируем порты
 1c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <port_ini>
	LCD_ini();  //Инициализируем дисплей
 1c8:	0e 94 82 00 	call	0x104	; 0x104 <LCD_ini>
	setpos(0,0);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 79 00 	call	0xf2	; 0xf2 <setpos>
	str_lcd("Hello World!");
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 cb 00 	call	0x196	; 0x196 <str_lcd>
	setpos(2,1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 79 00 	call	0xf2	; 0xf2 <setpos>
	str_lcd("String 2");
 1e8:	8d e0       	ldi	r24, 0x0D	; 13
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 cb 00 	call	0x196	; 0x196 <str_lcd>
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <main+0x2c>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
