
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3e  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088c  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003de  00000000  00000000  000018d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039d  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002541  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  78:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <send_half_byte>:
}


void send_half_byte(uint8_t data_DB)
{
	data_DB<<=4;
  80:	82 95       	swap	r24
  82:	80 7f       	andi	r24, 0xF0	; 240
	e1;	
  84:	95 b1       	in	r25, 0x05	; 5
  86:	92 60       	ori	r25, 0x02	; 2
  88:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	90 e1       	ldi	r25, 0x10	; 16
  8c:	9a 95       	dec	r25
  8e:	f1 f7       	brne	.-4      	; 0x8c <send_half_byte+0xc>
  90:	00 c0       	rjmp	.+0      	; 0x92 <send_half_byte+0x12>
	_delay_us(50);					
	DB_PORT_CLEAR;		
  92:	9b b1       	in	r25, 0x0b	; 11
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	9b b9       	out	0x0b, r25	; 11
	DB_PORT |= data_DB;
  98:	9b b1       	in	r25, 0x0b	; 11
  9a:	89 2b       	or	r24, r25
  9c:	8b b9       	out	0x0b, r24	; 11
	e0;	
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	85 b9       	out	0x05, r24	; 5
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <send_half_byte+0x26>
  aa:	00 c0       	rjmp	.+0      	; 0xac <send_half_byte+0x2c>
  ac:	08 95       	ret

000000ae <send_half_byte_with_delay>:
}


void send_half_byte_with_delay(uint8_t data_DB)
{
	send_half_byte(data_DB);
  ae:	0e 94 40 00 	call	0x80	; 0x80 <send_half_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <send_half_byte_with_delay+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <send_half_byte_with_delay+0xe>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <send_byte_with_delay>:
	_delay_ms(1);	
}

void send_byte_with_delay(uint8_t data_DB, uint8_t mode)
{
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
	if(mode==COMMAND_MODE){
  c4:	61 11       	cpse	r22, r1
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <send_byte_with_delay+0x10>
		rs0;
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <send_byte_with_delay+0x16>
	}
	else{
		rs1;
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	85 b9       	out	0x05, r24	; 5
	}       
	uint8_t temp=0;
	temp=data_DB>>4;
	send_half_byte_with_delay(temp); 
  d6:	8c 2f       	mov	r24, r28
  d8:	82 95       	swap	r24
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	0e 94 57 00 	call	0xae	; 0xae <send_half_byte_with_delay>
	send_half_byte_with_delay(data_DB);
  e0:	8c 2f       	mov	r24, r28
  e2:	0e 94 57 00 	call	0xae	; 0xae <send_half_byte_with_delay>
}
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <LCD_init>:



void LCD_init(void)
{
	rs0; 
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	85 b9       	out	0x05, r24	; 5
  f0:	85 ea       	ldi	r24, 0xA5	; 165
  f2:	9e e0       	ldi	r25, 0x0E	; 14
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_init+0xa>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_init+0x10>
  fa:	00 00       	nop
	_delay_ms(15);						// wait time > 15 ms  
	send_half_byte(DB7_DB4_INIT); 		
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 40 00 	call	0x80	; 0x80 <send_half_byte>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_init+0x1e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_init+0x24>
 10e:	00 00       	nop
	_delay_ms(4.1);						// wait time > 4.1 ms 
	send_half_byte(DB7_DB4_INIT);
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 40 00 	call	0x80	; 0x80 <send_half_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	91 e2       	ldi	r25, 0x21	; 33
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_init+0x30>
 11e:	00 00       	nop
	_delay_us(100);						// wait time > 100 us  
	send_half_byte(DB7_DB4_INIT);
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 40 00 	call	0x80	; 0x80 <send_half_byte>

	send_half_byte_with_delay(0b0010);				// page 14
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 57 00 	call	0xae	; 0xae <send_half_byte_with_delay>
	send_half_byte_with_delay(0b0010);				// page 14
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 57 00 	call	0xae	; 0xae <send_half_byte_with_delay>
	send_byte_with_delay(0b00001100, COMMAND_MODE);	// Set display (D) cursor(C) and blinking of cursor(B) on/off	(datasheet page 9)
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 60 00 	call	0xc0	; 0xc0 <send_byte_with_delay>
	send_byte_with_delay(0b00000110, COMMAND_MODE);	// Assign cursor moving direction and enable the shift of entire display
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 60 00 	call	0xc0	; 0xc0 <send_byte_with_delay>
	
	send_byte_with_delay(0b10000000, COMMAND_MODE);	// Clear Display
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 60 00 	call	0xc0	; 0xc0 <send_byte_with_delay>
 15c:	08 95       	ret

0000015e <send_char>:
}


void send_char(char c)
{
	send_byte_with_delay(c, DATA_MODE);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	0e 94 60 00 	call	0xc0	; 0xc0 <send_byte_with_delay>
 164:	08 95       	ret

00000166 <clearlcd>:
*/


void clearlcd()
{
	send_byte_with_delay(0b10000000, COMMAND_MODE);	// Clear Display
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	0e 94 60 00 	call	0xc0	; 0xc0 <send_byte_with_delay>
 16e:	83 ef       	ldi	r24, 0xF3	; 243
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <clearlcd+0xc>
 176:	00 c0       	rjmp	.+0      	; 0x178 <clearlcd+0x12>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <port_init>:

#include "main.h"
//----------------------------------------
void port_init(void)
{
	PORTD=0x00;
 17c:	1b b8       	out	0x0b, r1	; 11
	DDRD=0b11110000;
 17e:	80 ef       	ldi	r24, 0xF0	; 240
 180:	8a b9       	out	0x0a, r24	; 10
	
	PORTB=0x00;
 182:	15 b8       	out	0x05, r1	; 5
	DDRB=0b00000011;
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	84 b9       	out	0x04, r24	; 4
 188:	08 95       	ret

0000018a <main>:
}
//----------------------------------------
int main(void)
{
	port_init(); 
 18a:	0e 94 be 00 	call	0x17c	; 0x17c <port_init>
	LCD_init(); 
 18e:	0e 94 75 00 	call	0xea	; 0xea <LCD_init>
	
	//setpos(8,0);
	send_char('0');
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 af 00 	call	0x15e	; 0x15e <send_char>
	send_char('1');
 19a:	81 e3       	ldi	r24, 0x31	; 49
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 af 00 	call	0x15e	; 0x15e <send_char>
	send_char('3');
 1a2:	83 e3       	ldi	r24, 0x33	; 51
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 af 00 	call	0x15e	; 0x15e <send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f e3       	ldi	r18, 0x3F	; 63
 1ac:	87 e7       	ldi	r24, 0x77	; 119
 1ae:	9b e1       	ldi	r25, 0x1B	; 27
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <main+0x26>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <main+0x30>
 1ba:	00 00       	nop
	_delay_ms(9000);
	clearlcd();
 1bc:	0e 94 b3 00 	call	0x166	; 0x166 <clearlcd>
		_delay_ms(5000);
		clearlcd();
	}
	*/
	
}
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
