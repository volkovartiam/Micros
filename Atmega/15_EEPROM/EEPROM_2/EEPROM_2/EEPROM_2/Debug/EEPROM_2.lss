
EEPROM_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000842  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000724  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000128  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <EE_read_by_address>:
	EECR |=  (1<<EEPE);
}


unsigned char EE_read_by_address(unsigned int uiAddress){
		while(EECR & (1<<EEPE)) {}
  80:	f9 99       	sbic	0x1f, 1	; 31
  82:	fe cf       	rjmp	.-4      	; 0x80 <EE_read_by_address>
		EEAR = uiAddress;	
  84:	92 bd       	out	0x22, r25	; 34
  86:	81 bd       	out	0x21, r24	; 33
		EECR |= (1<<EERE);	
  88:	8f b3       	in	r24, 0x1f	; 31
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	8f bb       	out	0x1f, r24	; 31
		return EEDR;		
  8e:	80 b5       	in	r24, 0x20	; 32
}
  90:	08 95       	ret

00000092 <blink>:


#define led 5
void blink()
{
	PORTB |= (1 << led);
  92:	85 b1       	in	r24, 0x05	; 5
  94:	80 62       	ori	r24, 0x20	; 32
  96:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	89 e6       	ldi	r24, 0x69	; 105
  9c:	98 e1       	ldi	r25, 0x18	; 24
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <blink+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <blink+0x16>
  a8:	00 00       	nop
	_delay_ms(500);
	PORTB &= (~(1 << led));	
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	89 e6       	ldi	r24, 0x69	; 105
  b4:	98 e1       	ldi	r25, 0x18	; 24
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <blink+0x24>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <blink+0x2e>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <init_blink>:
}


void init_blink()
{
	DDRB |= (1<<(led));
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	08 95       	ret

000000cc <main>:
	EE_erase_by_address(0x3);
	EE_erase_by_address(0x4);
	EE_erase_by_address(0x5);
	*/
	
	init_blink();
  cc:	0e 94 62 00 	call	0xc4	; 0xc4 <init_blink>
	unsigned char x = 0;
		
    while (1) 
    {
		x = EE_read_by_address(0x5);
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 40 00 	call	0x80	; 0x80 <EE_read_by_address>
		//x = 5;
		if(x == 5){
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	d1 f7       	brne	.-12     	; 0xd0 <main+0x4>
			blink();
  dc:	0e 94 49 00 	call	0x92	; 0x92 <blink>
  e0:	f7 cf       	rjmp	.-18     	; 0xd0 <main+0x4>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
