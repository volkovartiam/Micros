
EEPROM_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084b  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cf  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <EE_write_data_by_address>:
#define WAIT_COMPLETION_WRITE (EECR & (1<<EEPE) )


void EE_write_data_by_address(unsigned char ucData, unsigned int uiAddress)
{
	while(WAIT_COMPLETION_WRITE){}	/* Wait for completion of previous write */	
  80:	f9 99       	sbic	0x1f, 1	; 31
  82:	fe cf       	rjmp	.-4      	; 0x80 <EE_write_data_by_address>
	
	EEDR = ucData;
  84:	80 bd       	out	0x20, r24	; 32
	EEAR = uiAddress;
  86:	72 bd       	out	0x22, r23	; 34
  88:	61 bd       	out	0x21, r22	; 33
	Фрагмент кода не работает
	EECR |= (PROGRAMMING_MODE|MASTER_WRITE_ENABLE|WRITE_ENABLE);
	*/
	
	/**/
	EECR |=  PROGRAMMING_MODE;	
  8a:	8f b3       	in	r24, 0x1f	; 31
  8c:	8f bb       	out	0x1f, r24	; 31
	EECR |=  MASTER_WRITE_ENABLE;
  8e:	8f b3       	in	r24, 0x1f	; 31
  90:	84 60       	ori	r24, 0x04	; 4
  92:	8f bb       	out	0x1f, r24	; 31
	EECR |=  WRITE_ENABLE;
  94:	8f b3       	in	r24, 0x1f	; 31
  96:	82 60       	ori	r24, 0x02	; 2
  98:	8f bb       	out	0x1f, r24	; 31
  9a:	08 95       	ret

0000009c <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		EE_write_data_by_address(0x77, 0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	87 e7       	ldi	r24, 0x77	; 119
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 40 00 	call	0x80	; 0x80 <EE_write_data_by_address>
		EE_write_data_by_address(0x88, 1);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	88 e8       	ldi	r24, 0x88	; 136
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 40 00 	call	0x80	; 0x80 <EE_write_data_by_address>
		EE_write_data_by_address(0x99, 2);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	89 e9       	ldi	r24, 0x99	; 153
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 40 00 	call	0x80	; 0x80 <EE_write_data_by_address>
  c0:	ed cf       	rjmp	.-38     	; 0x9c <main>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
