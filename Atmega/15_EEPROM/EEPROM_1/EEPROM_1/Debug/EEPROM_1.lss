
EEPROM_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f8  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000327  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fb  00000000  00000000  00001981  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <EE_write_data_by_address>:
	//EEDR = 0x00;
	EEAR = uiAddress;
	
	EECR |=  ERASE_ONLY;
	EECR |=  MASTER_WRITE_ENABLE;
	EECR |=  WRITE_ENABLE;
  80:	f9 99       	sbic	0x1f, 1	; 31
  82:	fe cf       	rjmp	.-4      	; 0x80 <EE_write_data_by_address>
  84:	80 bd       	out	0x20, r24	; 32
  86:	72 bd       	out	0x22, r23	; 34
  88:	61 bd       	out	0x21, r22	; 33
  8a:	8f b3       	in	r24, 0x1f	; 31
  8c:	8f bb       	out	0x1f, r24	; 31
  8e:	8f b3       	in	r24, 0x1f	; 31
  90:	84 60       	ori	r24, 0x04	; 4
  92:	8f bb       	out	0x1f, r24	; 31
  94:	8f b3       	in	r24, 0x1f	; 31
  96:	82 60       	ori	r24, 0x02	; 2
  98:	8f bb       	out	0x1f, r24	; 31
  9a:	08 95       	ret

0000009c <EE_read_by_address>:
/*
При необходимости можно добавить проверки вхождения адреса в интервал
*/
unsigned char EE_read_by_address(unsigned int uiAddress)
{
	while(WAIT_COMPLETION_WRITE) {}				
  9c:	f9 99       	sbic	0x1f, 1	; 31
  9e:	fe cf       	rjmp	.-4      	; 0x9c <EE_read_by_address>

	EEAR = uiAddress;		//Устанавливаем адрес
  a0:	92 bd       	out	0x22, r25	; 34
  a2:	81 bd       	out	0x21, r24	; 33
	EECR |= READ_ENABLE;	//Запускаем операцию считывания из памяти в регистр данных
  a4:	8f b3       	in	r24, 0x1f	; 31
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	8f bb       	out	0x1f, r24	; 31
	return EEDR;			//Возвращаем результат
  aa:	80 b5       	in	r24, 0x20	; 32
}
  ac:	08 95       	ret

000000ae <main>:


int main(void)
{

	EE_write_data_by_address(0x01, 0);
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 40 00 	call	0x80	; 0x80 <EE_write_data_by_address>
	EE_write_data_by_address(0x02, 1);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 40 00 	call	0x80	; 0x80 <EE_write_data_by_address>
	EE_write_data_by_address(0x03, 2);
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 40 00 	call	0x80	; 0x80 <EE_write_data_by_address>

	unsigned char readed = EE_read_by_address(0);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 4e 00 	call	0x9c	; 0x9c <EE_read_by_address>

	if(readed == 0x01){
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	39 f4       	brne	.+14     	; 0xec <main+0x3e>
		EE_write_data_by_address(0x05, 5);	
  de:	65 e0       	ldi	r22, 0x05	; 5
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	85 e0       	ldi	r24, 0x05	; 5
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 40 00 	call	0x80	; 0x80 <EE_write_data_by_address>
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <main+0x4a>
	}else{
		EE_write_data_by_address(0x25, 5);
  ec:	65 e0       	ldi	r22, 0x05	; 5
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 40 00 	call	0x80	; 0x80 <EE_write_data_by_address>
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x4a>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
