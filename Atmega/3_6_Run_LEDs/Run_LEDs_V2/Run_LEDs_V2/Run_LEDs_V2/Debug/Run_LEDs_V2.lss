
Run_LEDs_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083e  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  000010f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000187  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001935  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	//Инициализация 2-й способ
	DDRD |= (1<<PORTD0)|(1<<PORTD1)|(1<<PORTD2)|(1<<PORTD3)|(1<<PORTD4)|(1<<PORTD5)|(1<<PORTD6)|(1<<PORTD7);
	PORTD |= (0<<PORTD0)|(0<<PORTD1)|(0<<PORTD2)|(0<<PORTD3)|(0<<PORTD4)|(0<<PORTD5)|(0<<PORTD6)|(0<<PORTD7);
	*/
	//Инициализация 3-й способ
	DDRD |=  OUT(PORTD0)|OUT(PORTD1)|OUT(PORTD2)|OUT(PORTD3)|OUT(PORTD4)|OUT(PORTD5)|OUT(PORTD6)|OUT(PORTD7);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD |= HIGH(PORTD0)|HIGH(PORTD1)|HIGH(PORTD2)|HIGH(PORTD3)|HIGH(PORTD4)|HIGH(PORTD5)|HIGH(PORTD6)|HIGH(PORTD7);
  86:	9b b1       	in	r25, 0x0b	; 11
  88:	8b b9       	out	0x0b, r24	; 11
	
	
	PORTD |= (1<<(PORTD2));		//ON
  8a:	8b b1       	in	r24, 0x0b	; 11
  8c:	84 60       	ori	r24, 0x04	; 4
  8e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	39 e6       	ldi	r19, 0x69	; 105
  94:	48 e1       	ldi	r20, 0x18	; 24
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
	_delay_ms(delay);
	PORTD &= ~(1<<(PORTD2));	//OFF
  a2:	8b b1       	in	r24, 0x0b	; 11
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	5f ef       	ldi	r21, 0xFF	; 255
  aa:	89 e6       	ldi	r24, 0x69	; 105
  ac:	98 e1       	ldi	r25, 0x18	; 24
  ae:	51 50       	subi	r21, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x38>
  b8:	00 00       	nop
	_delay_ms(delay);
	
	while (1)
	{
		for(char i = 0; i<=7; i++){
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	38 c0       	rjmp	.+112    	; 0x12e <main+0xae>
			PORTD = (1<<i);
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x4a>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x46>
  ce:	8b b9       	out	0x0b, r24	; 11
			PORTD = ~PORTD;
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	90 95       	com	r25
  d4:	9b b9       	out	0x0b, r25	; 11
  d6:	3f ef       	ldi	r19, 0xFF	; 255
  d8:	49 e6       	ldi	r20, 0x69	; 105
  da:	58 e1       	ldi	r21, 0x18	; 24
  dc:	31 50       	subi	r19, 0x01	; 1
  de:	40 40       	sbci	r20, 0x00	; 0
  e0:	50 40       	sbci	r21, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x5c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x66>
  e6:	00 00       	nop
			_delay_ms(delay);

			PIND = (1<<i);
  e8:	89 b9       	out	0x09, r24	; 9
  ea:	3f ef       	ldi	r19, 0xFF	; 255
  ec:	49 e6       	ldi	r20, 0x69	; 105
  ee:	58 e1       	ldi	r21, 0x18	; 24
  f0:	31 50       	subi	r19, 0x01	; 1
  f2:	40 40       	sbci	r20, 0x00	; 0
  f4:	50 40       	sbci	r21, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x70>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x7a>
  fa:	00 00       	nop
			_delay_ms(delay);

			PORTD &= ~(1<<i);
  fc:	9b b1       	in	r25, 0x0b	; 11
  fe:	38 2f       	mov	r19, r24
 100:	30 95       	com	r19
 102:	93 23       	and	r25, r19
 104:	9b b9       	out	0x0b, r25	; 11
 106:	3f ef       	ldi	r19, 0xFF	; 255
 108:	49 e6       	ldi	r20, 0x69	; 105
 10a:	58 e1       	ldi	r21, 0x18	; 24
 10c:	31 50       	subi	r19, 0x01	; 1
 10e:	40 40       	sbci	r20, 0x00	; 0
 110:	50 40       	sbci	r21, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x8c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x96>
 116:	00 00       	nop
			_delay_ms(delay);
			
			PIND = (1<<i);
 118:	89 b9       	out	0x09, r24	; 9
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	99 e6       	ldi	r25, 0x69	; 105
 11e:	38 e1       	ldi	r19, 0x18	; 24
 120:	81 50       	subi	r24, 0x01	; 1
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xa0>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xaa>
 12a:	00 00       	nop
	PORTD &= ~(1<<(PORTD2));	//OFF
	_delay_ms(delay);
	
	while (1)
	{
		for(char i = 0; i<=7; i++){
 12c:	2f 5f       	subi	r18, 0xFF	; 255
 12e:	28 30       	cpi	r18, 0x08	; 8
 130:	30 f2       	brcs	.-116    	; 0xbe <main+0x3e>
 132:	c3 cf       	rjmp	.-122    	; 0xba <main+0x3a>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
