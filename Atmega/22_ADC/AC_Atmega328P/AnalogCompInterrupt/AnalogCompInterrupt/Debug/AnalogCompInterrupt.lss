
AnalogCompInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d4  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024f  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001551  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_23>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initIO>:
AIN1D, AIN0D -  AIN1, AIN0 Digital input disable
*/

void initIO(void)
{
	DDRB |= 0xFF;					/* Make pin 7 of PORTC is output */
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  86:	15 b8       	out	0x05, r1	; 5
  88:	08 95       	ret

0000008a <initComparator>:
}

void initComparator(void)
{
	cli();
  8a:	f8 94       	cli
	ADCSRB &= (1<<ACME);			/* Enable AIN1 for input */
  8c:	eb e7       	ldi	r30, 0x7B	; 123
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	80 74       	andi	r24, 0x40	; 64
  94:	80 83       	st	Z, r24
	ACSR &= 0x00;					/* Clear ACSR register */
  96:	80 b7       	in	r24, 0x30	; 48
  98:	10 be       	out	0x30, r1	; 48
	
	ACSR |=  (1<<ACBG)|				//Analog comparator bandgap select
  9a:	80 b7       	in	r24, 0x30	; 48
  9c:	8a 64       	ori	r24, 0x4A	; 74
  9e:	80 bf       	out	0x30, r24	; 48
			 (1<<ACIS1)|
			 //(1<<ACIS0)|
			 (1<<ACIE);				//Enable analog comparator interrupt
	sei();
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <main>:
}

int main()
{
	initIO();
  a4:	0e 94 40 00 	call	0x80	; 0x80 <initIO>
	initComparator();
  a8:	0e 94 45 00 	call	0x8a	; 0x8a <initComparator>
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x8>

000000ae <__vector_23>:
	while(1)
	{
	}
}

ISR(ANALOG_COMP_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	if (ACSR & (1<<ACO)) {		/* Check ACO bit of ACSR register */
  ba:	00 b6       	in	r0, 0x30	; 48
  bc:	05 fe       	sbrs	r0, 5
  be:	03 c0       	rjmp	.+6      	; 0xc6 <__vector_23+0x18>
		PORTB = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <__vector_23+0x1a>
	}							/* Turn ON PB port */
	else {						/* If ACO bit is zero */
		PORTB = 0x00;			/* Then	turn OFF PC7 pin */
  c6:	15 b8       	out	0x05, r1	; 5
	}
}
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
