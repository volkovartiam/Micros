
ADC_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094c  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000400  00000000  00000000  0000139f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000062  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001cf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  88:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
int ADC_convert(void)
{
	ADCSRA |= (1<<ADSC);			//Начинаем преобразование
	while((ADCSRA & (1<<ADSC)));	//проверим закончилось ли аналого-цифровое преобразование
	return ADC;
}
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8f 6e       	ori	r24, 0xEF	; 239
  98:	80 83       	st	Z, r24
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <main>:
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 80 00 	call	0x100	; 0x100 <USART_Init>
  b0:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
  b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <high_adc>
  b8:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_Transmit>
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_Transmit>
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	89 e6       	ldi	r24, 0x69	; 105
  c8:	98 e1       	ldi	r25, 0x18	; 24
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x22>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x2c>
  d4:	00 00       	nop
  d6:	ee cf       	rjmp	.-36     	; 0xb4 <main+0xc>

000000d8 <__vector_21>:

ISR(ADC_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	low_adc = ADCL;
  e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	high_adc = ADCH;				//Верхняя часть регистра ADC должна быть считана последней, иначе не продолжится преобразование
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <high_adc>
	//adc_value = high_adc*256+low_adc;
}
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <USART_Init>:
#include "usart.h"

void USART_Init(unsigned int speed)
{
	//Регистр UBRR0 задает скорость передачи данных 
	UBRR0H = (unsigned char)(speed>>8);
 100:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)speed;
 104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//TXEN0 - разрешение передачи данных
	//UCSZ02 - бит задающий количество передваемых бит в кадре (совместно с UCSZ00, UCSZ01)
	//RXB80 - для получения 9-го бита
	//TXB80 - для передачи 9-го бита

	UCSR0B |=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Включаем прием и передачу по USART
 108:	e1 ec       	ldi	r30, 0xC1	; 193
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	88 69       	ori	r24, 0x98	; 152
 110:	80 83       	st	Z, r24
	//USBS0 - задает количество стоп битов один/два
	//UCSZ00  
	//UCSZ01 - бит задающий количество передваемых бит в кадре
	//UCPOL0 - бит полярности падающий/восходящий
	
	UCSR0C |= (1<<UPM01)|(1<<UPM00)|(1<<UCSZ01);
 112:	e2 ec       	ldi	r30, 0xC2	; 194
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	84 63       	ori	r24, 0x34	; 52
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <USART_Transmit>:
	
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSR0A & (1<<UDRE0)) ); //Ожидание опустошения буфера приема
 11e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 122:	95 ff       	sbrs	r25, 5
 124:	fc cf       	rjmp	.-8      	; 0x11e <USART_Transmit>
	UDR0 = data; //Начало передачи данных
 126:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 12a:	08 95       	ret

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
