
DS1307Eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000021  00800060  00800060  000001ae  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004a4  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000279  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000392  00000000  00000000  000009ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e2  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ed  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  000010ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 38       	cpi	r26, 0x81	; 129
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	78 c0       	rjmp	.+240    	; 0x136 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
unsigned char bt[32];

int main(void)
{
	int i=0;
	USART_Init (8);
  48:	88 e0       	ldi	r24, 0x08	; 8
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	67 d0       	rcall	.+206    	; 0x11c <USART_Init>
	I2C_Init();
  4e:	53 d0       	rcall	.+166    	; 0xf6 <I2C_Init>
	
	//Чтение
	I2C_StartCondition(); //Отправим условие START
  50:	55 d0       	rcall	.+170    	; 0xfc <I2C_StartCondition>
	USART_Transmit(TWSR);//читаем статусный регистр
  52:	81 b1       	in	r24, 0x01	; 1
  54:	6c d0       	rcall	.+216    	; 0x12e <USART_Transmit>
	I2C_SendByte(0b10100000);//передаем адрес устройства и бит записи (0)
  56:	80 ea       	ldi	r24, 0xA0	; 160
  58:	5a d0       	rcall	.+180    	; 0x10e <I2C_SendByte>
	USART_Transmit(TWSR);//читаем статусный регистр
  5a:	81 b1       	in	r24, 0x01	; 1
  5c:	68 d0       	rcall	.+208    	; 0x12e <USART_Transmit>
	I2C_SendByte(0);//передаем старшую часть адреса ячейки памяти
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	56 d0       	rcall	.+172    	; 0x10e <I2C_SendByte>
	USART_Transmit(TWSR);//читаем статусный регистр
  62:	81 b1       	in	r24, 0x01	; 1
  64:	64 d0       	rcall	.+200    	; 0x12e <USART_Transmit>
	I2C_SendByte(0);//передаем младшую часть адреса ячейки памяти
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	52 d0       	rcall	.+164    	; 0x10e <I2C_SendByte>
	USART_Transmit(TWSR);//читаем статусный регистр
  6a:	81 b1       	in	r24, 0x01	; 1
  6c:	60 d0       	rcall	.+192    	; 0x12e <USART_Transmit>
 	I2C_StartCondition(); //Отправим условие START
  6e:	46 d0       	rcall	.+140    	; 0xfc <I2C_StartCondition>
 	USART_Transmit(TWSR);//читаем статусный регистр
  70:	81 b1       	in	r24, 0x01	; 1
  72:	5d d0       	rcall	.+186    	; 0x12e <USART_Transmit>
 	I2C_SendByte(0b10100001);//передаем адрес устройства и бит чтения (1)
  74:	81 ea       	ldi	r24, 0xA1	; 161
  76:	4b d0       	rcall	.+150    	; 0x10e <I2C_SendByte>
 	USART_Transmit(TWSR);//читаем статусный регистр
  78:	81 b1       	in	r24, 0x01	; 1
  7a:	59 d0       	rcall	.+178    	; 0x12e <USART_Transmit>
  7c:	00 e8       	ldi	r16, 0x80	; 128
  7e:	10 e0       	ldi	r17, 0x00	; 0
  80:	c1 e6       	ldi	r28, 0x61	; 97
  82:	d0 e0       	ldi	r29, 0x00	; 0
 	for(i=0;i<=30;i++)
 	{
 		bt[i] = EE_ReadByte(); //прочитаем байт из микросхемы
  84:	14 d0       	rcall	.+40     	; 0xae <EE_ReadByte>
  86:	89 93       	st	Y+, r24
	USART_Transmit(TWSR);//читаем статусный регистр
 	I2C_StartCondition(); //Отправим условие START
 	USART_Transmit(TWSR);//читаем статусный регистр
 	I2C_SendByte(0b10100001);//передаем адрес устройства и бит чтения (1)
 	USART_Transmit(TWSR);//читаем статусный регистр
 	for(i=0;i<=30;i++)
  88:	c0 17       	cp	r28, r16
  8a:	d1 07       	cpc	r29, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <main+0x3c>
 	{
 		bt[i] = EE_ReadByte(); //прочитаем байт из микросхемы
 		//USART_Transmit(TWSR);//читаем статусный регистр
 	}
 	bt[31] = EE_ReadLastByte(); //прочитаем байт из микросхемы
  8e:	22 d0       	rcall	.+68     	; 0xd4 <EE_ReadLastByte>
  90:	80 93 80 00 	sts	0x0080, r24
	//USART_Transmit(TWSR);//читаем статусный регистр
	I2C_StopCondition(); //Отправим условие STOP
  94:	39 d0       	rcall	.+114    	; 0x108 <I2C_StopCondition>
	USART_Transmit(TWSR);//читаем статусный регистр
  96:	81 b1       	in	r24, 0x01	; 1
  98:	4a d0       	rcall	.+148    	; 0x12e <USART_Transmit>
  9a:	01 e8       	ldi	r16, 0x81	; 129
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c1 e6       	ldi	r28, 0x61	; 97
  a0:	d0 e0       	ldi	r29, 0x00	; 0
 	for(i=0;i<=31;i++)
 	{
 		USART_Transmit(bt[i]); //отправим считанные байты в ПК
  a2:	89 91       	ld	r24, Y+
  a4:	44 d0       	rcall	.+136    	; 0x12e <USART_Transmit>
 	}
 	bt[31] = EE_ReadLastByte(); //прочитаем байт из микросхемы
	//USART_Transmit(TWSR);//читаем статусный регистр
	I2C_StopCondition(); //Отправим условие STOP
	USART_Transmit(TWSR);//читаем статусный регистр
 	for(i=0;i<=31;i++)
  a6:	c0 17       	cp	r28, r16
  a8:	d1 07       	cpc	r29, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <main+0x5a>
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x64>

000000ae <EE_ReadByte>:
	return 0;
}

unsigned char EE_ReadByte(void)
{
	err1=0;
  ae:	10 92 60 00 	sts	0x0060, r1
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);//РІРєР»СЋС‡РёРј РїСЂРёРµРј РґР°РЅРЅС‹С…
  b2:	84 ec       	ldi	r24, 0xC4	; 196
  b4:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
  b6:	06 b6       	in	r0, 0x36	; 54
  b8:	07 fe       	sbrs	r0, 7
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <EE_ReadByte+0x8>
	if ((TWSR & 0xF8) != TW_MR_DATA_ASK)  err1=1;
  bc:	81 b1       	in	r24, 0x01	; 1
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	80 35       	cpi	r24, 0x50	; 80
  c2:	21 f0       	breq	.+8      	; 0xcc <EE_ReadByte+0x1e>
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 93 60 00 	sts	0x0060, r24
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <EE_ReadByte+0x22>
	else err1=0;
  cc:	10 92 60 00 	sts	0x0060, r1
	return TWDR;
  d0:	83 b1       	in	r24, 0x03	; 3
}
  d2:	08 95       	ret

000000d4 <EE_ReadLastByte>:

unsigned char EE_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);//РІРєР»СЋС‡РёРј РїСЂРёРµРј РґР°РЅРЅС‹С…
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
  d8:	06 b6       	in	r0, 0x36	; 54
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <EE_ReadLastByte+0x4>
	if ((TWSR & 0xF8) != TW_MR_DATA_NASK)  err1=1;
  de:	81 b1       	in	r24, 0x01	; 1
  e0:	88 7f       	andi	r24, 0xF8	; 248
  e2:	88 35       	cpi	r24, 0x58	; 88
  e4:	21 f0       	breq	.+8      	; 0xee <EE_ReadLastByte+0x1a>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 60 00 	sts	0x0060, r24
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <EE_ReadLastByte+0x1e>
	else err1=0;
  ee:	10 92 60 00 	sts	0x0060, r1
	return TWDR;
  f2:	83 b1       	in	r24, 0x03	; 3
  f4:	08 95       	ret

000000f6 <I2C_Init>:
п»ї#include "twi.h"

void I2C_Init(void)
{
	TWBR=0x20; //СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 8 РјР“С† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 100 РєР“С†)
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	80 b9       	out	0x00, r24	; 0
  fa:	08 95       	ret

000000fc <I2C_StartCondition>:
}

void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  fc:	84 ea       	ldi	r24, 0xA4	; 164
  fe:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
 100:	06 b6       	in	r0, 0x36	; 54
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <I2C_StartCondition+0x4>
}
 106:	08 95       	ret

00000108 <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 108:	84 e9       	ldi	r24, 0x94	; 148
 10a:	86 bf       	out	0x36, r24	; 54
 10c:	08 95       	ret

0000010e <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR=c;//Р·Р°РїРёС€РµРј Р±Р°Р№С‚ РІ СЂРµРіРёСЃС‚СЂ РґР°РЅРЅС‹С…
 10e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);//РІРєР»СЋС‡РёРј РїРµСЂРµРґР°С‡Сѓ РґР°РЅРЅС‹С…
 110:	84 e8       	ldi	r24, 0x84	; 132
 112:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN	
 114:	06 b6       	in	r0, 0x36	; 54
 116:	07 fe       	sbrs	r0, 7
 118:	fd cf       	rjmp	.-6      	; 0x114 <I2C_SendByte+0x6>
}
 11a:	08 95       	ret

0000011c <USART_Init>:
#include "usart.h"

void USART_Init( unsigned int ubrr)//Инициализация модуля USART
{
		//Зададим скорость работы USART 115200
		UBRRH = (unsigned char)(ubrr>>8);
 11c:	90 bd       	out	0x20, r25	; 32
		UBRRL = (unsigned char)ubrr;
 11e:	89 b9       	out	0x09, r24	; 9
		
		UCSRB=(1<<RXEN)|( 1<<TXEN); //Включаем прием и передачу по USART
 120:	88 e1       	ldi	r24, 0x18	; 24
 122:	8a b9       	out	0x0a, r24	; 10
		UCSRB |= (1<<RXCIE); //Разрешаем прерывание при передаче
 124:	57 9a       	sbi	0x0a, 7	; 10
		UCSRA |= (1<<U2X); // Для 8 мгц
 126:	59 9a       	sbi	0x0b, 1	; 11
		UCSRC = (1<<URSEL)|(1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);// Обращаемся именно к регистру UCSRC (URSEL=1),
 128:	8e e8       	ldi	r24, 0x8E	; 142
 12a:	80 bd       	out	0x20, r24	; 32
 12c:	08 95       	ret

0000012e <USART_Transmit>:
		//1 стоп-бит (USBS=0), 8-бит посылка (UCSZ1=1 и UCSZ0=1)
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSRA & (1<<UDRE)) ); //Ожидание опустошения буфера приема
 12e:	5d 9b       	sbis	0x0b, 5	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <USART_Transmit>
	UDR = data; //Начало передачи данных
 132:	8c b9       	out	0x0c, r24	; 12
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
