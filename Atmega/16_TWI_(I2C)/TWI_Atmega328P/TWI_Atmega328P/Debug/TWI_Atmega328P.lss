
TWI_Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800100  00800100  0000023e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a7e  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080c  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ff  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041f  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009a  00000000  00000000  00002113  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000021ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 32       	cpi	r26, 0x21	; 33
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <EE_ReadByte>:
	return 0;
}

unsigned char EE_ReadByte(void)
{
	err1=0;
  90:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);//РІРєР»СЋС‡РёРј РїСЂРёРµРј РґР°РЅРЅС‹С…
  94:	84 ec       	ldi	r24, 0xC4	; 196
  96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
  9a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  9e:	88 23       	and	r24, r24
  a0:	e4 f7       	brge	.-8      	; 0x9a <EE_ReadByte+0xa>
	if ((TWSR & 0xF8) != TW_MR_DATA_ASK)  err1=1;
  a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	80 35       	cpi	r24, 0x50	; 80
  aa:	21 f0       	breq	.+8      	; 0xb4 <EE_ReadByte+0x24>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <EE_ReadByte+0x28>
	else err1=0;
  b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	return TWDR;
  b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
  bc:	08 95       	ret

000000be <EE_ReadLastByte>:

unsigned char EE_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);//РІРєР»СЋС‡РёРј РїСЂРёРµРј РґР°РЅРЅС‹С…
  be:	84 e8       	ldi	r24, 0x84	; 132
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR&(1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
  c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	88 23       	and	r24, r24
  ca:	e4 f7       	brge	.-8      	; 0xc4 <EE_ReadLastByte+0x6>
	if ((TWSR & 0xF8) != TW_MR_DATA_NASK)  err1=1;
  cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d0:	88 7f       	andi	r24, 0xF8	; 248
  d2:	88 35       	cpi	r24, 0x58	; 88
  d4:	21 f0       	breq	.+8      	; 0xde <EE_ReadLastByte+0x20>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <EE_ReadLastByte+0x24>
	else err1=0;
  de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	return TWDR;
  e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  e6:	08 95       	ret

000000e8 <main>:

int main(void)
{
	int i=0;
	//USART_Init();
	I2C_Init();
  e8:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_Init>
	
	//Чтение
	I2C_StartCondition(); //Отправим условие START
  ec:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_StartCondition>
	USART_Transmit(TWSR);//читаем статусный регистр
  f0:	c9 eb       	ldi	r28, 0xB9	; 185
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	88 81       	ld	r24, Y
  f6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Transmit>
	/*
		I2C device found at address 0x50 !
		I2C device found at address 0x68 !
	*/
	I2C_SendByte(0b10100000);//передаем адрес устройства и бит записи (0)
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SendByte>
//	I2C_SendByte(0x50);//передаем адрес устройства и бит записи (0)

	USART_Transmit(TWSR);//читаем статусный регистр
 100:	88 81       	ld	r24, Y
 102:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Transmit>
	I2C_SendByte(0);//передаем старшую часть адреса ячейки памяти
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SendByte>
	USART_Transmit(TWSR);//читаем статусный регистр
 10c:	88 81       	ld	r24, Y
 10e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Transmit>
	I2C_SendByte(0);//передаем младшую часть адреса ячейки памяти
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SendByte>
	USART_Transmit(TWSR);//читаем статусный регистр
 118:	88 81       	ld	r24, Y
 11a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Transmit>
 	I2C_StartCondition(); //Отправим условие START
 11e:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_StartCondition>
 	USART_Transmit(TWSR);//читаем статусный регистр
 122:	88 81       	ld	r24, Y
 124:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Transmit>
	 
 	I2C_SendByte(0b10100001);//передаем адрес устройства и бит чтения (1)
 128:	81 ea       	ldi	r24, 0xA1	; 161
 12a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_SendByte>
 	USART_Transmit(TWSR);//читаем статусный регистр
 12e:	88 81       	ld	r24, Y
 130:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Transmit>
 	for(i=0;i<=30;i++)
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	07 c0       	rjmp	.+14     	; 0x148 <main+0x60>
 	{
 		bt[i] = EE_ReadByte(); //прочитаем байт из микросхемы
 13a:	0e 94 48 00 	call	0x90	; 0x90 <EE_ReadByte>
 13e:	fe 01       	movw	r30, r28
 140:	ef 5f       	subi	r30, 0xFF	; 255
 142:	fe 4f       	sbci	r31, 0xFE	; 254
 144:	80 83       	st	Z, r24
 	I2C_StartCondition(); //Отправим условие START
 	USART_Transmit(TWSR);//читаем статусный регистр
	 
 	I2C_SendByte(0b10100001);//передаем адрес устройства и бит чтения (1)
 	USART_Transmit(TWSR);//читаем статусный регистр
 	for(i=0;i<=30;i++)
 146:	21 96       	adiw	r28, 0x01	; 1
 148:	cf 31       	cpi	r28, 0x1F	; 31
 14a:	d1 05       	cpc	r29, r1
 14c:	b4 f3       	brlt	.-20     	; 0x13a <main+0x52>
 	{
 		bt[i] = EE_ReadByte(); //прочитаем байт из микросхемы
 		//USART_Transmit(TWSR);//читаем статусный регистр
 	}
 	bt[31] = EE_ReadLastByte(); //прочитаем байт из микросхемы
 14e:	0e 94 5f 00 	call	0xbe	; 0xbe <EE_ReadLastByte>
 152:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bt+0x1f>
	//USART_Transmit(TWSR);//читаем статусный регистр
	I2C_StopCondition(); //Отправим условие STOP
 156:	0e 94 ce 00 	call	0x19c	; 0x19c <I2C_StopCondition>
	USART_Transmit(TWSR);//читаем статусный регистр
 15a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 15e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Transmit>
 	for(i=0;i<=31;i++)
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
 166:	07 c0       	rjmp	.+14     	; 0x176 <main+0x8e>
 	{
 		USART_Transmit(bt[i]); //отправим считанные байты в ПК
 168:	fe 01       	movw	r30, r28
 16a:	ef 5f       	subi	r30, 0xFF	; 255
 16c:	fe 4f       	sbci	r31, 0xFE	; 254
 16e:	80 81       	ld	r24, Z
 170:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <USART_Transmit>
 	}
 	bt[31] = EE_ReadLastByte(); //прочитаем байт из микросхемы
	//USART_Transmit(TWSR);//читаем статусный регистр
	I2C_StopCondition(); //Отправим условие STOP
	USART_Transmit(TWSR);//читаем статусный регистр
 	for(i=0;i<=31;i++)
 174:	21 96       	adiw	r28, 0x01	; 1
 176:	c0 32       	cpi	r28, 0x20	; 32
 178:	d1 05       	cpc	r29, r1
 17a:	b4 f3       	brlt	.-20     	; 0x168 <main+0x80>
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x94>

0000017e <I2C_Init>:



void I2C_Init(void)
{
	TWBR=0x20;			//СЃРєРѕСЂРѕСЃС‚СЊ РїРµСЂРµРґР°С‡Рё (РїСЂРё 8 РјР“С† РїРѕР»СѓС‡Р°РµС‚СЃСЏ 100 РєР“С†)
 17e:	e8 eb       	ldi	r30, 0xB8	; 184
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	80 83       	st	Z, r24
	TWBR = BIT_RATE;
 186:	8e e0       	ldi	r24, 0x0E	; 14
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <I2C_StartCondition>:
}

void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 18c:	84 ea       	ldi	r24, 0xA4	; 164
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR&(1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN
 192:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 196:	88 23       	and	r24, r24
 198:	e4 f7       	brge	.-8      	; 0x192 <I2C_StartCondition+0x6>
}
 19a:	08 95       	ret

0000019c <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 19c:	84 e9       	ldi	r24, 0x94	; 148
 19e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a2:	08 95       	ret

000001a4 <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR=c;//Р·Р°РїРёС€РµРј Р±Р°Р№С‚ РІ СЂРµРіРёСЃС‚СЂ РґР°РЅРЅС‹С…
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN);//РІРєР»СЋС‡РёРј РїРµСЂРµРґР°С‡Сѓ РґР°РЅРЅС‹С…
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR&(1<<TWINT)));//РїРѕРґРѕР¶РґРµРј РїРѕРєР° СѓСЃС‚Р°РЅРѕРІРёС‚СЃСЏ TWIN	
 1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b2:	88 23       	and	r24, r24
 1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_SendByte+0xa>
}
 1b6:	08 95       	ret

000001b8 <USART_Transmit>:
	return DataByte;
}

void USART_Transmit(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 1b8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1bc:	95 ff       	sbrs	r25, 5
 1be:	fc cf       	rjmp	.-8      	; 0x1b8 <USART_Transmit>
	UDR0 = DataByte;
 1c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
