
TWI_Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd4  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084c  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000558  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023a  00000000  00000000  0000226e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 88 00 	call	0x110	; 0x110 <main>
  78:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <EE_Write_Byte_Data>:
#define I2C_ADDRESS_WITH_READ I2C_ADDRESS|READ
#define I2C_ADDRESS_WITH_WRITE I2C_ADDRESS|WRITE


int EE_Write_Byte_Data(unsigned char data, unsigned char first_address, unsigned char second_address)
{
  80:	1f 93       	push	r17
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	c8 2f       	mov	r28, r24
  88:	16 2f       	mov	r17, r22
  8a:	d4 2f       	mov	r29, r20
	int i = 0;
	
	I2C_Init();
  8c:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_Init>
	I2C_Start();
  90:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Start>
	I2C_Send_Data(I2C_ADDRESS_WITH_WRITE);
  94:	80 ea       	ldi	r24, 0xA0	; 160
  96:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Send_Data>
	I2C_Send_Data(first_address);
  9a:	81 2f       	mov	r24, r17
  9c:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Send_Data>
	I2C_Send_Data(second_address);
  a0:	8d 2f       	mov	r24, r29
  a2:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Send_Data>
	I2C_Send_Data(data);
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Send_Data>
	
	if((I2C_STATUS & NO_RELEVANT_INFO_AVAILABLE) != TWI_DATA_TRANSMITTED_ACK_RECEIVED)
  ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	88 32       	cpi	r24, 0x28	; 40
  b4:	19 f4       	brne	.+6      	; 0xbc <EE_Write_Byte_Data+0x3c>
#define I2C_ADDRESS_WITH_WRITE I2C_ADDRESS|WRITE


int EE_Write_Byte_Data(unsigned char data, unsigned char first_address, unsigned char second_address)
{
	int i = 0;
  b6:	c0 e0       	ldi	r28, 0x00	; 0
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <EE_Write_Byte_Data+0x40>
	I2C_Send_Data(second_address);
	I2C_Send_Data(data);
	
	if((I2C_STATUS & NO_RELEVANT_INFO_AVAILABLE) != TWI_DATA_TRANSMITTED_ACK_RECEIVED)
	{
		i = 1;
  bc:	c1 e0       	ldi	r28, 0x01	; 1
  be:	d0 e0       	ldi	r29, 0x00	; 0
	}
	I2C_Stop();
  c0:	0e 94 ab 00 	call	0x156	; 0x156 <I2C_Stop>
	return i;
}
  c4:	ce 01       	movw	r24, r28
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	1f 91       	pop	r17
  cc:	08 95       	ret

000000ce <EE_ReadByte_Data>:


unsigned char EE_ReadByte_Data(unsigned char first_address, unsigned char second_address)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	d8 2f       	mov	r29, r24
  d4:	c6 2f       	mov	r28, r22
	I2C_Init();
  d6:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_Init>
	I2C_Start();
  da:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Start>
	I2C_Send_Data(I2C_ADDRESS_WITH_WRITE);
  de:	80 ea       	ldi	r24, 0xA0	; 160
  e0:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Send_Data>
	I2C_Send_Data(first_address);
  e4:	8d 2f       	mov	r24, r29
  e6:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Send_Data>
	I2C_Send_Data(second_address);
  ea:	8c 2f       	mov	r24, r28
  ec:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Send_Data>
	
	I2C_Start();
  f0:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Start>
	I2C_Start();
  f4:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Start>
	I2C_Send_Data(I2C_ADDRESS_WITH_READ);
  f8:	82 ea       	ldi	r24, 0xA2	; 162
  fa:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Send_Data>
	unsigned char readed = I2C_Read_Data();
  fe:	0e 94 c1 00 	call	0x182	; 0x182 <I2C_Read_Data>
 102:	c8 2f       	mov	r28, r24
	I2C_Stop();
 104:	0e 94 ab 00 	call	0x156	; 0x156 <I2C_Stop>
	return readed;

}
 108:	8c 2f       	mov	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <main>:
	I2C_Send_Data(0);				
	I2C_Send_Data(0);				
	I2C_Stop();			
	*/
	
	EE_Write_Byte_Data(0x5, 0x00, 0x00);
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	0e 94 40 00 	call	0x80	; 0x80 <EE_Write_Byte_Data>
	//EE_ReadByte();
	
	EE_ReadByte_Data(0x00, 0x00);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 67 00 	call	0xce	; 0xce <EE_ReadByte_Data>
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x12>

00000124 <send_telemetry>:



void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
 124:	0e 94 df 00 	call	0x1be	; 0x1be <USART_Transmit>
 128:	08 95       	ret

0000012a <I2C_Init>:
ï»¿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
 12a:	8e e0       	ldi	r24, 0x0E	; 14
 12c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	USART_Init();
 130:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <USART_Init>
	send_telemetry(I2C_STATUS);
 134:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 138:	0e 94 92 00 	call	0x124	; 0x124 <send_telemetry>
 13c:	08 95       	ret

0000013e <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
 13e:	84 ea       	ldi	r24, 0xA4	; 164
 140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 144:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 148:	88 23       	and	r24, r24
 14a:	e4 f7       	brge	.-8      	; 0x144 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
 14c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 150:	0e 94 92 00 	call	0x124	; 0x124 <send_telemetry>
 154:	08 95       	ret

00000156 <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
 156:	84 e9       	ldi	r24, 0x94	; 148
 158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 15c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 160:	0e 94 92 00 	call	0x124	; 0x124 <send_telemetry>
 164:	08 95       	ret

00000166 <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 166:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 16a:	84 e8       	ldi	r24, 0x84	; 132
 16c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 170:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	88 23       	and	r24, r24
 176:	e4 f7       	brge	.-8      	; 0x170 <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 178:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17c:	0e 94 92 00 	call	0x124	; 0x124 <send_telemetry>
 180:	08 95       	ret

00000182 <I2C_Read_Data>:
}


unsigned char I2C_Read_Data(void)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	TWCR = TWI_Interrupt_Flag|TWI_Enable|TWI_Enable_Acknowledge;
 186:	84 ec       	ldi	r24, 0xC4	; 196
 188:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}		
 18c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 190:	88 23       	and	r24, r24
 192:	e4 f7       	brge	.-8      	; 0x18c <I2C_Read_Data+0xa>
	send_telemetry(TWDR);							
 194:	cb eb       	ldi	r28, 0xBB	; 187
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	88 81       	ld	r24, Y
 19a:	0e 94 92 00 	call	0x124	; 0x124 <send_telemetry>
	return TWDR;
 19e:	88 81       	ld	r24, Y
	while(!(TWCR & (1<<TWINT)));//Ð¿Ð¾Ð´Ð¾Ð¶Ð´ÐµÐ¼ Ð¿Ð¾ÐºÐ° ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑÑ TWIN
	if ((TWSR & 0xF8) != TW_MR_DATA_ASK)  err1=1;
	else err1=0;
	return TWDR;
	*/
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 1a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1aa:	87 e6       	ldi	r24, 0x67	; 103
 1ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1b6:	88 e1       	ldi	r24, 0x18	; 24
 1b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1bc:	08 95       	ret

000001be <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 1be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c2:	95 ff       	sbrs	r25, 5
 1c4:	fc cf       	rjmp	.-8      	; 0x1be <USART_Transmit>
	UDR0 = data;
 1c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
