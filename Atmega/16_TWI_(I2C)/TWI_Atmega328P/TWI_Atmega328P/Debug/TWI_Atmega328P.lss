
TWI_Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c04  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086e  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000592  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000457  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000224  00000000  00000000  0000233b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  0000255f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  8e:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <EE_Write_Byte_Data>:
#define I2C_ADDRESS_WITH_WRITE I2C_ADDRESS|WRITE

unsigned char err1 = 20;

int EE_Write_Byte_Data(unsigned char data, unsigned char first_address, unsigned char second_address)
{
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	c8 2f       	mov	r28, r24
  9e:	16 2f       	mov	r17, r22
  a0:	d4 2f       	mov	r29, r20
	int i = 0;
	
	I2C_Init();
  a2:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Init>
	I2C_Start();
  a6:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Start>
	I2C_Send_Data(I2C_ADDRESS_WITH_WRITE);
  aa:	80 ea       	ldi	r24, 0xA0	; 160
  ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Send_Data>
	I2C_Send_Data(first_address);
  b0:	81 2f       	mov	r24, r17
  b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Send_Data>
	I2C_Send_Data(second_address);
  b6:	8d 2f       	mov	r24, r29
  b8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Send_Data>
	I2C_Send_Data(data);
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Send_Data>
	
	if((I2C_STATUS & NO_RELEVANT_INFO_AVAILABLE) != TWI_DATA_TRANSMITTED_ACK_RECEIVED)
  c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  c6:	88 7f       	andi	r24, 0xF8	; 248
  c8:	88 32       	cpi	r24, 0x28	; 40
  ca:	19 f4       	brne	.+6      	; 0xd2 <EE_Write_Byte_Data+0x3c>

unsigned char err1 = 20;

int EE_Write_Byte_Data(unsigned char data, unsigned char first_address, unsigned char second_address)
{
	int i = 0;
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <EE_Write_Byte_Data+0x40>
	I2C_Send_Data(second_address);
	I2C_Send_Data(data);
	
	if((I2C_STATUS & NO_RELEVANT_INFO_AVAILABLE) != TWI_DATA_TRANSMITTED_ACK_RECEIVED)
	{
		i = 1;
  d2:	c1 e0       	ldi	r28, 0x01	; 1
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	I2C_Stop();
  d6:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Stop>
	return i;
}
  da:	ce 01       	movw	r24, r28
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	08 95       	ret

000000e4 <EE_ReadByte_Data>:


unsigned char EE_ReadByte_Data(unsigned char first_address, unsigned char second_address)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	d8 2f       	mov	r29, r24
  ea:	c6 2f       	mov	r28, r22
	I2C_Init();
  ec:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Init>
	I2C_Start();
  f0:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Start>
	I2C_Send_Data(I2C_ADDRESS_WITH_WRITE);
  f4:	80 ea       	ldi	r24, 0xA0	; 160
  f6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Send_Data>
	I2C_Send_Data(first_address);
  fa:	8d 2f       	mov	r24, r29
  fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Send_Data>
	I2C_Send_Data(second_address);
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Send_Data>
	
	I2C_Start();
 106:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Start>
	I2C_Send_Data(I2C_ADDRESS_WITH_READ);
 10a:	82 ea       	ldi	r24, 0xA2	; 162
 10c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Send_Data>
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);//включим прием данных
 110:	84 ec       	ldi	r24, 0xC4	; 196
 112:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
 116:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11a:	88 23       	and	r24, r24
 11c:	e4 f7       	brge	.-8      	; 0x116 <EE_ReadByte_Data+0x32>

		
	if ((TWSR & 0xF8) != TWI_DATA_RECEIVED_ACK_NOT_RETURNED) err1=1;
 11e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 122:	88 7f       	andi	r24, 0xF8	; 248
 124:	88 35       	cpi	r24, 0x58	; 88
 126:	21 f0       	breq	.+8      	; 0x130 <EE_ReadByte_Data+0x4c>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12e:	02 c0       	rjmp	.+4      	; 0x134 <EE_ReadByte_Data+0x50>
	else err1=0;
 130:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	

	
	
	//unsigned char readed = I2C_Read_Data();
	I2C_Stop();
 134:	0e 94 ca 00 	call	0x194	; 0x194 <I2C_Stop>
	return TWDR;
 138:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <main>:
	I2C_Send_Data(0);				
	I2C_Send_Data(0);				
	I2C_Stop();			
	*/
	
	EE_Write_Byte_Data(0x07, 0x01, 0x00);
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	87 e0       	ldi	r24, 0x07	; 7
 148:	0e 94 4b 00 	call	0x96	; 0x96 <EE_Write_Byte_Data>
	//EE_ReadByte();
	
	unsigned char readed = EE_ReadByte_Data(0x01, 0x00);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 72 00 	call	0xe4	; 0xe4 <EE_ReadByte_Data>
	USART_Transmit(readed);
 154:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit>
	USART_Transmit(err1);
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit>
 160:	ff cf       	rjmp	.-2      	; 0x160 <main+0x1e>

00000162 <send_telemetry>:



void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
 162:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_Transmit>
 166:	08 95       	ret

00000168 <I2C_Init>:
﻿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
 168:	8e e0       	ldi	r24, 0x0E	; 14
 16a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	USART_Init();
 16e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Init>
	send_telemetry(I2C_STATUS);
 172:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 176:	0e 94 b1 00 	call	0x162	; 0x162 <send_telemetry>
 17a:	08 95       	ret

0000017c <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
 17c:	84 ea       	ldi	r24, 0xA4	; 164
 17e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 182:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 186:	88 23       	and	r24, r24
 188:	e4 f7       	brge	.-8      	; 0x182 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
 18a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 18e:	0e 94 b1 00 	call	0x162	; 0x162 <send_telemetry>
 192:	08 95       	ret

00000194 <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
 194:	84 e9       	ldi	r24, 0x94	; 148
 196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 19a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 19e:	0e 94 b1 00 	call	0x162	; 0x162 <send_telemetry>
 1a2:	08 95       	ret

000001a4 <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 1a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 1ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b2:	88 23       	and	r24, r24
 1b4:	e4 f7       	brge	.-8      	; 0x1ae <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 1b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1ba:	0e 94 b1 00 	call	0x162	; 0x162 <send_telemetry>
 1be:	08 95       	ret

000001c0 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 1c0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1c4:	87 e6       	ldi	r24, 0x67	; 103
 1c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1d6:	08 95       	ret

000001d8 <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 1d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1dc:	95 ff       	sbrs	r25, 5
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <USART_Transmit>
	UDR0 = data;
 1e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
