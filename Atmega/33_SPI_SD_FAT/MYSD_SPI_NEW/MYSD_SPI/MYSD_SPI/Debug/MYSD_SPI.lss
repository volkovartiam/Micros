
MYSD_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00001b70  00001c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000205  00800186  00800186  00001c8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f83  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ad  00000000  00000000  00004dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017db  00000000  00000000  00005674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  00006e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00007440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c73  00000000  00000000  0000793d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e7       	ldi	r30, 0x70	; 112
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 38       	cpi	r26, 0x86	; 134
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a6 e8       	ldi	r26, 0x86	; 134
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 38       	cpi	r26, 0x8B	; 139
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 13 03 	call	0x626	; 0x626 <main>
      9e:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sendhalfbyte>:

//----------------------------------------
void sendhalfbyte(unsigned char c)
{
	c<<=4;
	e1; //включаем линию Е
      a6:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a8:	95 e8       	ldi	r25, 0x85	; 133
      aa:	9a 95       	dec	r25
      ac:	f1 f7       	brne	.-4      	; 0xaa <sendhalfbyte+0x4>
      ae:	00 00       	nop
	_delay_us(50);
	PORTD&=0b00001111; //стираем информацию на входах DB4-DB7, остальное не трогаем
      b0:	9b b1       	in	r25, 0x0b	; 11
      b2:	9f 70       	andi	r25, 0x0F	; 15
      b4:	9b b9       	out	0x0b, r25	; 11
	PORTD|=c;
      b6:	9b b1       	in	r25, 0x0b	; 11
﻿#include "lcd.h"

//----------------------------------------
void sendhalfbyte(unsigned char c)
{
	c<<=4;
      b8:	82 95       	swap	r24
      ba:	80 7f       	andi	r24, 0xF0	; 240
	e1; //включаем линию Е
	_delay_us(50);
	PORTD&=0b00001111; //стираем информацию на входах DB4-DB7, остальное не трогаем
	PORTD|=c;
      bc:	89 2b       	or	r24, r25
      be:	8b b9       	out	0x0b, r24	; 11
	e0; //выключаем линию Е
      c0:	5b 98       	cbi	0x0b, 3	; 11
      c2:	85 e8       	ldi	r24, 0x85	; 133
      c4:	8a 95       	dec	r24
      c6:	f1 f7       	brne	.-4      	; 0xc4 <sendhalfbyte+0x1e>
      c8:	00 00       	nop
      ca:	08 95       	ret

000000cc <sendbyte>:
	_delay_us(50);
}
//----------------------------------------
void sendbyte(unsigned char c, unsigned char mode)
{
      cc:	cf 93       	push	r28
      ce:	c8 2f       	mov	r28, r24
	if (mode==0) rs0;
      d0:	61 11       	cpse	r22, r1
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <sendbyte+0xc>
      d4:	5a 98       	cbi	0x0b, 2	; 11
      d6:	01 c0       	rjmp	.+2      	; 0xda <sendbyte+0xe>
	else         rs1;
      d8:	5a 9a       	sbi	0x0b, 2	; 11
	unsigned char hc=0;
	hc=c>>4;
	sendhalfbyte(hc); sendhalfbyte(c);
      da:	8c 2f       	mov	r24, r28
      dc:	82 95       	swap	r24
      de:	8f 70       	andi	r24, 0x0F	; 15
      e0:	0e 94 53 00 	call	0xa6	; 0xa6 <sendhalfbyte>
      e4:	8c 2f       	mov	r24, r28
      e6:	0e 94 53 00 	call	0xa6	; 0xa6 <sendhalfbyte>
}
      ea:	cf 91       	pop	r28
      ec:	08 95       	ret

000000ee <sendcharlcd>:
//----------------------------------------
void sendcharlcd(unsigned char c)
{
	sendbyte(c,1);
      ee:	61 e0       	ldi	r22, 0x01	; 1
      f0:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
      f4:	08 95       	ret

000000f6 <setpos>:
}
//----------------------------------------
void setpos(unsigned char x, unsigned y)
{
	switch(y)
      f6:	61 30       	cpi	r22, 0x01	; 1
      f8:	71 05       	cpc	r23, r1
      fa:	69 f0       	breq	.+26     	; 0x116 <setpos+0x20>
      fc:	38 f0       	brcs	.+14     	; 0x10c <setpos+0x16>
      fe:	62 30       	cpi	r22, 0x02	; 2
     100:	71 05       	cpc	r23, r1
     102:	79 f0       	breq	.+30     	; 0x122 <setpos+0x2c>
     104:	63 30       	cpi	r22, 0x03	; 3
     106:	71 05       	cpc	r23, r1
     108:	91 f0       	breq	.+36     	; 0x12e <setpos+0x38>
     10a:	08 95       	ret
	{
		case 0:
		sendbyte(x|0x80,0);
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	80 68       	ori	r24, 0x80	; 128
     110:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
		break;
     114:	08 95       	ret
		case 1:
		sendbyte((0x40+x)|0x80,0);
     116:	80 5c       	subi	r24, 0xC0	; 192
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	80 68       	ori	r24, 0x80	; 128
     11c:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
		break;
     120:	08 95       	ret
		case 2:
		sendbyte((0x14+x)|0x80,0);
     122:	8c 5e       	subi	r24, 0xEC	; 236
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	80 68       	ori	r24, 0x80	; 128
     128:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
		break;
     12c:	08 95       	ret
		case 3:
		sendbyte((0x54+x)|0x80,0);
     12e:	8c 5a       	subi	r24, 0xAC	; 172
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	80 68       	ori	r24, 0x80	; 128
     134:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
     138:	08 95       	ret

0000013a <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13a:	8f e2       	ldi	r24, 0x2F	; 47
     13c:	95 e7       	ldi	r25, 0x75	; 117
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <LCD_ini+0x4>
     142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_ini+0xa>
     144:	00 00       	nop
}
//----------------------------------------
void LCD_ini(void)
{
	_delay_ms(15); //Ждем 15 мс (стр 45)
	sendhalfbyte(0b00000011);
     146:	83 e0       	ldi	r24, 0x03	; 3
     148:	0e 94 53 00 	call	0xa6	; 0xa6 <sendhalfbyte>
     14c:	8f e3       	ldi	r24, 0x3F	; 63
     14e:	9f e1       	ldi	r25, 0x1F	; 31
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <LCD_ini+0x16>
     154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_ini+0x1c>
     156:	00 00       	nop
	_delay_ms(4);
	sendhalfbyte(0b00000011);
     158:	83 e0       	ldi	r24, 0x03	; 3
     15a:	0e 94 53 00 	call	0xa6	; 0xa6 <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15e:	87 ec       	ldi	r24, 0xC7	; 199
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <LCD_ini+0x28>
     166:	00 c0       	rjmp	.+0      	; 0x168 <LCD_ini+0x2e>
     168:	00 00       	nop
	_delay_us(100);
	sendhalfbyte(0b00000011);
     16a:	83 e0       	ldi	r24, 0x03	; 3
     16c:	0e 94 53 00 	call	0xa6	; 0xa6 <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     170:	8f ec       	ldi	r24, 0xCF	; 207
     172:	97 e0       	ldi	r25, 0x07	; 7
     174:	01 97       	sbiw	r24, 0x01	; 1
     176:	f1 f7       	brne	.-4      	; 0x174 <LCD_ini+0x3a>
     178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_ini+0x40>
     17a:	00 00       	nop
	_delay_ms(1);
	sendhalfbyte(0b00000010);
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	0e 94 53 00 	call	0xa6	; 0xa6 <sendhalfbyte>
     182:	8f ec       	ldi	r24, 0xCF	; 207
     184:	97 e0       	ldi	r25, 0x07	; 7
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <LCD_ini+0x4c>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_ini+0x52>
     18c:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00101000, 0); //4бит-режим (DL=0) и 2 линии (N=1)
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	88 e2       	ldi	r24, 0x28	; 40
     192:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
     196:	8f ec       	ldi	r24, 0xCF	; 207
     198:	97 e0       	ldi	r25, 0x07	; 7
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_ini+0x60>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <LCD_ini+0x66>
     1a0:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00001100, 0); //включаем изображение на дисплее (D=1), курсоры никакие не включаем (C=0, B=0)
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	8c e0       	ldi	r24, 0x0C	; 12
     1a6:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
     1aa:	8f ec       	ldi	r24, 0xCF	; 207
     1ac:	97 e0       	ldi	r25, 0x07	; 7
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_ini+0x74>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCD_ini+0x7a>
     1b4:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00000110, 0); //курсор (хоть он у нас и невидимый) будет двигаться влево
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	86 e0       	ldi	r24, 0x06	; 6
     1ba:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
     1be:	8f ec       	ldi	r24, 0xCF	; 207
     1c0:	97 e0       	ldi	r25, 0x07	; 7
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_ini+0x88>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_ini+0x8e>
     1c8:	00 00       	nop
     1ca:	08 95       	ret

000001cc <clearlcd>:
	_delay_ms(1);
}
//----------------------------------------
void clearlcd(void)
{
	sendbyte(0b00000001, 0);
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	0e 94 66 00 	call	0xcc	; 0xcc <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d4:	87 eb       	ldi	r24, 0xB7	; 183
     1d6:	9b e0       	ldi	r25, 0x0B	; 11
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <clearlcd+0xc>
     1dc:	00 c0       	rjmp	.+0      	; 0x1de <clearlcd+0x12>
     1de:	00 00       	nop
     1e0:	08 95       	ret

000001e2 <str_lcd>:
	_delay_us(1500);
}
//----------------------------------------
void str_lcd (char str1[])
{  
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
     1e8:	88 81       	ld	r24, Y
     1ea:	88 23       	and	r24, r24
     1ec:	31 f0       	breq	.+12     	; 0x1fa <str_lcd+0x18>
     1ee:	21 96       	adiw	r28, 0x01	; 1
	sendcharlcd(str1[n]);
     1f0:	0e 94 77 00 	call	0xee	; 0xee <sendcharlcd>
}
//----------------------------------------
void str_lcd (char str1[])
{  
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
     1f4:	89 91       	ld	r24, Y+
     1f6:	81 11       	cpse	r24, r1
     1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <str_lcd+0xe>
	sendcharlcd(str1[n]);
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <xmit_spi>:

//-----------------------------------------------------------------------
// SPI functions
//-----------------------------------------------------------------------
void xmit_spi (BYTE data)		// Send a byte 
{ BYTE i;
     200:	98 e0       	ldi	r25, 0x08	; 8

 for (i=0;i<8;i++)
  {
   if ((data&0x80)==0x00) PORTB&=~_BV(SD_DI);
     202:	88 23       	and	r24, r24
     204:	14 f0       	brlt	.+4      	; 0x20a <xmit_spi+0xa>
     206:	2b 98       	cbi	0x05, 3	; 5
     208:	01 c0       	rjmp	.+2      	; 0x20c <xmit_spi+0xc>
                     else PORTB|=_BV(SD_DI);
     20a:	2b 9a       	sbi	0x05, 3	; 5
   data=data<<1; 
     20c:	88 0f       	add	r24, r24
   PORTB|=_BV(SD_CLK);
     20e:	2d 9a       	sbi	0x05, 5	; 5
   asm("nop"); 
     210:	00 00       	nop
   PORTB&=~_BV(SD_CLK);
     212:	2d 98       	cbi	0x05, 5	; 5
     214:	91 50       	subi	r25, 0x01	; 1
// SPI functions
//-----------------------------------------------------------------------
void xmit_spi (BYTE data)		// Send a byte 
{ BYTE i;

 for (i=0;i<8;i++)
     216:	a9 f7       	brne	.-22     	; 0x202 <xmit_spi+0x2>
   data=data<<1; 
   PORTB|=_BV(SD_CLK);
   asm("nop"); 
   PORTB&=~_BV(SD_CLK);
  }
}
     218:	08 95       	ret

0000021a <rcv_spi>:

BYTE rcv_spi (void)				// Send 0xFF and receive a byte 
{ BYTE i, res=0;

 PORTB|=_BV(SD_DI);
     21a:	2b 9a       	sbi	0x05, 3	; 5
     21c:	98 e0       	ldi	r25, 0x08	; 8
   PORTB&=~_BV(SD_CLK);
  }
}

BYTE rcv_spi (void)				// Send 0xFF and receive a byte 
{ BYTE i, res=0;
     21e:	80 e0       	ldi	r24, 0x00	; 0

 PORTB|=_BV(SD_DI);

 for (i=0;i<8;i++)
  {
   PORTB|=_BV(SD_CLK);
     220:	2d 9a       	sbi	0x05, 5	; 5
   res=res<<1;
     222:	88 0f       	add	r24, r24
   if ((PINB&_BV(SD_DO))!=0x00) res=res|0x01;
     224:	1c 99       	sbic	0x03, 4	; 3
     226:	81 60       	ori	r24, 0x01	; 1
   PORTB&=~_BV(SD_CLK);
     228:	2d 98       	cbi	0x05, 5	; 5
   asm("nop");
     22a:	00 00       	nop
     22c:	91 50       	subi	r25, 0x01	; 1
BYTE rcv_spi (void)				// Send 0xFF and receive a byte 
{ BYTE i, res=0;

 PORTB|=_BV(SD_DI);

 for (i=0;i<8;i++)
     22e:	c1 f7       	brne	.-16     	; 0x220 <rcv_spi+0x6>
   if ((PINB&_BV(SD_DO))!=0x00) res=res|0x01;
   PORTB&=~_BV(SD_CLK);
   asm("nop");
  }
 return res;
}	/* Send 0xFF and receive a byte */
     230:	08 95       	ret

00000232 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		// Command byte 
	DWORD arg		// Argument 
)
{
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	c8 2f       	mov	r28, r24
     23e:	d4 2f       	mov	r29, r20
     240:	15 2f       	mov	r17, r21
     242:	06 2f       	mov	r16, r22
     244:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	// ACMD<n> is the command sequense of CMD55-CMD<n> 
     246:	88 23       	and	r24, r24
     248:	4c f4       	brge	.+18     	; 0x25c <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	ba 01       	movw	r22, r20
     250:	87 e7       	ldi	r24, 0x77	; 119
     252:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
		if (res > 1) return res;
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	40 f5       	brcc	.+80     	; 0x2aa <send_cmd+0x78>
{
	BYTE n, res;


	if (cmd & 0x80) {	// ACMD<n> is the command sequense of CMD55-CMD<n> 
		cmd &= 0x7F;
     25a:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	// Select the card 
	DESELECT();
     25c:	2a 9a       	sbi	0x05, 2	; 5
	rcv_spi();
     25e:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
	SELECT();
     262:	2a 98       	cbi	0x05, 2	; 5
	rcv_spi();
     264:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>

	// Send a command packet 
	xmit_spi(cmd);						// Start + Command index 
     268:	8c 2f       	mov	r24, r28
     26a:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		// Argument[31..24] 
     26e:	8f 2d       	mov	r24, r15
     270:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		// Argument[23..16] 
     274:	80 2f       	mov	r24, r16
     276:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			// Argument[15..8] 
     27a:	81 2f       	mov	r24, r17
     27c:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
	xmit_spi((BYTE)arg);				// Argument[7..0] 
     280:	8d 2f       	mov	r24, r29
     282:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
	n = 0x01;							// Dummy CRC + Stop 
	if (cmd == CMD0) n = 0x95;			// Valid CRC for CMD0(0) 
     286:	c0 34       	cpi	r28, 0x40	; 64
     288:	21 f0       	breq	.+8      	; 0x292 <send_cmd+0x60>
	if (cmd == CMD8) n = 0x87;			// Valid CRC for CMD8(0x1AA) 
     28a:	c8 34       	cpi	r28, 0x48	; 72
     28c:	21 f4       	brne	.+8      	; 0x296 <send_cmd+0x64>
     28e:	87 e8       	ldi	r24, 0x87	; 135
     290:	03 c0       	rjmp	.+6      	; 0x298 <send_cmd+0x66>
	xmit_spi((BYTE)(arg >> 24));		// Argument[31..24] 
	xmit_spi((BYTE)(arg >> 16));		// Argument[23..16] 
	xmit_spi((BYTE)(arg >> 8));			// Argument[15..8] 
	xmit_spi((BYTE)arg);				// Argument[7..0] 
	n = 0x01;							// Dummy CRC + Stop 
	if (cmd == CMD0) n = 0x95;			// Valid CRC for CMD0(0) 
     292:	85 e9       	ldi	r24, 0x95	; 149
     294:	01 c0       	rjmp	.+2      	; 0x298 <send_cmd+0x66>
	xmit_spi(cmd);						// Start + Command index 
	xmit_spi((BYTE)(arg >> 24));		// Argument[31..24] 
	xmit_spi((BYTE)(arg >> 16));		// Argument[23..16] 
	xmit_spi((BYTE)(arg >> 8));			// Argument[15..8] 
	xmit_spi((BYTE)arg);				// Argument[7..0] 
	n = 0x01;							// Dummy CRC + Stop 
     296:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			// Valid CRC for CMD0(0) 
	if (cmd == CMD8) n = 0x87;			// Valid CRC for CMD8(0x1AA) 
	xmit_spi(n);
     298:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
     29c:	ca e0       	ldi	r28, 0x0A	; 10

	// Receive a command response 
	n = 10;								// Wait for a valid response in timeout of 10 attempts 
	do {
		res = rcv_spi();
     29e:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
	} while ((res & 0x80) && --n);
     2a2:	88 23       	and	r24, r24
     2a4:	14 f4       	brge	.+4      	; 0x2aa <send_cmd+0x78>
     2a6:	c1 50       	subi	r28, 0x01	; 1
     2a8:	d1 f7       	brne	.-12     	; 0x29e <send_cmd+0x6c>

	return res;			// Return with the response value 
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	08 95       	ret

000002b6 <disk_readp>:
	BYTE *buff,		// Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) 
	DWORD lba,		// Sector number (LBA) 
	WORD ofs,		// Byte offset to read from (0..511) 
	WORD cnt		// Number of bytes to read (ofs + cnt mus be <= 512) 
)
{
     2b6:	cf 92       	push	r12
     2b8:	df 92       	push	r13
     2ba:	ef 92       	push	r14
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	7c 01       	movw	r14, r24
     2c8:	69 01       	movw	r12, r18
	BYTE rc;
	WORD bc;

//	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;

	if (!(CardType & CT_BLOCK))
     2ca:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <CardType>
     2ce:	83 fd       	sbrc	r24, 3
     2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <disk_readp+0x2e>
	{
		lba *= 512;		// Convert to byte address if needed 
     2d2:	03 2e       	mov	r0, r19
     2d4:	39 e0       	ldi	r19, 0x09	; 9
     2d6:	44 0f       	add	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	66 1f       	adc	r22, r22
     2dc:	77 1f       	adc	r23, r23
     2de:	3a 95       	dec	r19
     2e0:	d1 f7       	brne	.-12     	; 0x2d6 <disk_readp+0x20>
     2e2:	30 2d       	mov	r19, r0
	}
	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		// READ_SINGLE_BLOCK 
     2e4:	81 e5       	ldi	r24, 0x51	; 81
     2e6:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     2ea:	81 11       	cpse	r24, r1
     2ec:	30 c0       	rjmp	.+96     	; 0x34e <disk_readp+0x98>
     2ee:	c0 e3       	ldi	r28, 0x30	; 48
     2f0:	d5 e7       	ldi	r29, 0x75	; 117
		bc = 30000;
		do {							// Wait for data packet in timeout of 100ms 
			rc = rcv_spi();
     2f2:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
		} while (rc == 0xFF && --bc);
     2f6:	8f 3f       	cpi	r24, 0xFF	; 255
     2f8:	21 f4       	brne	.+8      	; 0x302 <disk_readp+0x4c>
     2fa:	21 97       	sbiw	r28, 0x01	; 1
     2fc:	d1 f7       	brne	.-12     	; 0x2f2 <disk_readp+0x3c>

	if (!(CardType & CT_BLOCK))
	{
		lba *= 512;		// Convert to byte address if needed 
	}
	res = RES_ERROR;
     2fe:	c1 e0       	ldi	r28, 0x01	; 1
     300:	29 c0       	rjmp	.+82     	; 0x354 <disk_readp+0x9e>
		bc = 30000;
		do {							// Wait for data packet in timeout of 100ms 
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {				// A data packet arrived 
     302:	8e 3f       	cpi	r24, 0xFE	; 254
     304:	31 f5       	brne	.+76     	; 0x352 <disk_readp+0x9c>
     306:	c2 e0       	ldi	r28, 0x02	; 2
     308:	d2 e0       	ldi	r29, 0x02	; 2
     30a:	c0 1b       	sub	r28, r16
     30c:	d1 0b       	sbc	r29, r17
			bc = 514 - ofs - cnt;
     30e:	cc 19       	sub	r28, r12
     310:	dd 09       	sbc	r29, r13

			// Skip leading bytes 
			if (ofs) {
     312:	c1 14       	cp	r12, r1
     314:	d1 04       	cpc	r13, r1
     316:	31 f0       	breq	.+12     	; 0x324 <disk_readp+0x6e>
				do rcv_spi(); while (--ofs);
     318:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	c8 1a       	sub	r12, r24
     320:	d1 08       	sbc	r13, r1
     322:	d1 f7       	brne	.-12     	; 0x318 <disk_readp+0x62>
			}

			// Receive a part of the sector 
			if (buff) {	// Store data to the memory 
     324:	e1 14       	cp	r14, r1
     326:	f1 04       	cpc	r15, r1
     328:	49 f0       	breq	.+18     	; 0x33c <disk_readp+0x86>
				do
					*buff++ = rcv_spi();
     32a:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     32e:	f7 01       	movw	r30, r14
     330:	81 93       	st	Z+, r24
     332:	7f 01       	movw	r14, r30
				while (--cnt);
     334:	01 50       	subi	r16, 0x01	; 1
     336:	11 09       	sbc	r17, r1
     338:	c1 f7       	brne	.-16     	; 0x32a <disk_readp+0x74>
     33a:	03 c0       	rjmp	.+6      	; 0x342 <disk_readp+0x8c>
			} else {	// Forward data to the outgoing stream (depends on the project) 
				do 
                ;//uart_transmit(rcv_spi());		// (Console output) 
				while (--cnt);
     33c:	01 50       	subi	r16, 0x01	; 1
     33e:	11 09       	sbc	r17, r1
     340:	e9 f7       	brne	.-6      	; 0x33c <disk_readp+0x86>
			}

			// Skip trailing bytes and CRC 
			do rcv_spi(); while (--bc);
     342:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     346:	21 97       	sbiw	r28, 0x01	; 1
     348:	e1 f7       	brne	.-8      	; 0x342 <disk_readp+0x8c>

			res = RES_OK;
     34a:	c0 e0       	ldi	r28, 0x00	; 0
     34c:	03 c0       	rjmp	.+6      	; 0x354 <disk_readp+0x9e>

	if (!(CardType & CT_BLOCK))
	{
		lba *= 512;		// Convert to byte address if needed 
	}
	res = RES_ERROR;
     34e:	c1 e0       	ldi	r28, 0x01	; 1
     350:	01 c0       	rjmp	.+2      	; 0x354 <disk_readp+0x9e>
     352:	c1 e0       	ldi	r28, 0x01	; 1
// Deselect the card and release SPI bus                                 
//-----------------------------------------------------------------------
static
void release_spi (void)
{
	rcv_spi();
     354:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
	}

	release_spi();

	return res;
}
     358:	8c 2f       	mov	r24, r28
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	08 95       	ret

0000036c <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	// Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) 
	DWORD sa			// Number of bytes to send, Sector number (LBA) or zero 
)
{
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
// 	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
// 	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;

	res = RES_ERROR;

	if (buff) {		// Send data bytes 
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	f1 f0       	breq	.+60     	; 0x3b8 <disk_writep+0x4c>
		bc = (WORD)sa;
     37c:	8a 01       	movw	r16, r20
		while (bc && wc) {		// Send data bytes to the card 
     37e:	45 2b       	or	r20, r21
     380:	09 f4       	brne	.+2      	; 0x384 <disk_writep+0x18>
     382:	6a c0       	rjmp	.+212    	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
     384:	c0 91 86 01 	lds	r28, 0x0186	; 0x800186 <__data_end>
     388:	d0 91 87 01 	lds	r29, 0x0187	; 0x800187 <__data_end+0x1>
     38c:	20 97       	sbiw	r28, 0x00	; 0
     38e:	09 f4       	brne	.+2      	; 0x392 <disk_writep+0x26>
     390:	65 c0       	rjmp	.+202    	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
     392:	7c 01       	movw	r14, r24
			xmit_spi(*buff++);
     394:	f7 01       	movw	r30, r14
     396:	81 91       	ld	r24, Z+
     398:	7f 01       	movw	r14, r30
     39a:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
			wc--; bc--;
     39e:	21 97       	sbiw	r28, 0x01	; 1
     3a0:	d0 93 87 01 	sts	0x0187, r29	; 0x800187 <__data_end+0x1>
     3a4:	c0 93 86 01 	sts	0x0186, r28	; 0x800186 <__data_end>
     3a8:	01 50       	subi	r16, 0x01	; 1
     3aa:	11 09       	sbc	r17, r1

	res = RES_ERROR;

	if (buff) {		// Send data bytes 
		bc = (WORD)sa;
		while (bc && wc) {		// Send data bytes to the card 
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <disk_writep+0x44>
     3ae:	58 c0       	rjmp	.+176    	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     3b0:	20 97       	sbiw	r28, 0x00	; 0
     3b2:	81 f7       	brne	.-32     	; 0x394 <disk_writep+0x28>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     3b4:	c0 e0       	ldi	r28, 0x00	; 0
     3b6:	57 c0       	rjmp	.+174    	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
	} else {
		if (sa) {	// Initiate sector write process 
     3b8:	41 15       	cp	r20, r1
     3ba:	51 05       	cpc	r21, r1
     3bc:	61 05       	cpc	r22, r1
     3be:	71 05       	cpc	r23, r1
     3c0:	01 f1       	breq	.+64     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
			if (!(CardType & CT_BLOCK)) sa *= 512;	// Convert to byte address if needed 
     3c2:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <CardType>
     3c6:	83 fd       	sbrc	r24, 3
     3c8:	09 c0       	rjmp	.+18     	; 0x3dc <disk_writep+0x70>
     3ca:	03 2e       	mov	r0, r19
     3cc:	39 e0       	ldi	r19, 0x09	; 9
     3ce:	44 0f       	add	r20, r20
     3d0:	55 1f       	adc	r21, r21
     3d2:	66 1f       	adc	r22, r22
     3d4:	77 1f       	adc	r23, r23
     3d6:	3a 95       	dec	r19
     3d8:	d1 f7       	brne	.-12     	; 0x3ce <disk_writep+0x62>
     3da:	30 2d       	mov	r19, r0
			if (send_cmd(CMD24, sa) == 0) {			// WRITE_SINGLE_BLOCK 
     3dc:	88 e5       	ldi	r24, 0x58	; 88
     3de:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     3e2:	81 11       	cpse	r24, r1
     3e4:	3f c0       	rjmp	.+126    	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
				xmit_spi(0xFF); xmit_spi(0xFE);		// Data block header 
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
     3ec:	8e ef       	ldi	r24, 0xFE	; 254
     3ee:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
				wc = 512;							// Set byte counter 
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
     3fa:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
				res = RES_OK;
     3fe:	c0 e0       	ldi	r28, 0x00	; 0
     400:	32 c0       	rjmp	.+100    	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
			}
		} else {	// Finalize sector write process 
			bc = wc + 2;
     402:	c0 91 86 01 	lds	r28, 0x0186	; 0x800186 <__data_end>
     406:	d0 91 87 01 	lds	r29, 0x0187	; 0x800187 <__data_end+0x1>
			while (bc--) xmit_spi(0);	// Fill left bytes and CRC with zeros 
     40a:	ce 3f       	cpi	r28, 0xFE	; 254
     40c:	ff ef       	ldi	r31, 0xFF	; 255
     40e:	df 07       	cpc	r29, r31
     410:	11 f4       	brne	.+4      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
     412:	08 c0       	rjmp	.+16     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
     414:	ec 01       	movw	r28, r24
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 00 01 	call	0x200	; 0x200 <xmit_spi>
     41c:	ce 01       	movw	r24, r28
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	21 96       	adiw	r28, 0x01	; 1
     422:	c1 f7       	brne	.-16     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
			if ((rcv_spi() & 0x1F) == 0x05) {	// Receive data resp and wait for end of write process in timeout of 300ms 
     424:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     428:	8f 71       	andi	r24, 0x1F	; 31
     42a:	85 30       	cpi	r24, 0x05	; 5
     42c:	29 f0       	breq	.+10     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
	static WORD wc;

// 	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
// 	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;

	res = RES_ERROR;
     42e:	c1 e0       	ldi	r28, 0x01	; 1
     430:	10 c0       	rjmp	.+32     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
			}
		} else {	// Finalize sector write process 
			bc = wc + 2;
			while (bc--) xmit_spi(0);	// Fill left bytes and CRC with zeros 
			if ((rcv_spi() & 0x1F) == 0x05) {	// Receive data resp and wait for end of write process in timeout of 300ms 
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	// Wait ready 
     432:	01 50       	subi	r16, 0x01	; 1
     434:	11 09       	sbc	r17, r1
     436:	02 c0       	rjmp	.+4      	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
     438:	08 ee       	ldi	r16, 0xE8	; 232
     43a:	1d ef       	ldi	r17, 0xFD	; 253
     43c:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     440:	8f 3f       	cpi	r24, 0xFF	; 255
     442:	19 f0       	breq	.+6      	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
     444:	01 15       	cp	r16, r1
     446:	11 05       	cpc	r17, r1
     448:	a1 f7       	brne	.-24     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
				if (bc) res = RES_OK;
     44a:	c1 e0       	ldi	r28, 0x01	; 1
     44c:	01 2b       	or	r16, r17
     44e:	09 f0       	breq	.+2      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     450:	c0 e0       	ldi	r28, 0x00	; 0
// Deselect the card and release SPI bus                                 
//-----------------------------------------------------------------------
static
void release_spi (void)
{
	rcv_spi();
     452:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     456:	07 c0       	rjmp	.+14     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
		bc = (WORD)sa;
		while (bc && wc) {		// Send data bytes to the card 
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
     458:	c0 e0       	ldi	r28, 0x00	; 0
     45a:	05 c0       	rjmp	.+10     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     45c:	c0 e0       	ldi	r28, 0x00	; 0
     45e:	03 c0       	rjmp	.+6      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     460:	c0 e0       	ldi	r28, 0x00	; 0
     462:	01 c0       	rjmp	.+2      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
	static WORD wc;

// 	if ((PINB&_BV(SD_INS))!=0x00) return RES_ERROR;
// 	if ((PINB&_BV(SD_WP))!=0x00) return RES_ERROR;

	res = RES_ERROR;
     464:	c1 e0       	ldi	r28, 0x01	; 1
			release_spi();
		}
	}

	return res;
}
     466:	8c 2f       	mov	r24, r28
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	08 95       	ret

00000476 <disk_initialize>:

//--------------------------------------------------------------------------
// Initialize Disk Drive                                                 
//--------------------------------------------------------------------------
DSTATUS disk_initialize (void)
{
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <disk_initialize+0x12>
     488:	00 d0       	rcall	.+0      	; 0x48a <disk_initialize+0x14>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	INIT_SPI();
     48e:	8c e1       	ldi	r24, 0x1C	; 28
     490:	85 b9       	out	0x05, r24	; 5
     492:	8c e2       	ldi	r24, 0x2C	; 44
     494:	84 b9       	out	0x04, r24	; 4

//	if ((PINB&_BV(SD_INS))!=0x00) return STA_NOINIT;

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
     496:	2a 99       	sbic	0x05, 2	; 5
     498:	ad c0       	rjmp	.+346    	; 0x5f4 <disk_initialize+0x17e>
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	ba 01       	movw	r22, r20
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 b6 01 	call	0x36c	; 0x36c <disk_writep>
     4a8:	a5 c0       	rjmp	.+330    	; 0x5f4 <disk_initialize+0x17e>
#endif
	for (n = 100; n; n--) rcv_spi();	// Dummy clocks 
     4aa:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     4ae:	11 50       	subi	r17, 0x01	; 1
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <disk_initialize+0x34>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			// Enter Idle state 
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	ba 01       	movw	r22, r20
     4b8:	80 e4       	ldi	r24, 0x40	; 64
     4ba:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <disk_initialize+0x4e>
     4c2:	7d c0       	rjmp	.+250    	; 0x5be <disk_initialize+0x148>
		if (send_cmd(CMD8, 0x1AA) == 1) {	// SDv2 
     4c4:	4a ea       	ldi	r20, 0xAA	; 170
     4c6:	51 e0       	ldi	r21, 0x01	; 1
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	88 e4       	ldi	r24, 0x48	; 72
     4ce:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <disk_initialize+0x62>
     4d6:	42 c0       	rjmp	.+132    	; 0x55c <disk_initialize+0xe6>
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	7c 01       	movw	r14, r24
     4de:	6e 01       	movw	r12, r28
     4e0:	95 e0       	ldi	r25, 0x05	; 5
     4e2:	c9 0e       	add	r12, r25
     4e4:	d1 1c       	adc	r13, r1
     4e6:	87 01       	movw	r16, r14

// 	  		setpos(0,3);
// 	  		str_lcd("SDv2");

			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		// Get trailing return value of R7 resp 
     4e8:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     4ec:	f8 01       	movw	r30, r16
     4ee:	81 93       	st	Z+, r24
     4f0:	8f 01       	movw	r16, r30
     4f2:	ec 15       	cp	r30, r12
     4f4:	fd 05       	cpc	r31, r13
     4f6:	c1 f7       	brne	.-16     	; 0x4e8 <disk_initialize+0x72>
//  			sprintf(str,"%02X",ocr[1]);
//  			str_lcd(str);
//  			setpos(17,0);
//  			sprintf(str,"%02X",ocr[0]);
//  			str_lcd(str);
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				// The card can work at vdd range of 2.7-3.6V 
     4f8:	8b 81       	ldd	r24, Y+3	; 0x03
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	09 f0       	breq	.+2      	; 0x500 <disk_initialize+0x8a>
     4fe:	61 c0       	rjmp	.+194    	; 0x5c2 <disk_initialize+0x14c>
     500:	8c 81       	ldd	r24, Y+4	; 0x04
     502:	8a 3a       	cpi	r24, 0xAA	; 170
     504:	31 f0       	breq	.+12     	; 0x512 <disk_initialize+0x9c>
#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
#endif
	for (n = 100; n; n--) rcv_spi();	// Dummy clocks 

	ty = 0;
     506:	f1 2c       	mov	r15, r1
     508:	6c c0       	rjmp	.+216    	; 0x5e2 <disk_initialize+0x16c>
//  			sprintf(str,"%02X",ocr[0]);
//  			str_lcd(str);
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				// The card can work at vdd range of 2.7-3.6V 
// 	  		setpos(5,3);
// 	  		str_lcd("AA01");
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	// Wait for leaving idle state (ACMD41 with HCS bit) 
     50a:	01 50       	subi	r16, 0x01	; 1
     50c:	11 09       	sbc	r17, r1
     50e:	19 f4       	brne	.+6      	; 0x516 <disk_initialize+0xa0>
     510:	5a c0       	rjmp	.+180    	; 0x5c6 <disk_initialize+0x150>
     512:	00 ee       	ldi	r16, 0xE0	; 224
     514:	1e e2       	ldi	r17, 0x2E	; 46
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e4       	ldi	r23, 0x40	; 64
     51e:	89 ee       	ldi	r24, 0xE9	; 233
     520:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     524:	81 11       	cpse	r24, r1
     526:	f1 cf       	rjmp	.-30     	; 0x50a <disk_initialize+0x94>
				if (tmr && send_cmd(CMD58, 0) == 0) {		// Check CCS bit in the OCR 
     528:	01 2b       	or	r16, r17
     52a:	09 f4       	brne	.+2      	; 0x52e <disk_initialize+0xb8>
     52c:	4e c0       	rjmp	.+156    	; 0x5ca <disk_initialize+0x154>
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	ba 01       	movw	r22, r20
     534:	8a e7       	ldi	r24, 0x7A	; 122
     536:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     53a:	81 11       	cpse	r24, r1
     53c:	48 c0       	rjmp	.+144    	; 0x5ce <disk_initialize+0x158>
// 			  		setpos(10,3);
// 					str_lcd("CCS");
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     53e:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
     542:	f7 01       	movw	r30, r14
     544:	81 93       	st	Z+, r24
     546:	7f 01       	movw	r14, r30
     548:	ec 15       	cp	r30, r12
     54a:	fd 05       	cpc	r31, r13
     54c:	c1 f7       	brne	.-16     	; 0x53e <disk_initialize+0xc8>
//  					sprintf(str,"%02X",ocr[1]);
//  					str_lcd(str);
//  					setpos(17,1);
//  					sprintf(str,"%02X",ocr[0]);
//  					str_lcd(str);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	// SDv2 (HC or SC) 
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	86 fd       	sbrc	r24, 6
     552:	3f c0       	rjmp	.+126    	; 0x5d2 <disk_initialize+0x15c>
     554:	68 94       	set
     556:	ff 24       	eor	r15, r15
     558:	f2 f8       	bld	r15, 2
     55a:	43 c0       	rjmp	.+134    	; 0x5e2 <disk_initialize+0x16c>
				}
			}
		} else {							// SDv1 or MMCv3 
			if (send_cmd(ACMD41, 0) <= 1) 	{
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	ba 01       	movw	r22, r20
     562:	89 ee       	ldi	r24, 0xE9	; 233
     564:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	38 f0       	brcs	.+14     	; 0x57a <disk_initialize+0x104>
				ty = CT_SD1; cmd = ACMD41;	// SDv1 
			} else {
				ty = CT_MMC; cmd = CMD1;	// MMCv3 
     56c:	ff 24       	eor	r15, r15
     56e:	f3 94       	inc	r15
     570:	0f 2e       	mov	r0, r31
     572:	f1 e4       	ldi	r31, 0x41	; 65
     574:	ef 2e       	mov	r14, r31
     576:	f0 2d       	mov	r31, r0
     578:	07 c0       	rjmp	.+14     	; 0x588 <disk_initialize+0x112>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	// SDv2 (HC or SC) 
				}
			}
		} else {							// SDv1 or MMCv3 
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	// SDv1 
     57a:	68 94       	set
     57c:	ff 24       	eor	r15, r15
     57e:	f1 f8       	bld	r15, 1
     580:	0f 2e       	mov	r0, r31
     582:	f9 ee       	ldi	r31, 0xE9	; 233
     584:	ef 2e       	mov	r14, r31
     586:	f0 2d       	mov	r31, r0
			} else {
				ty = CT_MMC; cmd = CMD1;	// MMCv3 
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	// Wait for leaving idle state 
     588:	08 ea       	ldi	r16, 0xA8	; 168
     58a:	11 e6       	ldi	r17, 0x61	; 97
     58c:	03 c0       	rjmp	.+6      	; 0x594 <disk_initialize+0x11e>
     58e:	01 50       	subi	r16, 0x01	; 1
     590:	11 09       	sbc	r17, r1
     592:	21 f1       	breq	.+72     	; 0x5dc <disk_initialize+0x166>
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	ba 01       	movw	r22, r20
     59a:	8e 2d       	mov	r24, r14
     59c:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     5a0:	81 11       	cpse	r24, r1
     5a2:	f5 cf       	rjmp	.-22     	; 0x58e <disk_initialize+0x118>
			if (!tmr || send_cmd(CMD16, 512) != 0)			// Set R/W block length to 512 
     5a4:	01 2b       	or	r16, r17
     5a6:	e1 f0       	breq	.+56     	; 0x5e0 <disk_initialize+0x16a>
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	52 e0       	ldi	r21, 0x02	; 2
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e5       	ldi	r24, 0x50	; 80
     5b2:	0e 94 19 01 	call	0x232	; 0x232 <send_cmd>
     5b6:	88 23       	and	r24, r24
     5b8:	a1 f0       	breq	.+40     	; 0x5e2 <disk_initialize+0x16c>
				ty = 0;
     5ba:	f1 2c       	mov	r15, r1
     5bc:	12 c0       	rjmp	.+36     	; 0x5e2 <disk_initialize+0x16c>
#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		// Finalize write process if it is in progress 
#endif
	for (n = 100; n; n--) rcv_spi();	// Dummy clocks 

	ty = 0;
     5be:	f1 2c       	mov	r15, r1
     5c0:	10 c0       	rjmp	.+32     	; 0x5e2 <disk_initialize+0x16c>
     5c2:	f1 2c       	mov	r15, r1
     5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <disk_initialize+0x16c>
     5c6:	f1 2c       	mov	r15, r1
     5c8:	0c c0       	rjmp	.+24     	; 0x5e2 <disk_initialize+0x16c>
     5ca:	f1 2c       	mov	r15, r1
     5cc:	0a c0       	rjmp	.+20     	; 0x5e2 <disk_initialize+0x16c>
     5ce:	f1 2c       	mov	r15, r1
     5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <disk_initialize+0x16c>
//  					sprintf(str,"%02X",ocr[1]);
//  					str_lcd(str);
//  					setpos(17,1);
//  					sprintf(str,"%02X",ocr[0]);
//  					str_lcd(str);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	// SDv2 (HC or SC) 
     5d2:	0f 2e       	mov	r0, r31
     5d4:	fc e0       	ldi	r31, 0x0C	; 12
     5d6:	ff 2e       	mov	r15, r31
     5d8:	f0 2d       	mov	r31, r0
     5da:	03 c0       	rjmp	.+6      	; 0x5e2 <disk_initialize+0x16c>
			} else {
				ty = CT_MMC; cmd = CMD1;	// MMCv3 
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	// Wait for leaving idle state 
			if (!tmr || send_cmd(CMD16, 512) != 0)			// Set R/W block length to 512 
				ty = 0;
     5dc:	f1 2c       	mov	r15, r1
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <disk_initialize+0x16c>
     5e0:	f1 2c       	mov	r15, r1
		}
	}
	CardType = ty;
     5e2:	f0 92 88 01 	sts	0x0188, r15	; 0x800188 <CardType>
// Deselect the card and release SPI bus                                 
//-----------------------------------------------------------------------
static
void release_spi (void)
{
	rcv_spi();
     5e6:	0e 94 0d 01 	call	0x21a	; 0x21a <rcv_spi>
//   	sprintf(str,"%d",CardType);
//   	setpos(0,1);
//   	str_lcd(str);
	release_spi();

	return ty ? 0 : STA_NOINIT;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	ff 20       	and	r15, r15
     5ee:	21 f0       	breq	.+8      	; 0x5f8 <disk_initialize+0x182>
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <disk_initialize+0x182>

//--------------------------------------------------------------------------
// Initialize Disk Drive                                                 
//--------------------------------------------------------------------------
DSTATUS disk_initialize (void)
{
     5f4:	14 e6       	ldi	r17, 0x64	; 100
     5f6:	59 cf       	rjmp	.-334    	; 0x4aa <disk_initialize+0x34>
//   	setpos(0,1);
//   	str_lcd(str);
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	08 95       	ret

00000612 <port_ini>:
//char buffer[512] ="Sel...ия";
char buffer2[512]={};//Буфер данных для чтения
//----------------------------------------
void port_ini(void)
{
 	PORTD=0x00;
     612:	1b b8       	out	0x0b, r1	; 11
 	DDRD=0xFF;
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	8a b9       	out	0x0a, r24	; 10
 	PORTB|=(1<<SS)|(1<<MISO)|(1<<MOSI);
     618:	85 b1       	in	r24, 0x05	; 5
     61a:	8c 61       	ori	r24, 0x1C	; 28
     61c:	85 b9       	out	0x05, r24	; 5
 	DDRB|=(1<<SS)|(1<<MOSI)|(1<<SCK);
     61e:	84 b1       	in	r24, 0x04	; 4
     620:	8c 62       	ori	r24, 0x2C	; 44
     622:	84 b9       	out	0x04, r24	; 4
     624:	08 95       	ret

00000626 <main>:
}
//----------------------------------------
int main(void)
{
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	ae 97       	sbiw	r28, 0x2e	; 46
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
	FATFS fs; //указатель на объект
	FRESULT res; //результат выполнения
	WORD s1;
	
	port_ini(); //инициализируем порты
     63a:	0e 94 09 03 	call	0x612	; 0x612 <port_ini>
	LCD_ini();  //инициализируем дисплей
     63e:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_ini>
	clearlcd();//очистим дисплей
     642:	0e 94 e6 00 	call	0x1cc	; 0x1cc <clearlcd>
	setpos(0,0);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
	str_lcd("Mount SD... ");
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
	res=pf_mount(&fs);
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	0e 94 c8 08 	call	0x1190	; 0x1190 <pf_mount>
    if(res==FR_OK) str_lcd("Done");
     660:	81 11       	cpse	r24, r1
     662:	05 c0       	rjmp	.+10     	; 0x66e <main+0x48>
     664:	8d e0       	ldi	r24, 0x0D	; 13
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     66c:	04 c0       	rjmp	.+8      	; 0x676 <main+0x50>
    else str_lcd("Error");
     66e:	82 e1       	ldi	r24, 0x12	; 18
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     676:	2f ef       	ldi	r18, 0xFF	; 255
     678:	89 e6       	ldi	r24, 0x69	; 105
     67a:	98 e1       	ldi	r25, 0x18	; 24
     67c:	21 50       	subi	r18, 0x01	; 1
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	90 40       	sbci	r25, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <main+0x56>
     684:	00 c0       	rjmp	.+0      	; 0x686 <main+0x60>
     686:	00 00       	nop
    _delay_ms(1000);
    setpos(0,3);
     688:	63 e0       	ldi	r22, 0x03	; 3
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Open file... ");
     692:	88 e1       	ldi	r24, 0x18	; 24
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
	res=pf_open("/123.txt"); //Попытка открыть файл 123.txt
     69a:	86 e2       	ldi	r24, 0x26	; 38
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <pf_open>
    if(res==FR_OK) str_lcd("Done");
     6a2:	81 11       	cpse	r24, r1
     6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <main+0x8a>
     6a6:	8d e0       	ldi	r24, 0x0D	; 13
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <main+0x92>
    else str_lcd("Error");
     6b0:	82 e1       	ldi	r24, 0x12	; 18
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     6b8:	2f ef       	ldi	r18, 0xFF	; 255
     6ba:	89 e6       	ldi	r24, 0x69	; 105
     6bc:	98 e1       	ldi	r25, 0x18	; 24
     6be:	21 50       	subi	r18, 0x01	; 1
     6c0:	80 40       	sbci	r24, 0x00	; 0
     6c2:	90 40       	sbci	r25, 0x00	; 0
     6c4:	e1 f7       	brne	.-8      	; 0x6be <main+0x98>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0xa2>
     6c8:	00 00       	nop
    _delay_ms(1000);
    setpos(0,2);
     6ca:	62 e0       	ldi	r22, 0x02	; 2
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Move pointer... ");
     6d4:	8f e2       	ldi	r24, 0x2F	; 47
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
	res=pf_lseek(0); //Установим курсор чтения на 0 в 123.txt
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	cb 01       	movw	r24, r22
     6e2:	0e 94 4e 0c 	call	0x189c	; 0x189c <pf_lseek>
    if(res==FR_OK) str_lcd("Done");
     6e6:	81 11       	cpse	r24, r1
     6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <main+0xce>
     6ea:	8d e0       	ldi	r24, 0x0D	; 13
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <main+0xd6>
    else str_lcd("Error");
     6f4:	82 e1       	ldi	r24, 0x12	; 18
     6f6:	91 e0       	ldi	r25, 0x01	; 1
     6f8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	89 e6       	ldi	r24, 0x69	; 105
     700:	98 e1       	ldi	r25, 0x18	; 24
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <main+0xdc>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <main+0xe6>
     70c:	00 00       	nop
    _delay_ms(1000);
    setpos(0,3);
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Read file... ");
     718:	80 e4       	ldi	r24, 0x40	; 64
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
	res=pf_read(buffer2,128,&s1);
     720:	ae 01       	movw	r20, r28
     722:	43 5d       	subi	r20, 0xD3	; 211
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	60 e8       	ldi	r22, 0x80	; 128
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	89 e8       	ldi	r24, 0x89	; 137
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <pf_read>
    if(res==FR_OK) str_lcd("Done");
     732:	81 11       	cpse	r24, r1
     734:	05 c0       	rjmp	.+10     	; 0x740 <main+0x11a>
     736:	8d e0       	ldi	r24, 0x0D	; 13
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     73e:	04 c0       	rjmp	.+8      	; 0x748 <main+0x122>
    else str_lcd("Error");
     740:	82 e1       	ldi	r24, 0x12	; 18
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	83 ed       	ldi	r24, 0xD3	; 211
     74c:	90 e3       	ldi	r25, 0x30	; 48
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	90 40       	sbci	r25, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <main+0x128>
     756:	00 c0       	rjmp	.+0      	; 0x758 <main+0x132>
     758:	00 00       	nop
    _delay_ms(2000);
    clearlcd();//очистим дисплей
     75a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <clearlcd>
    setpos(0,0);
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd(buffer2);
     768:	89 e8       	ldi	r24, 0x89	; 137
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     770:	2f ef       	ldi	r18, 0xFF	; 255
     772:	89 e6       	ldi	r24, 0x69	; 105
     774:	98 e1       	ldi	r25, 0x18	; 24
     776:	21 50       	subi	r18, 0x01	; 1
     778:	80 40       	sbci	r24, 0x00	; 0
     77a:	90 40       	sbci	r25, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <main+0x150>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <main+0x15a>
     780:	00 00       	nop
    _delay_ms(1000);
    setpos(0,1);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Unmout SD... ");
     78c:	8e e4       	ldi	r24, 0x4E	; 78
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_mount(0x00);//Демонтируем файловую систему карты
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 c8 08 	call	0x1190	; 0x1190 <pf_mount>
    if(res==FR_OK) str_lcd("Done");
     79c:	81 11       	cpse	r24, r1
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <main+0x184>
     7a0:	8d e0       	ldi	r24, 0x0D	; 13
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <main+0x18c>
    else str_lcd("Error");
     7aa:	82 e1       	ldi	r24, 0x12	; 18
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     7b2:	2f ef       	ldi	r18, 0xFF	; 255
     7b4:	89 e6       	ldi	r24, 0x69	; 105
     7b6:	98 e1       	ldi	r25, 0x18	; 24
     7b8:	21 50       	subi	r18, 0x01	; 1
     7ba:	80 40       	sbci	r24, 0x00	; 0
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <main+0x192>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <main+0x19c>
     7c2:	00 00       	nop
    _delay_ms(1000);
    setpos(0,2);
     7c4:	62 e0       	ldi	r22, 0x02	; 2
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Mount SD... ");
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_mount(&fs);
     7d6:	ce 01       	movw	r24, r28
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	0e 94 c8 08 	call	0x1190	; 0x1190 <pf_mount>
    if(res==FR_OK) str_lcd("Done");
     7de:	81 11       	cpse	r24, r1
     7e0:	05 c0       	rjmp	.+10     	; 0x7ec <main+0x1c6>
     7e2:	8d e0       	ldi	r24, 0x0D	; 13
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <main+0x1ce>
    else str_lcd("Error");
     7ec:	82 e1       	ldi	r24, 0x12	; 18
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     7f4:	2f ef       	ldi	r18, 0xFF	; 255
     7f6:	89 e6       	ldi	r24, 0x69	; 105
     7f8:	98 e1       	ldi	r25, 0x18	; 24
     7fa:	21 50       	subi	r18, 0x01	; 1
     7fc:	80 40       	sbci	r24, 0x00	; 0
     7fe:	90 40       	sbci	r25, 0x00	; 0
     800:	e1 f7       	brne	.-8      	; 0x7fa <main+0x1d4>
     802:	00 c0       	rjmp	.+0      	; 0x804 <main+0x1de>
     804:	00 00       	nop
    _delay_ms(1000);
    setpos(0,3);
     806:	63 e0       	ldi	r22, 0x03	; 3
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Open file... ");
     810:	88 e1       	ldi	r24, 0x18	; 24
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_open("/123.txt"); //Попытка открыть файл 123.txt, чтобы в него записать данные
     818:	86 e2       	ldi	r24, 0x26	; 38
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <pf_open>
    if(res==FR_OK) str_lcd("Done");
     820:	81 11       	cpse	r24, r1
     822:	05 c0       	rjmp	.+10     	; 0x82e <main+0x208>
     824:	8d e0       	ldi	r24, 0x0D	; 13
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     82c:	04 c0       	rjmp	.+8      	; 0x836 <main+0x210>
    else str_lcd("Error");
     82e:	82 e1       	ldi	r24, 0x12	; 18
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     836:	2f ef       	ldi	r18, 0xFF	; 255
     838:	83 ed       	ldi	r24, 0xD3	; 211
     83a:	90 e3       	ldi	r25, 0x30	; 48
     83c:	21 50       	subi	r18, 0x01	; 1
     83e:	80 40       	sbci	r24, 0x00	; 0
     840:	90 40       	sbci	r25, 0x00	; 0
     842:	e1 f7       	brne	.-8      	; 0x83c <main+0x216>
     844:	00 c0       	rjmp	.+0      	; 0x846 <main+0x220>
     846:	00 00       	nop
    _delay_ms(2000);
    sprintf(buffer2,"World Hello!");
     848:	8d e0       	ldi	r24, 0x0D	; 13
     84a:	ec e5       	ldi	r30, 0x5C	; 92
     84c:	f1 e0       	ldi	r31, 0x01	; 1
     84e:	a9 e8       	ldi	r26, 0x89	; 137
     850:	b1 e0       	ldi	r27, 0x01	; 1
     852:	01 90       	ld	r0, Z+
     854:	0d 92       	st	X+, r0
     856:	8a 95       	dec	r24
     858:	e1 f7       	brne	.-8      	; 0x852 <main+0x22c>
    clearlcd();//очистим дисплей
     85a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <clearlcd>
    setpos(0,0);
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Write data... ");
     868:	89 e6       	ldi	r24, 0x69	; 105
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_write(buffer2,strlen(buffer2),&s1);//Запишем текст из buffer2 в файл 123.txt
     870:	e9 e8       	ldi	r30, 0x89	; 137
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	01 90       	ld	r0, Z+
     876:	00 20       	and	r0, r0
     878:	e9 f7       	brne	.-6      	; 0x874 <main+0x24e>
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	bf 01       	movw	r22, r30
     87e:	69 58       	subi	r22, 0x89	; 137
     880:	71 40       	sbci	r23, 0x01	; 1
     882:	ae 01       	movw	r20, r28
     884:	43 5d       	subi	r20, 0xD3	; 211
     886:	5f 4f       	sbci	r21, 0xFF	; 255
     888:	89 e8       	ldi	r24, 0x89	; 137
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 3d 0b 	call	0x167a	; 0x167a <pf_write>
    if(res==FR_OK) str_lcd("Done");
     890:	81 11       	cpse	r24, r1
     892:	05 c0       	rjmp	.+10     	; 0x89e <main+0x278>
     894:	8d e0       	ldi	r24, 0x0D	; 13
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <main+0x280>
    else str_lcd("Error");
     89e:	82 e1       	ldi	r24, 0x12	; 18
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     8a6:	2f ef       	ldi	r18, 0xFF	; 255
     8a8:	89 e6       	ldi	r24, 0x69	; 105
     8aa:	98 e1       	ldi	r25, 0x18	; 24
     8ac:	21 50       	subi	r18, 0x01	; 1
     8ae:	80 40       	sbci	r24, 0x00	; 0
     8b0:	90 40       	sbci	r25, 0x00	; 0
     8b2:	e1 f7       	brne	.-8      	; 0x8ac <main+0x286>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <main+0x290>
     8b6:	00 00       	nop
    _delay_ms(1000);
    setpos(0,1);
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Finalise... ");
     8c2:	88 e7       	ldi	r24, 0x78	; 120
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_write(0,0,&s1);//Финализируем файл 123.txt
     8ca:	ae 01       	movw	r20, r28
     8cc:	43 5d       	subi	r20, 0xD3	; 211
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 3d 0b 	call	0x167a	; 0x167a <pf_write>
    if(res==FR_OK) str_lcd("Done");
     8dc:	81 11       	cpse	r24, r1
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <main+0x2c4>
     8e0:	8d e0       	ldi	r24, 0x0D	; 13
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <main+0x2cc>
    else str_lcd("Error");
     8ea:	82 e1       	ldi	r24, 0x12	; 18
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     8f2:	2f ef       	ldi	r18, 0xFF	; 255
     8f4:	89 e6       	ldi	r24, 0x69	; 105
     8f6:	98 e1       	ldi	r25, 0x18	; 24
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	80 40       	sbci	r24, 0x00	; 0
     8fc:	90 40       	sbci	r25, 0x00	; 0
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <main+0x2d2>
     900:	00 c0       	rjmp	.+0      	; 0x902 <__stack+0x3>
     902:	00 00       	nop
    _delay_ms(1000);
    setpos(0,2);
     904:	62 e0       	ldi	r22, 0x02	; 2
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Unmout SD... ");
     90e:	8e e4       	ldi	r24, 0x4E	; 78
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_mount(0x00);//Демонтируем файловую систему карты
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 c8 08 	call	0x1190	; 0x1190 <pf_mount>
    if(res==FR_OK) str_lcd("Done");
     91e:	81 11       	cpse	r24, r1
     920:	05 c0       	rjmp	.+10     	; 0x92c <__stack+0x2d>
     922:	8d e0       	ldi	r24, 0x0D	; 13
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0x35>
    else str_lcd("Error");
     92c:	82 e1       	ldi	r24, 0x12	; 18
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	89 e6       	ldi	r24, 0x69	; 105
     938:	98 e1       	ldi	r25, 0x18	; 24
     93a:	21 50       	subi	r18, 0x01	; 1
     93c:	80 40       	sbci	r24, 0x00	; 0
     93e:	90 40       	sbci	r25, 0x00	; 0
     940:	e1 f7       	brne	.-8      	; 0x93a <__stack+0x3b>
     942:	00 c0       	rjmp	.+0      	; 0x944 <__stack+0x45>
     944:	00 00       	nop
    _delay_ms(1000);
    setpos(0,3);
     946:	63 e0       	ldi	r22, 0x03	; 3
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Mount SD... ");
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_mount(&fs);
     958:	ce 01       	movw	r24, r28
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	0e 94 c8 08 	call	0x1190	; 0x1190 <pf_mount>
    if(res==FR_OK) str_lcd("Done");
     960:	81 11       	cpse	r24, r1
     962:	05 c0       	rjmp	.+10     	; 0x96e <__stack+0x6f>
     964:	8d e0       	ldi	r24, 0x0D	; 13
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     96c:	04 c0       	rjmp	.+8      	; 0x976 <__stack+0x77>
    else str_lcd("Error");
     96e:	82 e1       	ldi	r24, 0x12	; 18
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	83 ed       	ldi	r24, 0xD3	; 211
     97a:	90 e3       	ldi	r25, 0x30	; 48
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <__stack+0x7d>
     984:	00 c0       	rjmp	.+0      	; 0x986 <__stack+0x87>
     986:	00 00       	nop
    _delay_ms(2000);
    clearlcd();//очистим дисплей
     988:	0e 94 e6 00 	call	0x1cc	; 0x1cc <clearlcd>
    setpos(0,0);
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Open file... ");
     996:	88 e1       	ldi	r24, 0x18	; 24
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_open("/123.txt"); //Попытка открыть файл 123.txt
     99e:	86 e2       	ldi	r24, 0x26	; 38
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <pf_open>
    if(res==FR_OK) str_lcd("Done");
     9a6:	81 11       	cpse	r24, r1
     9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__stack+0xb5>
     9aa:	8d e0       	ldi	r24, 0x0D	; 13
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__stack+0xbd>
    else str_lcd("Error");
     9b4:	82 e1       	ldi	r24, 0x12	; 18
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     9bc:	2f ef       	ldi	r18, 0xFF	; 255
     9be:	89 e6       	ldi	r24, 0x69	; 105
     9c0:	98 e1       	ldi	r25, 0x18	; 24
     9c2:	21 50       	subi	r18, 0x01	; 1
     9c4:	80 40       	sbci	r24, 0x00	; 0
     9c6:	90 40       	sbci	r25, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <__stack+0xc3>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <__stack+0xcd>
     9cc:	00 00       	nop
    _delay_ms(1000);
    setpos(0,1);
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Move pointer... ");
     9d8:	8f e2       	ldi	r24, 0x2F	; 47
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_lseek(0); //Установим курсор чтения на 0 в 123.txt
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	cb 01       	movw	r24, r22
     9e6:	0e 94 4e 0c 	call	0x189c	; 0x189c <pf_lseek>
    if(res==FR_OK) str_lcd("Done");
     9ea:	81 11       	cpse	r24, r1
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <__stack+0xf9>
     9ee:	8d e0       	ldi	r24, 0x0D	; 13
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__stack+0x101>
    else str_lcd("Error");
     9f8:	82 e1       	ldi	r24, 0x12	; 18
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	89 e6       	ldi	r24, 0x69	; 105
     a04:	98 e1       	ldi	r25, 0x18	; 24
     a06:	21 50       	subi	r18, 0x01	; 1
     a08:	80 40       	sbci	r24, 0x00	; 0
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <__stack+0x107>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <__stack+0x111>
     a10:	00 00       	nop
    _delay_ms(1000);
    setpos(0,2);
     a12:	62 e0       	ldi	r22, 0x02	; 2
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Read file... ");
     a1c:	80 e4       	ldi	r24, 0x40	; 64
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_read(buffer2,128,&s1);
     a24:	ae 01       	movw	r20, r28
     a26:	43 5d       	subi	r20, 0xD3	; 211
     a28:	5f 4f       	sbci	r21, 0xFF	; 255
     a2a:	60 e8       	ldi	r22, 0x80	; 128
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	89 e8       	ldi	r24, 0x89	; 137
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <pf_read>
    if(res==FR_OK) str_lcd("Done");
     a36:	81 11       	cpse	r24, r1
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <__stack+0x145>
     a3a:	8d e0       	ldi	r24, 0x0D	; 13
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <__stack+0x14d>
    else str_lcd("Error");
     a44:	82 e1       	ldi	r24, 0x12	; 18
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     a4c:	2f ef       	ldi	r18, 0xFF	; 255
     a4e:	89 e6       	ldi	r24, 0x69	; 105
     a50:	98 e1       	ldi	r25, 0x18	; 24
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	80 40       	sbci	r24, 0x00	; 0
     a56:	90 40       	sbci	r25, 0x00	; 0
     a58:	e1 f7       	brne	.-8      	; 0xa52 <__stack+0x153>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <__stack+0x15d>
     a5c:	00 00       	nop
    _delay_ms(1000);
    setpos(0,3);
     a5e:	63 e0       	ldi	r22, 0x03	; 3
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd(buffer2);
     a68:	89 e8       	ldi	r24, 0x89	; 137
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     a70:	2f ef       	ldi	r18, 0xFF	; 255
     a72:	8d e3       	ldi	r24, 0x3D	; 61
     a74:	99 e4       	ldi	r25, 0x49	; 73
     a76:	21 50       	subi	r18, 0x01	; 1
     a78:	80 40       	sbci	r24, 0x00	; 0
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <__stack+0x177>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <__stack+0x181>
     a80:	00 00       	nop
    _delay_ms(3000);
    clearlcd();//очистим дисплей
     a82:	0e 94 e6 00 	call	0x1cc	; 0x1cc <clearlcd>
    setpos(0,0);
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 7b 00 	call	0xf6	; 0xf6 <setpos>
    str_lcd("Unmout SD... ");
     a90:	8e e4       	ldi	r24, 0x4E	; 78
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    res=pf_mount(0x00);//Демонтируем файловую систему карты
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 c8 08 	call	0x1190	; 0x1190 <pf_mount>
    if(res==FR_OK) str_lcd("Done");
     aa0:	81 11       	cpse	r24, r1
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <__stack+0x1af>
     aa4:	8d e0       	ldi	r24, 0x0D	; 13
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <__stack+0x1b7>
    else str_lcd("Error");
     aae:	82 e1       	ldi	r24, 0x12	; 18
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <str_lcd>
    while(1)
	{
	}
     ab6:	ff cf       	rjmp	.-2      	; 0xab6 <__stack+0x1b7>

00000ab8 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
	FATFS *fs = FatFs;
     abc:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <FatFs>
     ac0:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <FatFs+0x1>


	clst -= 2;
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	22 50       	subi	r18, 0x02	; 2
     aca:	31 09       	sbc	r19, r1
     acc:	41 09       	sbc	r20, r1
     ace:	51 09       	sbc	r21, r1
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     ad0:	80 85       	ldd	r24, Z+8	; 0x08
     ad2:	91 85       	ldd	r25, Z+9	; 0x09
     ad4:	a2 85       	ldd	r26, Z+10	; 0x0a
     ad6:	b3 85       	ldd	r27, Z+11	; 0x0b
     ad8:	02 97       	sbiw	r24, 0x02	; 2
     ada:	a1 09       	sbc	r26, r1
     adc:	b1 09       	sbc	r27, r1
     ade:	28 17       	cp	r18, r24
     ae0:	39 07       	cpc	r19, r25
     ae2:	4a 07       	cpc	r20, r26
     ae4:	5b 07       	cpc	r21, r27
     ae6:	68 f4       	brcc	.+26     	; 0xb02 <clust2sect+0x4a>
	return (DWORD)clst * fs->csize + fs->database;
     ae8:	a1 81       	ldd	r26, Z+1	; 0x01
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__muluhisi3>
     af0:	04 89       	ldd	r16, Z+20	; 0x14
     af2:	15 89       	ldd	r17, Z+21	; 0x15
     af4:	26 89       	ldd	r18, Z+22	; 0x16
     af6:	37 89       	ldd	r19, Z+23	; 0x17
     af8:	60 0f       	add	r22, r16
     afa:	71 1f       	adc	r23, r17
     afc:	82 1f       	adc	r24, r18
     afe:	93 1f       	adc	r25, r19
     b00:	03 c0       	rjmp	.+6      	; 0xb08 <clust2sect+0x50>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	fc 01       	movw	r30, r24
	CLUST clst;
	FATFS *fs = FatFs;
     b18:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <FatFs>
     b1c:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <FatFs+0x1>


	dj->index = 0;
     b20:	11 82       	std	Z+1, r1	; 0x01
     b22:	10 82       	st	Z, r1
	clst = dj->sclust;
     b24:	64 81       	ldd	r22, Z+4	; 0x04
     b26:	75 81       	ldd	r23, Z+5	; 0x05
     b28:	86 81       	ldd	r24, Z+6	; 0x06
     b2a:	97 81       	ldd	r25, Z+7	; 0x07
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
     b2c:	61 30       	cpi	r22, 0x01	; 1
     b2e:	71 05       	cpc	r23, r1
     b30:	81 05       	cpc	r24, r1
     b32:	91 05       	cpc	r25, r1
     b34:	91 f1       	breq	.+100    	; 0xb9a <dir_rewind+0x8c>
     b36:	18 96       	adiw	r26, 0x08	; 8
     b38:	0d 91       	ld	r16, X+
     b3a:	1d 91       	ld	r17, X+
     b3c:	2d 91       	ld	r18, X+
     b3e:	3c 91       	ld	r19, X
     b40:	1b 97       	sbiw	r26, 0x0b	; 11
     b42:	60 17       	cp	r22, r16
     b44:	71 07       	cpc	r23, r17
     b46:	82 07       	cpc	r24, r18
     b48:	93 07       	cpc	r25, r19
     b4a:	48 f5       	brcc	.+82     	; 0xb9e <dir_rewind+0x90>
     b4c:	ef 01       	movw	r28, r30
		return FR_DISK_ERR;
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     b4e:	61 15       	cp	r22, r1
     b50:	71 05       	cpc	r23, r1
     b52:	81 05       	cpc	r24, r1
     b54:	91 05       	cpc	r25, r1
     b56:	29 f5       	brne	.+74     	; 0xba2 <dir_rewind+0x94>
     b58:	8c 91       	ld	r24, X
     b5a:	83 30       	cpi	r24, 0x03	; 3
     b5c:	39 f5       	brne	.+78     	; 0xbac <dir_rewind+0x9e>
		clst = fs->dirbase;
     b5e:	50 96       	adiw	r26, 0x10	; 16
     b60:	6d 91       	ld	r22, X+
     b62:	7d 91       	ld	r23, X+
     b64:	8d 91       	ld	r24, X+
     b66:	9c 91       	ld	r25, X
     b68:	53 97       	sbiw	r26, 0x13	; 19
#endif
	dj->clust = clst;						/* Current cluster */
     b6a:	60 87       	std	Z+8, r22	; 0x08
     b6c:	71 87       	std	Z+9, r23	; 0x09
     b6e:	82 87       	std	Z+10, r24	; 0x0a
     b70:	93 87       	std	Z+11, r25	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     b72:	61 15       	cp	r22, r1
     b74:	71 05       	cpc	r23, r1
     b76:	81 05       	cpc	r24, r1
     b78:	91 05       	cpc	r25, r1
     b7a:	19 f0       	breq	.+6      	; 0xb82 <dir_rewind+0x74>
     b7c:	0e 94 5c 05 	call	0xab8	; 0xab8 <clust2sect>
     b80:	06 c0       	rjmp	.+12     	; 0xb8e <dir_rewind+0x80>
     b82:	50 96       	adiw	r26, 0x10	; 16
     b84:	6d 91       	ld	r22, X+
     b86:	7d 91       	ld	r23, X+
     b88:	8d 91       	ld	r24, X+
     b8a:	9c 91       	ld	r25, X
     b8c:	53 97       	sbiw	r26, 0x13	; 19
     b8e:	6c 87       	std	Y+12, r22	; 0x0c
     b90:	7d 87       	std	Y+13, r23	; 0x0d
     b92:	8e 87       	std	Y+14, r24	; 0x0e
     b94:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0e c0       	rjmp	.+28     	; 0xbb6 <dir_rewind+0xa8>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
		return FR_DISK_ERR;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0c c0       	rjmp	.+24     	; 0xbb6 <dir_rewind+0xa8>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	0a c0       	rjmp	.+20     	; 0xbb6 <dir_rewind+0xa8>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = fs->dirbase;
#endif
	dj->clust = clst;						/* Current cluster */
     ba2:	60 87       	std	Z+8, r22	; 0x08
     ba4:	71 87       	std	Z+9, r23	; 0x09
     ba6:	82 87       	std	Z+10, r24	; 0x0a
     ba8:	93 87       	std	Z+11, r25	; 0x0b
     baa:	e8 cf       	rjmp	.-48     	; 0xb7c <dir_rewind+0x6e>
     bac:	10 86       	std	Z+8, r1	; 0x08
     bae:	11 86       	std	Z+9, r1	; 0x09
     bb0:	12 86       	std	Z+10, r1	; 0x0a
     bb2:	13 86       	std	Z+11, r1	; 0x0b
     bb4:	e6 cf       	rjmp	.-52     	; 0xb82 <dir_rewind+0x74>
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     bc0:	cf 92       	push	r12
     bc2:	df 92       	push	r13
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	ec 01       	movw	r28, r24
     bd2:	6a 01       	movw	r12, r20
     bd4:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
     bd6:	02 e0       	ldi	r16, 0x02	; 2
     bd8:	10 e0       	ldi	r17, 0x00	; 0
     bda:	2e ef       	ldi	r18, 0xFE	; 254
     bdc:	31 e0       	ldi	r19, 0x01	; 1
     bde:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
     be2:	81 11       	cpse	r24, r1
     be4:	26 c0       	rjmp	.+76     	; 0xc32 <check_fs+0x72>
		return 3;

	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
     be6:	88 81       	ld	r24, Y
     be8:	99 81       	ldd	r25, Y+1	; 0x01
     bea:	85 35       	cpi	r24, 0x55	; 85
     bec:	9a 4a       	sbci	r25, 0xAA	; 170
     bee:	19 f5       	brne	.+70     	; 0xc36 <check_fs+0x76>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
     bf0:	26 e3       	ldi	r18, 0x36	; 54
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	b7 01       	movw	r22, r14
     bf6:	a6 01       	movw	r20, r12
     bf8:	ce 01       	movw	r24, r28
     bfa:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
     bfe:	81 11       	cpse	r24, r1
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <check_fs+0x4c>
     c02:	88 81       	ld	r24, Y
     c04:	99 81       	ldd	r25, Y+1	; 0x01
     c06:	86 34       	cpi	r24, 0x46	; 70
     c08:	91 44       	sbci	r25, 0x41	; 65
     c0a:	b9 f0       	breq	.+46     	; 0xc3a <check_fs+0x7a>
		return 0;
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
     c0c:	02 e0       	ldi	r16, 0x02	; 2
     c0e:	10 e0       	ldi	r17, 0x00	; 0
     c10:	22 e5       	ldi	r18, 0x52	; 82
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	b7 01       	movw	r22, r14
     c16:	a6 01       	movw	r20, r12
     c18:	ce 01       	movw	r24, r28
     c1a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
     c1e:	81 11       	cpse	r24, r1
     c20:	0e c0       	rjmp	.+28     	; 0xc3e <check_fs+0x7e>
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	28 81       	ld	r18, Y
     c26:	39 81       	ldd	r19, Y+1	; 0x01
     c28:	26 34       	cpi	r18, 0x46	; 70
     c2a:	31 44       	sbci	r19, 0x41	; 65
     c2c:	49 f4       	brne	.+18     	; 0xc40 <check_fs+0x80>
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <check_fs+0x80>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
		return 3;
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <check_fs+0x80>

	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <check_fs+0x80>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <check_fs+0x80>
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
#endif
	return 1;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	08 95       	ret

00000c52 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     c52:	4f 92       	push	r4
     c54:	5f 92       	push	r5
     c56:	6f 92       	push	r6
     c58:	7f 92       	push	r7
     c5a:	af 92       	push	r10
     c5c:	bf 92       	push	r11
     c5e:	cf 92       	push	r12
     c60:	df 92       	push	r13
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <get_fat+0x1e>
     c70:	00 d0       	rcall	.+0      	; 0xc72 <get_fat+0x20>
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	6b 01       	movw	r12, r22
     c78:	7c 01       	movw	r14, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     c7a:	a0 90 89 03 	lds	r10, 0x0389	; 0x800389 <FatFs>
     c7e:	b0 90 8a 03 	lds	r11, 0x038A	; 0x80038a <FatFs+0x1>


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	c8 16       	cp	r12, r24
     c86:	d1 04       	cpc	r13, r1
     c88:	e1 04       	cpc	r14, r1
     c8a:	f1 04       	cpc	r15, r1
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <get_fat+0x3e>
     c8e:	b6 c0       	rjmp	.+364    	; 0xdfc <get_fat+0x1aa>
     c90:	f5 01       	movw	r30, r10
     c92:	80 85       	ldd	r24, Z+8	; 0x08
     c94:	91 85       	ldd	r25, Z+9	; 0x09
     c96:	a2 85       	ldd	r26, Z+10	; 0x0a
     c98:	b3 85       	ldd	r27, Z+11	; 0x0b
     c9a:	c8 16       	cp	r12, r24
     c9c:	d9 06       	cpc	r13, r25
     c9e:	ea 06       	cpc	r14, r26
     ca0:	fb 06       	cpc	r15, r27
     ca2:	08 f0       	brcs	.+2      	; 0xca6 <get_fat+0x54>
     ca4:	b0 c0       	rjmp	.+352    	; 0xe06 <get_fat+0x1b4>
		return 1;

	switch (fs->fs_type) {
     ca6:	80 81       	ld	r24, Z
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	09 f4       	brne	.+2      	; 0xcae <get_fat+0x5c>
     cac:	61 c0       	rjmp	.+194    	; 0xd70 <get_fat+0x11e>
     cae:	83 30       	cpi	r24, 0x03	; 3
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <get_fat+0x62>
     cb2:	7c c0       	rjmp	.+248    	; 0xdac <get_fat+0x15a>
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	09 f0       	breq	.+2      	; 0xcba <get_fat+0x68>
     cb8:	ab c0       	rjmp	.+342    	; 0xe10 <get_fat+0x1be>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     cba:	26 01       	movw	r4, r12
     cbc:	56 94       	lsr	r5
     cbe:	47 94       	ror	r4
     cc0:	4c 0c       	add	r4, r12
     cc2:	5d 1c       	adc	r5, r13
		ofs = bc % 512; bc /= 512;
     cc4:	92 01       	movw	r18, r4
     cc6:	31 70       	andi	r19, 0x01	; 1
     cc8:	45 2c       	mov	r4, r5
     cca:	55 24       	eor	r5, r5
     ccc:	46 94       	lsr	r4
		if (ofs != 511) {
     cce:	2f 3f       	cpi	r18, 0xFF	; 255
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	3f 07       	cpc	r19, r31
     cd4:	91 f0       	breq	.+36     	; 0xcfa <get_fat+0xa8>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     cd6:	f5 01       	movw	r30, r10
     cd8:	44 85       	ldd	r20, Z+12	; 0x0c
     cda:	55 85       	ldd	r21, Z+13	; 0x0d
     cdc:	66 85       	ldd	r22, Z+14	; 0x0e
     cde:	77 85       	ldd	r23, Z+15	; 0x0f
     ce0:	44 0d       	add	r20, r4
     ce2:	55 1d       	adc	r21, r5
     ce4:	61 1d       	adc	r22, r1
     ce6:	71 1d       	adc	r23, r1
     ce8:	02 e0       	ldi	r16, 0x02	; 2
     cea:	10 e0       	ldi	r17, 0x00	; 0
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
     cf4:	88 23       	and	r24, r24
     cf6:	59 f1       	breq	.+86     	; 0xd4e <get_fat+0xfc>
     cf8:	90 c0       	rjmp	.+288    	; 0xe1a <get_fat+0x1c8>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     cfa:	61 2c       	mov	r6, r1
     cfc:	71 2c       	mov	r7, r1
     cfe:	f5 01       	movw	r30, r10
     d00:	44 85       	ldd	r20, Z+12	; 0x0c
     d02:	55 85       	ldd	r21, Z+13	; 0x0d
     d04:	66 85       	ldd	r22, Z+14	; 0x0e
     d06:	77 85       	ldd	r23, Z+15	; 0x0f
     d08:	44 0d       	add	r20, r4
     d0a:	55 1d       	adc	r21, r5
     d0c:	66 1d       	adc	r22, r6
     d0e:	77 1d       	adc	r23, r7
     d10:	01 e0       	ldi	r16, 0x01	; 1
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	2f ef       	ldi	r18, 0xFF	; 255
     d16:	31 e0       	ldi	r19, 0x01	; 1
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
     d20:	81 11       	cpse	r24, r1
     d22:	80 c0       	rjmp	.+256    	; 0xe24 <get_fat+0x1d2>
     d24:	f5 01       	movw	r30, r10
     d26:	44 85       	ldd	r20, Z+12	; 0x0c
     d28:	55 85       	ldd	r21, Z+13	; 0x0d
     d2a:	66 85       	ldd	r22, Z+14	; 0x0e
     d2c:	77 85       	ldd	r23, Z+15	; 0x0f
     d2e:	4f 5f       	subi	r20, 0xFF	; 255
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	6f 4f       	sbci	r22, 0xFF	; 255
     d34:	7f 4f       	sbci	r23, 0xFF	; 255
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     d36:	44 0d       	add	r20, r4
     d38:	55 1d       	adc	r21, r5
     d3a:	66 1d       	adc	r22, r6
     d3c:	77 1d       	adc	r23, r7
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	ce 01       	movw	r24, r28
     d44:	02 96       	adiw	r24, 0x02	; 2
     d46:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
     d4a:	81 11       	cpse	r24, r1
     d4c:	70 c0       	rjmp	.+224    	; 0xe2e <get_fat+0x1dc>
		}
		wc = LD_WORD(buf);
     d4e:	69 81       	ldd	r22, Y+1	; 0x01
     d50:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     d52:	c0 fe       	sbrs	r12, 0
     d54:	09 c0       	rjmp	.+18     	; 0xd68 <get_fat+0x116>
     d56:	72 95       	swap	r23
     d58:	62 95       	swap	r22
     d5a:	6f 70       	andi	r22, 0x0F	; 15
     d5c:	67 27       	eor	r22, r23
     d5e:	7f 70       	andi	r23, 0x0F	; 15
     d60:	67 27       	eor	r22, r23
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	71 c0       	rjmp	.+226    	; 0xe4a <get_fat+0x1f8>
     d68:	7f 70       	andi	r23, 0x0F	; 15
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	6d c0       	rjmp	.+218    	; 0xe4a <get_fat+0x1f8>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     d70:	96 01       	movw	r18, r12
     d72:	33 27       	eor	r19, r19
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	77 27       	eor	r23, r23
     d7a:	6f 2d       	mov	r22, r15
     d7c:	5e 2d       	mov	r21, r14
     d7e:	4d 2d       	mov	r20, r13
     d80:	f5 01       	movw	r30, r10
     d82:	84 85       	ldd	r24, Z+12	; 0x0c
     d84:	95 85       	ldd	r25, Z+13	; 0x0d
     d86:	a6 85       	ldd	r26, Z+14	; 0x0e
     d88:	b7 85       	ldd	r27, Z+15	; 0x0f
     d8a:	48 0f       	add	r20, r24
     d8c:	59 1f       	adc	r21, r25
     d8e:	6a 1f       	adc	r22, r26
     d90:	7b 1f       	adc	r23, r27
     d92:	02 e0       	ldi	r16, 0x02	; 2
     d94:	10 e0       	ldi	r17, 0x00	; 0
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
     d9e:	81 11       	cpse	r24, r1
     da0:	4b c0       	rjmp	.+150    	; 0xe38 <get_fat+0x1e6>
		return LD_WORD(buf);
     da2:	69 81       	ldd	r22, Y+1	; 0x01
     da4:	7a 81       	ldd	r23, Y+2	; 0x02
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	4f c0       	rjmp	.+158    	; 0xe4a <get_fat+0x1f8>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     dac:	96 01       	movw	r18, r12
     dae:	2f 77       	andi	r18, 0x7F	; 127
     db0:	33 27       	eor	r19, r19
     db2:	22 0f       	add	r18, r18
     db4:	33 1f       	adc	r19, r19
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	68 94       	set
     dbc:	16 f8       	bld	r1, 6
     dbe:	f6 94       	lsr	r15
     dc0:	e7 94       	ror	r14
     dc2:	d7 94       	ror	r13
     dc4:	c7 94       	ror	r12
     dc6:	16 94       	lsr	r1
     dc8:	d1 f7       	brne	.-12     	; 0xdbe <get_fat+0x16c>
     dca:	f5 01       	movw	r30, r10
     dcc:	44 85       	ldd	r20, Z+12	; 0x0c
     dce:	55 85       	ldd	r21, Z+13	; 0x0d
     dd0:	66 85       	ldd	r22, Z+14	; 0x0e
     dd2:	77 85       	ldd	r23, Z+15	; 0x0f
     dd4:	4c 0d       	add	r20, r12
     dd6:	5d 1d       	adc	r21, r13
     dd8:	6e 1d       	adc	r22, r14
     dda:	7f 1d       	adc	r23, r15
     ddc:	04 e0       	ldi	r16, 0x04	; 4
     dde:	10 e0       	ldi	r17, 0x00	; 0
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
     de8:	81 11       	cpse	r24, r1
     dea:	2b c0       	rjmp	.+86     	; 0xe42 <get_fat+0x1f0>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	ab 81       	ldd	r26, Y+3	; 0x03
     df2:	bc 81       	ldd	r27, Y+4	; 0x04
     df4:	bc 01       	movw	r22, r24
     df6:	cd 01       	movw	r24, r26
     df8:	9f 70       	andi	r25, 0x0F	; 15
     dfa:	27 c0       	rjmp	.+78     	; 0xe4a <get_fat+0x1f8>
	BYTE buf[4];
	FATFS *fs = FatFs;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	22 c0       	rjmp	.+68     	; 0xe4a <get_fat+0x1f8>
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	1d c0       	rjmp	.+58     	; 0xe4a <get_fat+0x1f8>
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	18 c0       	rjmp	.+48     	; 0xe4a <get_fat+0x1f8>
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	13 c0       	rjmp	.+38     	; 0xe4a <get_fat+0x1f8>
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e c0       	rjmp	.+28     	; 0xe4a <get_fat+0x1f8>
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <get_fat+0x1f8>
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <get_fat+0x1f8>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	1f 91       	pop	r17
     e58:	0f 91       	pop	r16
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	bf 90       	pop	r11
     e64:	af 90       	pop	r10
     e66:	7f 90       	pop	r7
     e68:	6f 90       	pop	r6
     e6a:	5f 90       	pop	r5
     e6c:	4f 90       	pop	r4
     e6e:	08 95       	ret

00000e70 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     e80:	e0 90 89 03 	lds	r14, 0x0389	; 0x800389 <FatFs>
     e84:	f0 90 8a 03 	lds	r15, 0x038A	; 0x80038a <FatFs+0x1>


	i = dj->index + 1;
     e88:	fc 01       	movw	r30, r24
     e8a:	c0 81       	ld	r28, Z
     e8c:	d1 81       	ldd	r29, Z+1	; 0x01
     e8e:	21 96       	adiw	r28, 0x01	; 1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     e90:	09 f4       	brne	.+2      	; 0xe94 <dir_next+0x24>
     e92:	5c c0       	rjmp	.+184    	; 0xf4c <dir_next+0xdc>
     e94:	44 85       	ldd	r20, Z+12	; 0x0c
     e96:	55 85       	ldd	r21, Z+13	; 0x0d
     e98:	66 85       	ldd	r22, Z+14	; 0x0e
     e9a:	77 85       	ldd	r23, Z+15	; 0x0f
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <dir_next+0x38>
     ea6:	54 c0       	rjmp	.+168    	; 0xf50 <dir_next+0xe0>
     ea8:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i & (16-1))) {	/* Sector changed? */
     eaa:	ce 01       	movw	r24, r28
     eac:	8f 70       	andi	r24, 0x0F	; 15
     eae:	99 27       	eor	r25, r25
     eb0:	89 2b       	or	r24, r25
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <dir_next+0x46>
     eb4:	46 c0       	rjmp	.+140    	; 0xf42 <dir_next+0xd2>
		dj->sect++;			/* Next sector */
     eb6:	4f 5f       	subi	r20, 0xFF	; 255
     eb8:	5f 4f       	sbci	r21, 0xFF	; 255
     eba:	6f 4f       	sbci	r22, 0xFF	; 255
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	44 87       	std	Z+12, r20	; 0x0c
     ec0:	55 87       	std	Z+13, r21	; 0x0d
     ec2:	66 87       	std	Z+14, r22	; 0x0e
     ec4:	77 87       	std	Z+15, r23	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     ec6:	40 85       	ldd	r20, Z+8	; 0x08
     ec8:	51 85       	ldd	r21, Z+9	; 0x09
     eca:	62 85       	ldd	r22, Z+10	; 0x0a
     ecc:	73 85       	ldd	r23, Z+11	; 0x0b
     ece:	41 15       	cp	r20, r1
     ed0:	51 05       	cpc	r21, r1
     ed2:	61 05       	cpc	r22, r1
     ed4:	71 05       	cpc	r23, r1
     ed6:	39 f4       	brne	.+14     	; 0xee6 <dir_next+0x76>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     ed8:	f7 01       	movw	r30, r14
     eda:	84 81       	ldd	r24, Z+4	; 0x04
     edc:	95 81       	ldd	r25, Z+5	; 0x05
     ede:	c8 17       	cp	r28, r24
     ee0:	d9 07       	cpc	r29, r25
     ee2:	c0 f5       	brcc	.+112    	; 0xf54 <dir_next+0xe4>
     ee4:	2e c0       	rjmp	.+92     	; 0xf42 <dir_next+0xd2>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     ee6:	f7 01       	movw	r30, r14
     ee8:	81 81       	ldd	r24, Z+1	; 0x01
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	9e 01       	movw	r18, r28
     ef0:	32 95       	swap	r19
     ef2:	22 95       	swap	r18
     ef4:	2f 70       	andi	r18, 0x0F	; 15
     ef6:	23 27       	eor	r18, r19
     ef8:	3f 70       	andi	r19, 0x0F	; 15
     efa:	23 27       	eor	r18, r19
     efc:	82 23       	and	r24, r18
     efe:	93 23       	and	r25, r19
     f00:	89 2b       	or	r24, r25
     f02:	f9 f4       	brne	.+62     	; 0xf42 <dir_next+0xd2>
				clst = get_fat(dj->clust);		/* Get next cluster */
     f04:	cb 01       	movw	r24, r22
     f06:	ba 01       	movw	r22, r20
     f08:	0e 94 29 06 	call	0xc52	; 0xc52 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     f0c:	62 30       	cpi	r22, 0x02	; 2
     f0e:	71 05       	cpc	r23, r1
     f10:	81 05       	cpc	r24, r1
     f12:	91 05       	cpc	r25, r1
     f14:	08 f1       	brcs	.+66     	; 0xf58 <dir_next+0xe8>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
     f16:	f7 01       	movw	r30, r14
     f18:	c0 84       	ldd	r12, Z+8	; 0x08
     f1a:	d1 84       	ldd	r13, Z+9	; 0x09
     f1c:	e2 84       	ldd	r14, Z+10	; 0x0a
     f1e:	f3 84       	ldd	r15, Z+11	; 0x0b
     f20:	6c 15       	cp	r22, r12
     f22:	7d 05       	cpc	r23, r13
     f24:	8e 05       	cpc	r24, r14
     f26:	9f 05       	cpc	r25, r15
     f28:	c8 f4       	brcc	.+50     	; 0xf5c <dir_next+0xec>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     f2a:	f8 01       	movw	r30, r16
     f2c:	60 87       	std	Z+8, r22	; 0x08
     f2e:	71 87       	std	Z+9, r23	; 0x09
     f30:	82 87       	std	Z+10, r24	; 0x0a
     f32:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     f34:	0e 94 5c 05 	call	0xab8	; 0xab8 <clust2sect>
     f38:	f8 01       	movw	r30, r16
     f3a:	64 87       	std	Z+12, r22	; 0x0c
     f3c:	75 87       	std	Z+13, r23	; 0x0d
     f3e:	86 87       	std	Z+14, r24	; 0x0e
     f40:	97 87       	std	Z+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     f42:	f8 01       	movw	r30, r16
     f44:	d1 83       	std	Z+1, r29	; 0x01
     f46:	c0 83       	st	Z, r28

	return FR_OK;
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	09 c0       	rjmp	.+18     	; 0xf5e <dir_next+0xee>
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <dir_next+0xee>
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <dir_next+0xee>
	if (!(i & (16-1))) {	/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <dir_next+0xee>
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <dir_next+0xee>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
     f5c:	83 e0       	ldi	r24, 0x03	; 3
	}

	dj->index = i;

	return FR_OK;
}
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	08 95       	ret

00000f70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
     f70:	2f 92       	push	r2
     f72:	3f 92       	push	r3
     f74:	4f 92       	push	r4
     f76:	5f 92       	push	r5
     f78:	6f 92       	push	r6
     f7a:	7f 92       	push	r7
     f7c:	8f 92       	push	r8
     f7e:	9f 92       	push	r9
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	7c 01       	movw	r14, r24
     f96:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
     f98:	db 01       	movw	r26, r22
     f9a:	8c 91       	ld	r24, X
     f9c:	80 32       	cpi	r24, 0x20	; 32
     f9e:	31 f4       	brne	.+12     	; 0xfac <follow_path+0x3c>
     fa0:	fb 01       	movw	r30, r22
     fa2:	31 96       	adiw	r30, 0x01	; 1
     fa4:	5f 01       	movw	r10, r30
     fa6:	81 91       	ld	r24, Z+
     fa8:	80 32       	cpi	r24, 0x20	; 32
     faa:	e1 f3       	breq	.-8      	; 0xfa4 <follow_path+0x34>
	if (*path == '/') path++;			/* Strip heading separator */
     fac:	8f 32       	cpi	r24, 0x2F	; 47
     fae:	19 f4       	brne	.+6      	; 0xfb6 <follow_path+0x46>
     fb0:	bf ef       	ldi	r27, 0xFF	; 255
     fb2:	ab 1a       	sub	r10, r27
     fb4:	bb 0a       	sbc	r11, r27
	dj->sclust = 0;						/* Set start directory (always root dir) */
     fb6:	f7 01       	movw	r30, r14
     fb8:	14 82       	std	Z+4, r1	; 0x04
     fba:	15 82       	std	Z+5, r1	; 0x05
     fbc:	16 82       	std	Z+6, r1	; 0x06
     fbe:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     fc0:	d5 01       	movw	r26, r10
     fc2:	8c 91       	ld	r24, X
     fc4:	81 32       	cpi	r24, 0x21	; 33
     fc6:	68 f4       	brcc	.+26     	; 0xfe2 <follow_path+0x72>
		res = dir_rewind(dj);
     fc8:	c7 01       	movw	r24, r14
     fca:	0e 94 87 05 	call	0xb0e	; 0xb0e <dir_rewind>
     fce:	58 2f       	mov	r21, r24
		FatFs->buf[0] = 0;
     fd0:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <FatFs>
     fd4:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <FatFs+0x1>
     fd8:	06 80       	ldd	r0, Z+6	; 0x06
     fda:	f7 81       	ldd	r31, Z+7	; 0x07
     fdc:	e0 2d       	mov	r30, r0
     fde:	10 82       	st	Z, r1
     fe0:	c3 c0       	rjmp	.+390    	; 0x1168 <follow_path+0x1f8>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     fe2:	68 94       	set
     fe4:	99 24       	eor	r9, r9
     fe6:	95 f8       	bld	r9, 5
     fe8:	61 2c       	mov	r6, r1
     fea:	68 94       	set
     fec:	44 24       	eor	r4, r4
     fee:	43 f8       	bld	r4, 3
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
			i = 8; ni = 11;
     ff0:	24 2c       	mov	r2, r4
     ff2:	0f 2e       	mov	r0, r31
     ff4:	fb e0       	ldi	r31, 0x0B	; 11
     ff6:	3f 2e       	mov	r3, r31
     ff8:	f0 2d       	mov	r31, r0
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     ffa:	55 24       	eor	r5, r5
     ffc:	53 94       	inc	r5
	if (res != FR_OK) return res;

	dir = FatFs->buf;
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
     ffe:	85 2c       	mov	r8, r5
    1000:	76 2c       	mov	r7, r6
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    1002:	f7 01       	movw	r30, r14
    1004:	a2 81       	ldd	r26, Z+2	; 0x02
    1006:	b3 81       	ldd	r27, Z+3	; 0x03
    1008:	fd 01       	movw	r30, r26
    100a:	cd 01       	movw	r24, r26
    100c:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    100e:	91 92       	st	Z+, r9
    1010:	e8 17       	cp	r30, r24
    1012:	f9 07       	cpc	r31, r25
    1014:	e1 f7       	brne	.-8      	; 0x100e <follow_path+0x9e>
    1016:	96 2d       	mov	r25, r6
    1018:	86 2d       	mov	r24, r6
    101a:	34 2d       	mov	r19, r4
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <follow_path+0xb0>
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    101e:	82 2f       	mov	r24, r18
    1020:	21 e0       	ldi	r18, 0x01	; 1
    1022:	28 0f       	add	r18, r24
    1024:	f5 01       	movw	r30, r10
    1026:	e8 0f       	add	r30, r24
    1028:	f1 1d       	adc	r31, r1
    102a:	80 81       	ld	r24, Z
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    102c:	81 32       	cpi	r24, 0x21	; 33
    102e:	90 f0       	brcs	.+36     	; 0x1054 <follow_path+0xe4>
    1030:	8f 32       	cpi	r24, 0x2F	; 47
    1032:	81 f0       	breq	.+32     	; 0x1054 <follow_path+0xe4>
		if (c == '.' || i >= ni) {
    1034:	8e 32       	cpi	r24, 0x2E	; 46
    1036:	09 f4       	brne	.+2      	; 0x103a <follow_path+0xca>
    1038:	8f c0       	rjmp	.+286    	; 0x1158 <follow_path+0x1e8>
    103a:	93 17       	cp	r25, r19
    103c:	58 f4       	brcc	.+22     	; 0x1054 <follow_path+0xe4>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    103e:	4f e9       	ldi	r20, 0x9F	; 159
    1040:	48 0f       	add	r20, r24
    1042:	4a 31       	cpi	r20, 0x1A	; 26
    1044:	08 f4       	brcc	.+2      	; 0x1048 <follow_path+0xd8>
    1046:	80 52       	subi	r24, 0x20	; 32
			sfn[i++] = c;
    1048:	fd 01       	movw	r30, r26
    104a:	e9 0f       	add	r30, r25
    104c:	f1 1d       	adc	r31, r1
    104e:	80 83       	st	Z, r24
    1050:	9f 5f       	subi	r25, 0xFF	; 255
    1052:	e5 cf       	rjmp	.-54     	; 0x101e <follow_path+0xae>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1054:	a2 0e       	add	r10, r18
    1056:	b1 1c       	adc	r11, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    1058:	95 2d       	mov	r25, r5
    105a:	81 32       	cpi	r24, 0x21	; 33
    105c:	08 f0       	brcs	.+2      	; 0x1060 <follow_path+0xf0>
    105e:	96 2d       	mov	r25, r6
    1060:	1b 96       	adiw	r26, 0x0b	; 11
    1062:	9c 93       	st	X, r25
{
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
    1064:	c7 01       	movw	r24, r14
    1066:	0e 94 87 05 	call	0xb0e	; 0xb0e <dir_rewind>
    106a:	58 2f       	mov	r21, r24
	if (res != FR_OK) return res;
    106c:	81 11       	cpse	r24, r1
    106e:	7a c0       	rjmp	.+244    	; 0x1164 <follow_path+0x1f4>

	dir = FatFs->buf;
    1070:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <FatFs>
    1074:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <FatFs+0x1>
    1078:	c6 80       	ldd	r12, Z+6	; 0x06
    107a:	d7 80       	ldd	r13, Z+7	; 0x07
    107c:	e6 01       	movw	r28, r12
    107e:	2b 96       	adiw	r28, 0x0b	; 11
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1080:	d7 01       	movw	r26, r14
    1082:	2d 91       	ld	r18, X+
    1084:	3c 91       	ld	r19, X
    1086:	11 97       	sbiw	r26, 0x01	; 1
    1088:	2f 70       	andi	r18, 0x0F	; 15
    108a:	33 27       	eor	r19, r19
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	22 95       	swap	r18
    1092:	32 95       	swap	r19
    1094:	30 7f       	andi	r19, 0xF0	; 240
    1096:	32 27       	eor	r19, r18
    1098:	20 7f       	andi	r18, 0xF0	; 240
    109a:	32 27       	eor	r19, r18
    109c:	1c 96       	adiw	r26, 0x0c	; 12
    109e:	4d 91       	ld	r20, X+
    10a0:	5d 91       	ld	r21, X+
    10a2:	6d 91       	ld	r22, X+
    10a4:	7c 91       	ld	r23, X
    10a6:	1f 97       	sbiw	r26, 0x0f	; 15
    10a8:	00 e2       	ldi	r16, 0x20	; 32
    10aa:	10 e0       	ldi	r17, 0x00	; 0
    10ac:	c6 01       	movw	r24, r12
    10ae:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
			? FR_DISK_ERR : FR_OK;
    10b2:	58 2d       	mov	r21, r8
    10b4:	81 11       	cpse	r24, r1
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <follow_path+0x14a>
    10b8:	57 2d       	mov	r21, r7
		if (res != FR_OK) break;
    10ba:	51 11       	cpse	r21, r1
    10bc:	53 c0       	rjmp	.+166    	; 0x1164 <follow_path+0x1f4>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    10be:	f6 01       	movw	r30, r12
    10c0:	80 81       	ld	r24, Z
    10c2:	88 23       	and	r24, r24
    10c4:	c1 f0       	breq	.+48     	; 0x10f6 <follow_path+0x186>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    10c6:	83 85       	ldd	r24, Z+11	; 0x0b
    10c8:	83 fd       	sbrc	r24, 3
    10ca:	0e c0       	rjmp	.+28     	; 0x10e8 <follow_path+0x178>
    10cc:	d7 01       	movw	r26, r14
    10ce:	12 96       	adiw	r26, 0x02	; 2
    10d0:	2d 91       	ld	r18, X+
    10d2:	3c 91       	ld	r19, X
    10d4:	13 97       	sbiw	r26, 0x03	; 3
    10d6:	d9 01       	movw	r26, r18
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <follow_path+0x170>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    10da:	ec 17       	cp	r30, r28
    10dc:	fd 07       	cpc	r31, r29
    10de:	a9 f0       	breq	.+42     	; 0x110a <follow_path+0x19a>
    10e0:	41 91       	ld	r20, Z+
    10e2:	9d 91       	ld	r25, X+
    10e4:	49 17       	cp	r20, r25
    10e6:	c9 f3       	breq	.-14     	; 0x10da <follow_path+0x16a>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);							/* Next entry */
    10e8:	c7 01       	movw	r24, r14
    10ea:	0e 94 38 07 	call	0xe70	; 0xe70 <dir_next>
    10ee:	58 2f       	mov	r21, r24
	} while (res == FR_OK);
    10f0:	88 23       	and	r24, r24
    10f2:	31 f2       	breq	.-116    	; 0x1080 <follow_path+0x110>
    10f4:	37 c0       	rjmp	.+110    	; 0x1164 <follow_path+0x1f4>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    10f6:	d7 01       	movw	r26, r14
    10f8:	12 96       	adiw	r26, 0x02	; 2
    10fa:	ed 91       	ld	r30, X+
    10fc:	fc 91       	ld	r31, X
    10fe:	13 97       	sbiw	r26, 0x03	; 3
    1100:	83 85       	ldd	r24, Z+11	; 0x0b
    1102:	88 23       	and	r24, r24
    1104:	29 f1       	breq	.+74     	; 0x1150 <follow_path+0x1e0>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    1106:	53 e0       	ldi	r21, 0x03	; 3
    1108:	2f c0       	rjmp	.+94     	; 0x1168 <follow_path+0x1f8>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    110a:	f9 01       	movw	r30, r18
    110c:	83 85       	ldd	r24, Z+11	; 0x0b
    110e:	81 11       	cpse	r24, r1
    1110:	2b c0       	rjmp	.+86     	; 0x1168 <follow_path+0x1f8>
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
    1112:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <FatFs>
    1116:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <FatFs+0x1>
    111a:	06 80       	ldd	r0, Z+6	; 0x06
    111c:	f7 81       	ldd	r31, Z+7	; 0x07
    111e:	e0 2d       	mov	r30, r0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    1120:	83 85       	ldd	r24, Z+11	; 0x0b
    1122:	84 ff       	sbrs	r24, 4
    1124:	17 c0       	rjmp	.+46     	; 0x1154 <follow_path+0x1e4>
				res = FR_NO_PATH; break;
			}
			dj->sclust =
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
    1126:	84 89       	ldd	r24, Z+20	; 0x14
    1128:	95 89       	ldd	r25, Z+21	; 0x15
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	dc 01       	movw	r26, r24
    1130:	99 27       	eor	r25, r25
    1132:	88 27       	eor	r24, r24
    1134:	42 8d       	ldd	r20, Z+26	; 0x1a
    1136:	53 8d       	ldd	r21, Z+27	; 0x1b
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	84 2b       	or	r24, r20
    113e:	95 2b       	or	r25, r21
    1140:	a6 2b       	or	r26, r22
    1142:	b7 2b       	or	r27, r23
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust =
    1144:	f7 01       	movw	r30, r14
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	95 83       	std	Z+5, r25	; 0x05
    114a:	a6 83       	std	Z+6, r26	; 0x06
    114c:	b7 83       	std	Z+7, r27	; 0x07
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
    114e:	59 cf       	rjmp	.-334    	; 0x1002 <follow_path+0x92>
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
    1150:	54 e0       	ldi	r21, 0x04	; 4
    1152:	0a c0       	rjmp	.+20     	; 0x1168 <follow_path+0x1f8>
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    1154:	54 e0       	ldi	r21, 0x04	; 4
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <follow_path+0x1f8>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
    1158:	38 30       	cpi	r19, 0x08	; 8
    115a:	09 f0       	breq	.+2      	; 0x115e <follow_path+0x1ee>
    115c:	7b cf       	rjmp	.-266    	; 0x1054 <follow_path+0xe4>
			i = 8; ni = 11;
    115e:	92 2d       	mov	r25, r2
    1160:	33 2d       	mov	r19, r3
    1162:	5d cf       	rjmp	.-326    	; 0x101e <follow_path+0xae>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    1164:	53 30       	cpi	r21, 0x03	; 3
    1166:	39 f2       	breq	.-114    	; 0x10f6 <follow_path+0x186>
				LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
    1168:	85 2f       	mov	r24, r21
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	3f 90       	pop	r3
    118c:	2f 90       	pop	r2
    118e:	08 95       	ret

00001190 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    1190:	4f 92       	push	r4
    1192:	5f 92       	push	r5
    1194:	6f 92       	push	r6
    1196:	7f 92       	push	r7
    1198:	8f 92       	push	r8
    119a:	9f 92       	push	r9
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	a8 97       	sbiw	r28, 0x28	; 40
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    11bc:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <FatFs+0x1>
    11c0:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <FatFs>
	if (!fs) return FR_OK;				/* Unregister fs object */
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	09 f4       	brne	.+2      	; 0x11ca <pf_mount+0x3a>
    11c8:	ca c0       	rjmp	.+404    	; 0x135e <pf_mount+0x1ce>
    11ca:	7c 01       	movw	r14, r24

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    11cc:	0e 94 3b 02 	call	0x476	; 0x476 <disk_initialize>
    11d0:	80 fd       	sbrc	r24, 0
    11d2:	c7 c0       	rjmp	.+398    	; 0x1362 <pf_mount+0x1d2>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	ba 01       	movw	r22, r20
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <check_fs>
//   	sprintf(str,"%d",fmt);
//   	setpos(4,0);
//   	str_lcd(str);
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	e1 f4       	brne	.+56     	; 0x121e <pf_mount+0x8e>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    11e6:	00 e1       	ldi	r16, 0x10	; 16
    11e8:	10 e0       	ldi	r17, 0x00	; 0
    11ea:	2e eb       	ldi	r18, 0xBE	; 190
    11ec:	31 e0       	ldi	r19, 0x01	; 1
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	ba 01       	movw	r22, r20
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
    11fc:	81 11       	cpse	r24, r1
    11fe:	b3 c0       	rjmp	.+358    	; 0x1366 <pf_mount+0x1d6>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	88 23       	and	r24, r24
    1204:	09 f4       	brne	.+2      	; 0x1208 <pf_mount+0x78>
    1206:	b1 c0       	rjmp	.+354    	; 0x136a <pf_mount+0x1da>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    1208:	89 84       	ldd	r8, Y+9	; 0x09
    120a:	9a 84       	ldd	r9, Y+10	; 0x0a
    120c:	ab 84       	ldd	r10, Y+11	; 0x0b
    120e:	bc 84       	ldd	r11, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1210:	b5 01       	movw	r22, r10
    1212:	a4 01       	movw	r20, r8
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <check_fs>
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <pf_mount+0x94>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
    121e:	81 2c       	mov	r8, r1
    1220:	91 2c       	mov	r9, r1
    1222:	54 01       	movw	r10, r8
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1224:	83 30       	cpi	r24, 0x03	; 3
    1226:	09 f4       	brne	.+2      	; 0x122a <pf_mount+0x9a>
    1228:	a2 c0       	rjmp	.+324    	; 0x136e <pf_mount+0x1de>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    122a:	81 11       	cpse	r24, r1
    122c:	a2 c0       	rjmp	.+324    	; 0x1372 <pf_mount+0x1e2>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    122e:	04 e2       	ldi	r16, 0x24	; 36
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	2d e0       	ldi	r18, 0x0D	; 13
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	b5 01       	movw	r22, r10
    1238:	a4 01       	movw	r20, r8
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
    1242:	81 11       	cpse	r24, r1
    1244:	98 c0       	rjmp	.+304    	; 0x1376 <pf_mount+0x1e6>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1246:	2a 85       	ldd	r18, Y+10	; 0x0a
    1248:	3b 85       	ldd	r19, Y+11	; 0x0b
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    124e:	21 15       	cp	r18, r1
    1250:	31 05       	cpc	r19, r1
    1252:	41 05       	cpc	r20, r1
    1254:	51 05       	cpc	r21, r1
    1256:	21 f4       	brne	.+8      	; 0x1260 <pf_mount+0xd0>
    1258:	28 8d       	ldd	r18, Y+24	; 0x18
    125a:	39 8d       	ldd	r19, Y+25	; 0x19
    125c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    125e:	5b 8d       	ldd	r21, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1260:	ac 81       	ldd	r26, Y+4	; 0x04
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__muluhisi3>
    1268:	6d a3       	std	Y+37, r22	; 0x25
    126a:	7e a3       	std	Y+38, r23	; 0x26
    126c:	8f a3       	std	Y+39, r24	; 0x27
    126e:	98 a7       	std	Y+40, r25	; 0x28
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1270:	0a 81       	ldd	r16, Y+2	; 0x02
    1272:	1b 81       	ldd	r17, Y+3	; 0x03
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	80 0e       	add	r8, r16
    127a:	91 1e       	adc	r9, r17
    127c:	a2 1e       	adc	r10, r18
    127e:	b3 1e       	adc	r11, r19
    1280:	d7 01       	movw	r26, r14
    1282:	1c 96       	adiw	r26, 0x0c	; 12
    1284:	8d 92       	st	X+, r8
    1286:	9d 92       	st	X+, r9
    1288:	ad 92       	st	X+, r10
    128a:	bc 92       	st	X, r11
    128c:	1f 97       	sbiw	r26, 0x0f	; 15
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    128e:	49 81       	ldd	r20, Y+1	; 0x01
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	4c 93       	st	X, r20
    1294:	11 97       	sbiw	r26, 0x01	; 1
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    1296:	4d 80       	ldd	r4, Y+5	; 0x05
    1298:	5e 80       	ldd	r5, Y+6	; 0x06
    129a:	15 96       	adiw	r26, 0x05	; 5
    129c:	5c 92       	st	X, r5
    129e:	4e 92       	st	-X, r4
    12a0:	14 97       	sbiw	r26, 0x04	; 4
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    12a2:	8f 81       	ldd	r24, Y+7	; 0x07
    12a4:	98 85       	ldd	r25, Y+8	; 0x08
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    12aa:	00 97       	sbiw	r24, 0x00	; 0
    12ac:	a1 05       	cpc	r26, r1
    12ae:	b1 05       	cpc	r27, r1
    12b0:	21 f4       	brne	.+8      	; 0x12ba <pf_mount+0x12a>
    12b2:	8c 89       	ldd	r24, Y+20	; 0x14
    12b4:	9d 89       	ldd	r25, Y+21	; 0x15
    12b6:	ae 89       	ldd	r26, Y+22	; 0x16
    12b8:	bf 89       	ldd	r27, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    12ba:	56 94       	lsr	r5
    12bc:	47 94       	ror	r4
    12be:	56 94       	lsr	r5
    12c0:	47 94       	ror	r4
    12c2:	56 94       	lsr	r5
    12c4:	47 94       	ror	r4
    12c6:	56 94       	lsr	r5
    12c8:	47 94       	ror	r4
    12ca:	61 2c       	mov	r6, r1
    12cc:	71 2c       	mov	r7, r1
    12ce:	80 1b       	sub	r24, r16
    12d0:	91 0b       	sbc	r25, r17
    12d2:	a2 0b       	sbc	r26, r18
    12d4:	b3 0b       	sbc	r27, r19
    12d6:	0d a1       	ldd	r16, Y+37	; 0x25
    12d8:	1e a1       	ldd	r17, Y+38	; 0x26
    12da:	2f a1       	ldd	r18, Y+39	; 0x27
    12dc:	38 a5       	ldd	r19, Y+40	; 0x28
    12de:	80 1b       	sub	r24, r16
    12e0:	91 0b       	sbc	r25, r17
    12e2:	a2 0b       	sbc	r26, r18
    12e4:	b3 0b       	sbc	r27, r19
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	64 19       	sub	r22, r4
    12ec:	75 09       	sbc	r23, r5
    12ee:	86 09       	sbc	r24, r6
    12f0:	97 09       	sbc	r25, r7
		) / fs->csize + 2;
    12f2:	24 2f       	mov	r18, r20
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
    12fe:	ba 01       	movw	r22, r20
    1300:	a9 01       	movw	r20, r18
    1302:	4e 5f       	subi	r20, 0xFE	; 254
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	6f 4f       	sbci	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    130a:	d7 01       	movw	r26, r14
    130c:	18 96       	adiw	r26, 0x08	; 8
    130e:	4d 93       	st	X+, r20
    1310:	5d 93       	st	X+, r21
    1312:	6d 93       	st	X+, r22
    1314:	7c 93       	st	X, r23
    1316:	1b 97       	sbiw	r26, 0x0b	; 11

	fmt = FS_FAT12;							/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    1318:	47 3f       	cpi	r20, 0xF7	; 247
    131a:	bf e0       	ldi	r27, 0x0F	; 15
    131c:	5b 07       	cpc	r21, r27
    131e:	61 05       	cpc	r22, r1
    1320:	71 05       	cpc	r23, r1
    1322:	d0 f1       	brcs	.+116    	; 0x1398 <pf_mount+0x208>
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	39 c0       	rjmp	.+114    	; 0x139a <pf_mount+0x20a>
    1328:	84 0c       	add	r8, r4
    132a:	95 1c       	adc	r9, r5
    132c:	a6 1c       	adc	r10, r6
    132e:	b7 1c       	adc	r11, r7
	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1330:	0d a1       	ldd	r16, Y+37	; 0x25
    1332:	1e a1       	ldd	r17, Y+38	; 0x26
    1334:	2f a1       	ldd	r18, Y+39	; 0x27
    1336:	38 a5       	ldd	r19, Y+40	; 0x28
    1338:	80 0e       	add	r8, r16
    133a:	91 1e       	adc	r9, r17
    133c:	a2 1e       	adc	r10, r18
    133e:	b3 1e       	adc	r11, r19
    1340:	d7 01       	movw	r26, r14
    1342:	54 96       	adiw	r26, 0x14	; 20
    1344:	8d 92       	st	X+, r8
    1346:	9d 92       	st	X+, r9
    1348:	ad 92       	st	X+, r10
    134a:	bc 92       	st	X, r11
    134c:	57 97       	sbiw	r26, 0x17	; 23

	fs->flag = 0;
    134e:	12 96       	adiw	r26, 0x02	; 2
    1350:	1c 92       	st	X, r1
	FatFs = fs;
    1352:	f0 92 8a 03 	sts	0x038A, r15	; 0x80038a <FatFs+0x1>
    1356:	e0 92 89 03 	sts	0x0389, r14	; 0x800389 <FatFs>

	return FR_OK;
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	30 c0       	rjmp	.+96     	; 0x13be <pf_mount+0x22e>
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
	if (!fs) return FR_OK;				/* Unregister fs object */
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	2e c0       	rjmp	.+92     	; 0x13be <pf_mount+0x22e>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	2c c0       	rjmp	.+88     	; 0x13be <pf_mount+0x22e>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	2a c0       	rjmp	.+84     	; 0x13be <pf_mount+0x22e>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    136a:	87 e0       	ldi	r24, 0x07	; 7
    136c:	28 c0       	rjmp	.+80     	; 0x13be <pf_mount+0x22e>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	26 c0       	rjmp	.+76     	; 0x13be <pf_mount+0x22e>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1372:	87 e0       	ldi	r24, 0x07	; 7
    1374:	24 c0       	rjmp	.+72     	; 0x13be <pf_mount+0x22e>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	22 c0       	rjmp	.+68     	; 0x13be <pf_mount+0x22e>
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    137a:	f7 01       	movw	r30, r14
    137c:	80 83       	st	Z, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    137e:	8d a1       	ldd	r24, Y+37	; 0x25
    1380:	9e a1       	ldd	r25, Y+38	; 0x26
    1382:	af a1       	ldd	r26, Y+39	; 0x27
    1384:	b8 a5       	ldd	r27, Y+40	; 0x28
    1386:	88 0d       	add	r24, r8
    1388:	99 1d       	adc	r25, r9
    138a:	aa 1d       	adc	r26, r10
    138c:	bb 1d       	adc	r27, r11
    138e:	80 8b       	std	Z+16, r24	; 0x10
    1390:	91 8b       	std	Z+17, r25	; 0x11
    1392:	a2 8b       	std	Z+18, r26	; 0x12
    1394:	b3 8b       	std	Z+19, r27	; 0x13
    1396:	c8 cf       	rjmp	.-112    	; 0x1328 <pf_mount+0x198>
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;

	fmt = FS_FAT12;							/* Determine the FAT sub type */
    1398:	81 e0       	ldi	r24, 0x01	; 1
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    139a:	47 3f       	cpi	r20, 0xF7	; 247
    139c:	5f 4f       	sbci	r21, 0xFF	; 255
    139e:	61 05       	cpc	r22, r1
    13a0:	71 05       	cpc	r23, r1
    13a2:	58 f3       	brcs	.-42     	; 0x137a <pf_mount+0x1ea>
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    13a4:	83 e0       	ldi	r24, 0x03	; 3
    13a6:	d7 01       	movw	r26, r14
    13a8:	8c 93       	st	X, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    13aa:	88 a1       	ldd	r24, Y+32	; 0x20
    13ac:	99 a1       	ldd	r25, Y+33	; 0x21
    13ae:	aa a1       	ldd	r26, Y+34	; 0x22
    13b0:	bb a1       	ldd	r27, Y+35	; 0x23
    13b2:	f7 01       	movw	r30, r14
    13b4:	80 8b       	std	Z+16, r24	; 0x10
    13b6:	91 8b       	std	Z+17, r25	; 0x11
    13b8:	a2 8b       	std	Z+18, r26	; 0x12
    13ba:	b3 8b       	std	Z+19, r27	; 0x13
    13bc:	b5 cf       	rjmp	.-150    	; 0x1328 <pf_mount+0x198>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
    13be:	a8 96       	adiw	r28, 0x28	; 40
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	7f 90       	pop	r7
    13e0:	6f 90       	pop	r6
    13e2:	5f 90       	pop	r5
    13e4:	4f 90       	pop	r4
    13e6:	08 95       	ret

000013e8 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	ec 97       	sbiw	r28, 0x3c	; 60
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1400:	00 91 89 03 	lds	r16, 0x0389	; 0x800389 <FatFs>
    1404:	10 91 8a 03 	lds	r17, 0x038A	; 0x80038a <FatFs+0x1>


	if (!fs)						/* Check file system */
    1408:	01 15       	cp	r16, r1
    140a:	11 05       	cpc	r17, r1
    140c:	c9 f1       	breq	.+114    	; 0x1480 <pf_open+0x98>
    140e:	bc 01       	movw	r22, r24
		return FR_NOT_ENABLED;

	fs->flag = 0;
    1410:	f8 01       	movw	r30, r16
    1412:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
    1414:	ce 01       	movw	r24, r28
    1416:	4d 96       	adiw	r24, 0x1d	; 29
    1418:	97 83       	std	Z+7, r25	; 0x07
    141a:	86 83       	std	Z+6, r24	; 0x06
	dj.fn = sp;
    141c:	0c 97       	sbiw	r24, 0x0c	; 12
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
	res = follow_path(&dj, path);	/* Follow the file path */
    1422:	40 97       	sbiw	r24, 0x10	; 16
    1424:	0e 94 b8 07 	call	0xf70	; 0xf70 <follow_path>
	if (res != FR_OK) return res;	/* Follow failed */
    1428:	81 11       	cpse	r24, r1
    142a:	2f c0       	rjmp	.+94     	; 0x148a <pf_open+0xa2>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    142c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    142e:	88 23       	and	r24, r24
    1430:	49 f1       	breq	.+82     	; 0x1484 <pf_open+0x9c>
    1432:	88 a5       	ldd	r24, Y+40	; 0x28
    1434:	84 fd       	sbrc	r24, 4
    1436:	28 c0       	rjmp	.+80     	; 0x1488 <pf_open+0xa0>
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
    1438:	89 a9       	ldd	r24, Y+49	; 0x31
    143a:	9a a9       	ldd	r25, Y+50	; 0x32
    143c:	a0 e0       	ldi	r26, 0x00	; 0
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	dc 01       	movw	r26, r24
    1442:	99 27       	eor	r25, r25
    1444:	88 27       	eor	r24, r24
    1446:	4f a9       	ldd	r20, Y+55	; 0x37
    1448:	58 ad       	ldd	r21, Y+56	; 0x38
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	84 2b       	or	r24, r20
    1450:	95 2b       	or	r25, r21
    1452:	a6 2b       	or	r26, r22
    1454:	b7 2b       	or	r27, r23
	res = follow_path(&dj, path);	/* Follow the file path */
	if (res != FR_OK) return res;	/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
    1456:	f8 01       	movw	r30, r16
    1458:	80 a3       	std	Z+32, r24	; 0x20
    145a:	91 a3       	std	Z+33, r25	; 0x21
    145c:	a2 a3       	std	Z+34, r26	; 0x22
    145e:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1460:	89 ad       	ldd	r24, Y+57	; 0x39
    1462:	9a ad       	ldd	r25, Y+58	; 0x3a
    1464:	ab ad       	ldd	r26, Y+59	; 0x3b
    1466:	bc ad       	ldd	r27, Y+60	; 0x3c
    1468:	84 8f       	std	Z+28, r24	; 0x1c
    146a:	95 8f       	std	Z+29, r25	; 0x1d
    146c:	a6 8f       	std	Z+30, r26	; 0x1e
    146e:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
    1470:	10 8e       	std	Z+24, r1	; 0x18
    1472:	11 8e       	std	Z+25, r1	; 0x19
    1474:	12 8e       	std	Z+26, r1	; 0x1a
    1476:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	82 83       	std	Z+2, r24	; 0x02

	return FR_OK;
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	05 c0       	rjmp	.+10     	; 0x148a <pf_open+0xa2>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
		return FR_NOT_ENABLED;
    1480:	86 e0       	ldi	r24, 0x06	; 6
    1482:	03 c0       	rjmp	.+6      	; 0x148a <pf_open+0xa2>
	fs->buf = dir;
	dj.fn = sp;
	res = follow_path(&dj, path);	/* Follow the file path */
	if (res != FR_OK) return res;	/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	01 c0       	rjmp	.+2      	; 0x148a <pf_open+0xa2>
    1488:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
    148a:	ec 96       	adiw	r28, 0x3c	; 60
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	1f 91       	pop	r17
    149c:	0f 91       	pop	r16
    149e:	08 95       	ret

000014a0 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    14a0:	2f 92       	push	r2
    14a2:	3f 92       	push	r3
    14a4:	4f 92       	push	r4
    14a6:	5f 92       	push	r5
    14a8:	6f 92       	push	r6
    14aa:	7f 92       	push	r7
    14ac:	8f 92       	push	r8
    14ae:	9f 92       	push	r9
    14b0:	af 92       	push	r10
    14b2:	bf 92       	push	r11
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	2c 01       	movw	r4, r24
    14c6:	6b 01       	movw	r12, r22
    14c8:	3a 01       	movw	r6, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
	WORD rcnt;
	FATFS *fs = FatFs;
    14ca:	c0 91 89 03 	lds	r28, 0x0389	; 0x800389 <FatFs>
    14ce:	d0 91 8a 03 	lds	r29, 0x038A	; 0x80038a <FatFs+0x1>


	*br = 0;
    14d2:	fa 01       	movw	r30, r20
    14d4:	11 82       	std	Z+1, r1	; 0x01
    14d6:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    14d8:	20 97       	sbiw	r28, 0x00	; 0
    14da:	09 f4       	brne	.+2      	; 0x14de <pf_read+0x3e>
    14dc:	b6 c0       	rjmp	.+364    	; 0x164a <pf_read+0x1aa>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 ff       	sbrs	r24, 0
    14e2:	b5 c0       	rjmp	.+362    	; 0x164e <pf_read+0x1ae>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    14e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14e8:	ae 8d       	ldd	r26, Y+30	; 0x1e
    14ea:	bf 8d       	ldd	r27, Y+31	; 0x1f
    14ec:	48 8d       	ldd	r20, Y+24	; 0x18
    14ee:	59 8d       	ldd	r21, Y+25	; 0x19
    14f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    14f2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    14f4:	84 1b       	sub	r24, r20
    14f6:	95 0b       	sbc	r25, r21
    14f8:	a6 0b       	sbc	r26, r22
    14fa:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    14fc:	a6 01       	movw	r20, r12
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	84 17       	cp	r24, r20
    1504:	95 07       	cpc	r25, r21
    1506:	a6 07       	cpc	r26, r22
    1508:	b7 07       	cpc	r27, r23
    150a:	08 f4       	brcc	.+2      	; 0x150e <pf_read+0x6e>
    150c:	6c 01       	movw	r12, r24

	while (btr)	{									/* Repeat until all data transferred */
    150e:	c1 14       	cp	r12, r1
    1510:	d1 04       	cpc	r13, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <pf_read+0x76>
    1514:	9e c0       	rjmp	.+316    	; 0x1652 <pf_read+0x1b2>
    1516:	52 01       	movw	r10, r4
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + fs->csect++;
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    1518:	81 2c       	mov	r8, r1
    151a:	68 94       	set
    151c:	99 24       	eor	r9, r9
    151e:	91 f8       	bld	r9, 1
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    1520:	31 2c       	mov	r3, r1
    1522:	21 2c       	mov	r2, r1

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    1524:	e8 8c       	ldd	r14, Y+24	; 0x18
    1526:	f9 8c       	ldd	r15, Y+25	; 0x19
    1528:	0a 8d       	ldd	r16, Y+26	; 0x1a
    152a:	1b 8d       	ldd	r17, Y+27	; 0x1b
    152c:	d8 01       	movw	r26, r16
    152e:	c7 01       	movw	r24, r14
    1530:	91 70       	andi	r25, 0x01	; 1
    1532:	aa 27       	eor	r26, r26
    1534:	bb 27       	eor	r27, r27
    1536:	89 2b       	or	r24, r25
    1538:	8a 2b       	or	r24, r26
    153a:	8b 2b       	or	r24, r27
    153c:	09 f0       	breq	.+2      	; 0x1540 <pf_read+0xa0>
    153e:	49 c0       	rjmp	.+146    	; 0x15d2 <pf_read+0x132>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    1540:	29 81       	ldd	r18, Y+1	; 0x01
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	c8 01       	movw	r24, r16
    154a:	b7 01       	movw	r22, r14
    154c:	05 2e       	mov	r0, r21
    154e:	59 e0       	ldi	r21, 0x09	; 9
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	5a 95       	dec	r21
    155a:	d1 f7       	brne	.-12     	; 0x1550 <pf_read+0xb0>
    155c:	50 2d       	mov	r21, r0
    155e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__udivmodsi4>
    1562:	67 2b       	or	r22, r23
    1564:	68 2b       	or	r22, r24
    1566:	69 2b       	or	r22, r25
    1568:	d1 f4       	brne	.+52     	; 0x159e <pf_read+0xfe>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
    156a:	ef 28       	or	r14, r15
    156c:	e0 2a       	or	r14, r16
    156e:	e1 2a       	or	r14, r17
    1570:	29 f4       	brne	.+10     	; 0x157c <pf_read+0xdc>
    1572:	68 a1       	ldd	r22, Y+32	; 0x20
    1574:	79 a1       	ldd	r23, Y+33	; 0x21
    1576:	8a a1       	ldd	r24, Y+34	; 0x22
    1578:	9b a1       	ldd	r25, Y+35	; 0x23
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <pf_read+0xe8>
    157c:	6c a1       	ldd	r22, Y+36	; 0x24
    157e:	7d a1       	ldd	r23, Y+37	; 0x25
    1580:	8e a1       	ldd	r24, Y+38	; 0x26
    1582:	9f a1       	ldd	r25, Y+39	; 0x27
    1584:	0e 94 29 06 	call	0xc52	; 0xc52 <get_fat>
				if (clst <= 1) goto fr_abort;
    1588:	62 30       	cpi	r22, 0x02	; 2
    158a:	71 05       	cpc	r23, r1
    158c:	81 05       	cpc	r24, r1
    158e:	91 05       	cpc	r25, r1
    1590:	08 f4       	brcc	.+2      	; 0x1594 <pf_read+0xf4>
    1592:	58 c0       	rjmp	.+176    	; 0x1644 <pf_read+0x1a4>
				fs->curr_clust = clst;				/* Update current cluster */
    1594:	6c a3       	std	Y+36, r22	; 0x24
    1596:	7d a3       	std	Y+37, r23	; 0x25
    1598:	8e a3       	std	Y+38, r24	; 0x26
    159a:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    159c:	1b 82       	std	Y+3, r1	; 0x03
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    159e:	6c a1       	ldd	r22, Y+36	; 0x24
    15a0:	7d a1       	ldd	r23, Y+37	; 0x25
    15a2:	8e a1       	ldd	r24, Y+38	; 0x26
    15a4:	9f a1       	ldd	r25, Y+39	; 0x27
    15a6:	0e 94 5c 05 	call	0xab8	; 0xab8 <clust2sect>
			if (!sect) goto fr_abort;
    15aa:	61 15       	cp	r22, r1
    15ac:	71 05       	cpc	r23, r1
    15ae:	81 05       	cpc	r24, r1
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <pf_read+0x116>
    15b4:	47 c0       	rjmp	.+142    	; 0x1644 <pf_read+0x1a4>
			fs->dsect = sect + fs->csect++;
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	31 e0       	ldi	r19, 0x01	; 1
    15ba:	32 0f       	add	r19, r18
    15bc:	3b 83       	std	Y+3, r19	; 0x03
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	82 0f       	add	r24, r18
    15c4:	91 1d       	adc	r25, r1
    15c6:	a1 1d       	adc	r26, r1
    15c8:	b1 1d       	adc	r27, r1
    15ca:	88 a7       	std	Y+40, r24	; 0x28
    15cc:	99 a7       	std	Y+41, r25	; 0x29
    15ce:	aa a7       	std	Y+42, r26	; 0x2a
    15d0:	bb a7       	std	Y+43, r27	; 0x2b
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    15d2:	28 8d       	ldd	r18, Y+24	; 0x18
    15d4:	39 8d       	ldd	r19, Y+25	; 0x19
    15d6:	31 70       	andi	r19, 0x01	; 1
    15d8:	c4 01       	movw	r24, r8
    15da:	82 1b       	sub	r24, r18
    15dc:	93 0b       	sbc	r25, r19
    15de:	76 01       	movw	r14, r12
    15e0:	8c 15       	cp	r24, r12
    15e2:	9d 05       	cpc	r25, r13
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <pf_read+0x148>
    15e6:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    15e8:	48 a5       	ldd	r20, Y+40	; 0x28
    15ea:	59 a5       	ldd	r21, Y+41	; 0x29
    15ec:	6a a5       	ldd	r22, Y+42	; 0x2a
    15ee:	7b a5       	ldd	r23, Y+43	; 0x2b
    15f0:	41 14       	cp	r4, r1
    15f2:	51 04       	cpc	r5, r1
    15f4:	19 f0       	breq	.+6      	; 0x15fc <pf_read+0x15c>
    15f6:	8a 2d       	mov	r24, r10
    15f8:	9b 2d       	mov	r25, r11
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <pf_read+0x160>
    15fc:	83 2d       	mov	r24, r3
    15fe:	92 2d       	mov	r25, r2
    1600:	87 01       	movw	r16, r14
    1602:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <disk_readp>
		if (dr) goto fr_abort;
    1606:	81 11       	cpse	r24, r1
    1608:	1d c0       	rjmp	.+58     	; 0x1644 <pf_read+0x1a4>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    160a:	88 8d       	ldd	r24, Y+24	; 0x18
    160c:	99 8d       	ldd	r25, Y+25	; 0x19
    160e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1610:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1612:	8e 0d       	add	r24, r14
    1614:	9f 1d       	adc	r25, r15
    1616:	a1 1d       	adc	r26, r1
    1618:	b1 1d       	adc	r27, r1
    161a:	88 8f       	std	Y+24, r24	; 0x18
    161c:	99 8f       	std	Y+25, r25	; 0x19
    161e:	aa 8f       	std	Y+26, r26	; 0x1a
    1620:	bb 8f       	std	Y+27, r27	; 0x1b
    1622:	ae 0c       	add	r10, r14
    1624:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    1626:	ce 18       	sub	r12, r14
    1628:	df 08       	sbc	r13, r15
    162a:	f3 01       	movw	r30, r6
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	e8 0e       	add	r14, r24
    1632:	f9 1e       	adc	r15, r25
    1634:	f1 82       	std	Z+1, r15	; 0x01
    1636:	e0 82       	st	Z, r14
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    1638:	c1 14       	cp	r12, r1
    163a:	d1 04       	cpc	r13, r1
    163c:	09 f0       	breq	.+2      	; 0x1640 <pf_read+0x1a0>
    163e:	72 cf       	rjmp	.-284    	; 0x1524 <pf_read+0x84>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	08 c0       	rjmp	.+16     	; 0x1654 <pf_read+0x1b4>

fr_abort:
	fs->flag = 0;
    1644:	1a 82       	std	Y+2, r1	; 0x02
	return FR_DISK_ERR;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	05 c0       	rjmp	.+10     	; 0x1654 <pf_read+0x1b4>
	WORD rcnt;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    164a:	86 e0       	ldi	r24, 0x06	; 6
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <pf_read+0x1b4>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
    164e:	85 e0       	ldi	r24, 0x05	; 5
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <pf_read+0x1b4>
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    1652:	80 e0       	ldi	r24, 0x00	; 0

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	ff 90       	pop	r15
    165e:	ef 90       	pop	r14
    1660:	df 90       	pop	r13
    1662:	cf 90       	pop	r12
    1664:	bf 90       	pop	r11
    1666:	af 90       	pop	r10
    1668:	9f 90       	pop	r9
    166a:	8f 90       	pop	r8
    166c:	7f 90       	pop	r7
    166e:	6f 90       	pop	r6
    1670:	5f 90       	pop	r5
    1672:	4f 90       	pop	r4
    1674:	3f 90       	pop	r3
    1676:	2f 90       	pop	r2
    1678:	08 95       	ret

0000167a <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    167a:	4f 92       	push	r4
    167c:	5f 92       	push	r5
    167e:	6f 92       	push	r6
    1680:	7f 92       	push	r7
    1682:	8f 92       	push	r8
    1684:	9f 92       	push	r9
    1686:	af 92       	push	r10
    1688:	bf 92       	push	r11
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	6c 01       	movw	r12, r24
    169c:	7b 01       	movw	r14, r22
    169e:	5a 01       	movw	r10, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	WORD wcnt;
	FATFS *fs = FatFs;
    16a0:	c0 91 89 03 	lds	r28, 0x0389	; 0x800389 <FatFs>
    16a4:	d0 91 8a 03 	lds	r29, 0x038A	; 0x80038a <FatFs+0x1>


	*bw = 0;
    16a8:	fa 01       	movw	r30, r20
    16aa:	11 82       	std	Z+1, r1	; 0x01
    16ac:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    16ae:	20 97       	sbiw	r28, 0x00	; 0
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <pf_write+0x3a>
    16b2:	de c0       	rjmp	.+444    	; 0x1870 <pf_write+0x1f6>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 ff       	sbrs	r24, 0
    16b8:	dd c0       	rjmp	.+442    	; 0x1874 <pf_write+0x1fa>
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    16ba:	67 2b       	or	r22, r23
    16bc:	81 f4       	brne	.+32     	; 0x16de <pf_write+0x64>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    16be:	86 ff       	sbrs	r24, 6
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <pf_write+0x5a>
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	ba 01       	movw	r22, r20
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 b6 01 	call	0x36c	; 0x36c <disk_writep>
    16d0:	81 11       	cpse	r24, r1
    16d2:	cb c0       	rjmp	.+406    	; 0x186a <pf_write+0x1f0>
		fs->flag &= ~FA__WIP;
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	8f 7b       	andi	r24, 0xBF	; 191
    16d8:	8a 83       	std	Y+2, r24	; 0x02
		return FR_OK;
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	ce c0       	rjmp	.+412    	; 0x187a <pf_write+0x200>
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
    16de:	86 fd       	sbrc	r24, 6
    16e0:	0a c0       	rjmp	.+20     	; 0x16f6 <pf_write+0x7c>
			fs->fptr &= 0xFFFFFE00;
    16e2:	88 8d       	ldd	r24, Y+24	; 0x18
    16e4:	99 8d       	ldd	r25, Y+25	; 0x19
    16e6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    16e8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    16ea:	88 27       	eor	r24, r24
    16ec:	9e 7f       	andi	r25, 0xFE	; 254
    16ee:	88 8f       	std	Y+24, r24	; 0x18
    16f0:	99 8f       	std	Y+25, r25	; 0x19
    16f2:	aa 8f       	std	Y+26, r26	; 0x1a
    16f4:	bb 8f       	std	Y+27, r27	; 0x1b
	}
	remain = fs->fsize - fs->fptr;
    16f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16fa:	ae 8d       	ldd	r26, Y+30	; 0x1e
    16fc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    16fe:	48 8d       	ldd	r20, Y+24	; 0x18
    1700:	59 8d       	ldd	r21, Y+25	; 0x19
    1702:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1704:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1706:	84 1b       	sub	r24, r20
    1708:	95 0b       	sbc	r25, r21
    170a:	a6 0b       	sbc	r26, r22
    170c:	b7 0b       	sbc	r27, r23
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    170e:	a7 01       	movw	r20, r14
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	84 17       	cp	r24, r20
    1716:	95 07       	cpc	r25, r21
    1718:	a6 07       	cpc	r26, r22
    171a:	b7 07       	cpc	r27, r23
    171c:	20 f4       	brcc	.+8      	; 0x1726 <pf_write+0xac>
    171e:	7c 01       	movw	r14, r24

	while (btw)	{									/* Repeat until all data transferred */
    1720:	89 2b       	or	r24, r25
    1722:	09 f4       	brne	.+2      	; 0x1726 <pf_write+0xac>
    1724:	a9 c0       	rjmp	.+338    	; 0x1878 <pf_write+0x1fe>
			if (!sect) goto fw_abort;
			fs->dsect = sect + fs->csect++;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    1726:	81 2c       	mov	r8, r1
    1728:	68 94       	set
    172a:	99 24       	eor	r9, r9
    172c:	91 f8       	bld	r9, 1
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
    172e:	48 8c       	ldd	r4, Y+24	; 0x18
    1730:	59 8c       	ldd	r5, Y+25	; 0x19
    1732:	6a 8c       	ldd	r6, Y+26	; 0x1a
    1734:	7b 8c       	ldd	r7, Y+27	; 0x1b
    1736:	c2 01       	movw	r24, r4
    1738:	91 70       	andi	r25, 0x01	; 1
    173a:	89 2b       	or	r24, r25
    173c:	09 f0       	breq	.+2      	; 0x1740 <pf_write+0xc6>
    173e:	52 c0       	rjmp	.+164    	; 0x17e4 <pf_write+0x16a>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    1740:	29 81       	ldd	r18, Y+1	; 0x01
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	c3 01       	movw	r24, r6
    174a:	b2 01       	movw	r22, r4
    174c:	05 2e       	mov	r0, r21
    174e:	59 e0       	ldi	r21, 0x09	; 9
    1750:	96 95       	lsr	r25
    1752:	87 95       	ror	r24
    1754:	77 95       	ror	r23
    1756:	67 95       	ror	r22
    1758:	5a 95       	dec	r21
    175a:	d1 f7       	brne	.-12     	; 0x1750 <pf_write+0xd6>
    175c:	50 2d       	mov	r21, r0
    175e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__udivmodsi4>
    1762:	67 2b       	or	r22, r23
    1764:	68 2b       	or	r22, r24
    1766:	69 2b       	or	r22, r25
    1768:	d1 f4       	brne	.+52     	; 0x179e <pf_write+0x124>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
    176a:	45 28       	or	r4, r5
    176c:	46 28       	or	r4, r6
    176e:	47 28       	or	r4, r7
    1770:	29 f4       	brne	.+10     	; 0x177c <pf_write+0x102>
    1772:	68 a1       	ldd	r22, Y+32	; 0x20
    1774:	79 a1       	ldd	r23, Y+33	; 0x21
    1776:	8a a1       	ldd	r24, Y+34	; 0x22
    1778:	9b a1       	ldd	r25, Y+35	; 0x23
    177a:	06 c0       	rjmp	.+12     	; 0x1788 <pf_write+0x10e>
    177c:	6c a1       	ldd	r22, Y+36	; 0x24
    177e:	7d a1       	ldd	r23, Y+37	; 0x25
    1780:	8e a1       	ldd	r24, Y+38	; 0x26
    1782:	9f a1       	ldd	r25, Y+39	; 0x27
    1784:	0e 94 29 06 	call	0xc52	; 0xc52 <get_fat>
				if (clst <= 1) goto fw_abort;
    1788:	62 30       	cpi	r22, 0x02	; 2
    178a:	71 05       	cpc	r23, r1
    178c:	81 05       	cpc	r24, r1
    178e:	91 05       	cpc	r25, r1
    1790:	08 f4       	brcc	.+2      	; 0x1794 <pf_write+0x11a>
    1792:	6b c0       	rjmp	.+214    	; 0x186a <pf_write+0x1f0>
				fs->curr_clust = clst;				/* Update current cluster */
    1794:	6c a3       	std	Y+36, r22	; 0x24
    1796:	7d a3       	std	Y+37, r23	; 0x25
    1798:	8e a3       	std	Y+38, r24	; 0x26
    179a:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    179c:	1b 82       	std	Y+3, r1	; 0x03
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    179e:	6c a1       	ldd	r22, Y+36	; 0x24
    17a0:	7d a1       	ldd	r23, Y+37	; 0x25
    17a2:	8e a1       	ldd	r24, Y+38	; 0x26
    17a4:	9f a1       	ldd	r25, Y+39	; 0x27
    17a6:	0e 94 5c 05 	call	0xab8	; 0xab8 <clust2sect>
			if (!sect) goto fw_abort;
    17aa:	61 15       	cp	r22, r1
    17ac:	71 05       	cpc	r23, r1
    17ae:	81 05       	cpc	r24, r1
    17b0:	91 05       	cpc	r25, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <pf_write+0x13c>
    17b4:	5a c0       	rjmp	.+180    	; 0x186a <pf_write+0x1f0>
			fs->dsect = sect + fs->csect++;
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	31 e0       	ldi	r19, 0x01	; 1
    17ba:	32 0f       	add	r19, r18
    17bc:	3b 83       	std	Y+3, r19	; 0x03
    17be:	ab 01       	movw	r20, r22
    17c0:	bc 01       	movw	r22, r24
    17c2:	42 0f       	add	r20, r18
    17c4:	51 1d       	adc	r21, r1
    17c6:	61 1d       	adc	r22, r1
    17c8:	71 1d       	adc	r23, r1
    17ca:	48 a7       	std	Y+40, r20	; 0x28
    17cc:	59 a7       	std	Y+41, r21	; 0x29
    17ce:	6a a7       	std	Y+42, r22	; 0x2a
    17d0:	7b a7       	std	Y+43, r23	; 0x2b
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 b6 01 	call	0x36c	; 0x36c <disk_writep>
    17da:	81 11       	cpse	r24, r1
    17dc:	46 c0       	rjmp	.+140    	; 0x186a <pf_write+0x1f0>
			fs->flag |= FA__WIP;
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	80 64       	ori	r24, 0x40	; 64
    17e2:	8a 83       	std	Y+2, r24	; 0x02
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    17e4:	88 8d       	ldd	r24, Y+24	; 0x18
    17e6:	99 8d       	ldd	r25, Y+25	; 0x19
    17e8:	91 70       	andi	r25, 0x01	; 1
    17ea:	94 01       	movw	r18, r8
    17ec:	28 1b       	sub	r18, r24
    17ee:	39 0b       	sbc	r19, r25
    17f0:	87 01       	movw	r16, r14
    17f2:	2e 15       	cp	r18, r14
    17f4:	3f 05       	cpc	r19, r15
    17f6:	08 f4       	brcc	.+2      	; 0x17fa <pf_write+0x180>
    17f8:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    17fa:	28 01       	movw	r4, r16
    17fc:	61 2c       	mov	r6, r1
    17fe:	71 2c       	mov	r7, r1
    1800:	b3 01       	movw	r22, r6
    1802:	a2 01       	movw	r20, r4
    1804:	c6 01       	movw	r24, r12
    1806:	0e 94 b6 01 	call	0x36c	; 0x36c <disk_writep>
    180a:	81 11       	cpse	r24, r1
    180c:	2e c0       	rjmp	.+92     	; 0x186a <pf_write+0x1f0>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    180e:	88 8d       	ldd	r24, Y+24	; 0x18
    1810:	99 8d       	ldd	r25, Y+25	; 0x19
    1812:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1814:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1816:	48 0e       	add	r4, r24
    1818:	59 1e       	adc	r5, r25
    181a:	6a 1e       	adc	r6, r26
    181c:	7b 1e       	adc	r7, r27
    181e:	48 8e       	std	Y+24, r4	; 0x18
    1820:	59 8e       	std	Y+25, r5	; 0x19
    1822:	6a 8e       	std	Y+26, r6	; 0x1a
    1824:	7b 8e       	std	Y+27, r7	; 0x1b
    1826:	c0 0e       	add	r12, r16
    1828:	d1 1e       	adc	r13, r17
		btw -= wcnt; *bw += wcnt;
    182a:	e0 1a       	sub	r14, r16
    182c:	f1 0a       	sbc	r15, r17
    182e:	f5 01       	movw	r30, r10
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	08 0f       	add	r16, r24
    1836:	19 1f       	adc	r17, r25
    1838:	11 83       	std	Z+1, r17	; 0x01
    183a:	00 83       	st	Z, r16
		if (((WORD)fs->fptr % 512) == 0) {
    183c:	88 8d       	ldd	r24, Y+24	; 0x18
    183e:	99 8d       	ldd	r25, Y+25	; 0x19
    1840:	91 70       	andi	r25, 0x01	; 1
    1842:	89 2b       	or	r24, r25
    1844:	61 f4       	brne	.+24     	; 0x185e <pf_write+0x1e4>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	ba 01       	movw	r22, r20
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 b6 01 	call	0x36c	; 0x36c <disk_writep>
    1854:	81 11       	cpse	r24, r1
    1856:	09 c0       	rjmp	.+18     	; 0x186a <pf_write+0x1f0>
			fs->flag &= ~FA__WIP;
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	8f 7b       	andi	r24, 0xBF	; 191
    185c:	8a 83       	std	Y+2, r24	; 0x02
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    185e:	e1 14       	cp	r14, r1
    1860:	f1 04       	cpc	r15, r1
    1862:	09 f0       	breq	.+2      	; 0x1866 <pf_write+0x1ec>
    1864:	64 cf       	rjmp	.-312    	; 0x172e <pf_write+0xb4>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	08 c0       	rjmp	.+16     	; 0x187a <pf_write+0x200>

fw_abort:
	fs->flag = 0;
    186a:	1a 82       	std	Y+2, r1	; 0x02
	return FR_DISK_ERR;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	05 c0       	rjmp	.+10     	; 0x187a <pf_write+0x200>
	WORD wcnt;
	FATFS *fs = FatFs;


	*bw = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1870:	86 e0       	ldi	r24, 0x06	; 6
    1872:	03 c0       	rjmp	.+6      	; 0x187a <pf_write+0x200>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
    1874:	85 e0       	ldi	r24, 0x05	; 5
    1876:	01 c0       	rjmp	.+2      	; 0x187a <pf_write+0x200>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
    1878:	80 e0       	ldi	r24, 0x00	; 0

fw_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	bf 90       	pop	r11
    188c:	af 90       	pop	r10
    188e:	9f 90       	pop	r9
    1890:	8f 90       	pop	r8
    1892:	7f 90       	pop	r7
    1894:	6f 90       	pop	r6
    1896:	5f 90       	pop	r5
    1898:	4f 90       	pop	r4
    189a:	08 95       	ret

0000189c <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    189c:	4f 92       	push	r4
    189e:	5f 92       	push	r5
    18a0:	6f 92       	push	r6
    18a2:	7f 92       	push	r7
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	00 d0       	rcall	.+0      	; 0x18be <pf_lseek+0x22>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <pf_lseek+0x24>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    18c4:	00 91 89 03 	lds	r16, 0x0389	; 0x800389 <FatFs>
    18c8:	10 91 8a 03 	lds	r17, 0x038A	; 0x80038a <FatFs+0x1>


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    18cc:	01 15       	cp	r16, r1
    18ce:	11 05       	cpc	r17, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <pf_lseek+0x38>
    18d2:	f6 c0       	rjmp	.+492    	; 0x1ac0 <pf_lseek+0x224>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    18d4:	d8 01       	movw	r26, r16
    18d6:	12 96       	adiw	r26, 0x02	; 2
    18d8:	2c 91       	ld	r18, X
    18da:	12 97       	sbiw	r26, 0x02	; 2
    18dc:	20 ff       	sbrs	r18, 0
    18de:	f2 c0       	rjmp	.+484    	; 0x1ac4 <pf_lseek+0x228>
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
    18e0:	5c 96       	adiw	r26, 0x1c	; 28
    18e2:	8d 90       	ld	r8, X+
    18e4:	9d 90       	ld	r9, X+
    18e6:	ad 90       	ld	r10, X+
    18e8:	bc 90       	ld	r11, X
    18ea:	5f 97       	sbiw	r26, 0x1f	; 31
    18ec:	c6 2e       	mov	r12, r22
    18ee:	d7 2e       	mov	r13, r23
    18f0:	e8 2e       	mov	r14, r24
    18f2:	f9 2e       	mov	r15, r25
    18f4:	8c 14       	cp	r8, r12
    18f6:	9d 04       	cpc	r9, r13
    18f8:	ae 04       	cpc	r10, r14
    18fa:	bf 04       	cpc	r11, r15
    18fc:	10 f4       	brcc	.+4      	; 0x1902 <pf_lseek+0x66>
    18fe:	75 01       	movw	r14, r10
    1900:	64 01       	movw	r12, r8
	ifptr = fs->fptr;
    1902:	f8 01       	movw	r30, r16
    1904:	40 8c       	ldd	r4, Z+24	; 0x18
    1906:	51 8c       	ldd	r5, Z+25	; 0x19
    1908:	62 8c       	ldd	r6, Z+26	; 0x1a
    190a:	73 8c       	ldd	r7, Z+27	; 0x1b
	fs->fptr = 0;
    190c:	10 8e       	std	Z+24, r1	; 0x18
    190e:	11 8e       	std	Z+25, r1	; 0x19
    1910:	12 8e       	std	Z+26, r1	; 0x1a
    1912:	13 8e       	std	Z+27, r1	; 0x1b
	if (ofs > 0) {
    1914:	c1 14       	cp	r12, r1
    1916:	d1 04       	cpc	r13, r1
    1918:	e1 04       	cpc	r14, r1
    191a:	f1 04       	cpc	r15, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <pf_lseek+0x84>
    191e:	d4 c0       	rjmp	.+424    	; 0x1ac8 <pf_lseek+0x22c>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    1920:	81 80       	ldd	r8, Z+1	; 0x01
    1922:	91 2c       	mov	r9, r1
    1924:	a1 2c       	mov	r10, r1
    1926:	b1 2c       	mov	r11, r1
    1928:	07 2e       	mov	r0, r23
    192a:	79 e0       	ldi	r23, 0x09	; 9
    192c:	88 0c       	add	r8, r8
    192e:	99 1c       	adc	r9, r9
    1930:	aa 1c       	adc	r10, r10
    1932:	bb 1c       	adc	r11, r11
    1934:	7a 95       	dec	r23
    1936:	d1 f7       	brne	.-12     	; 0x192c <pf_lseek+0x90>
    1938:	70 2d       	mov	r23, r0
		if (ifptr > 0 &&
    193a:	41 14       	cp	r4, r1
    193c:	51 04       	cpc	r5, r1
    193e:	61 04       	cpc	r6, r1
    1940:	71 04       	cpc	r7, r1
    1942:	09 f4       	brne	.+2      	; 0x1946 <pf_lseek+0xaa>
    1944:	3f c0       	rjmp	.+126    	; 0x19c4 <pf_lseek+0x128>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    1946:	b1 e0       	ldi	r27, 0x01	; 1
    1948:	4b 1a       	sub	r4, r27
    194a:	51 08       	sbc	r5, r1
    194c:	61 08       	sbc	r6, r1
    194e:	71 08       	sbc	r7, r1
    1950:	c7 01       	movw	r24, r14
    1952:	b6 01       	movw	r22, r12
    1954:	61 50       	subi	r22, 0x01	; 1
    1956:	71 09       	sbc	r23, r1
    1958:	81 09       	sbc	r24, r1
    195a:	91 09       	sbc	r25, r1
    195c:	a5 01       	movw	r20, r10
    195e:	94 01       	movw	r18, r8
    1960:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__udivmodsi4>
    1964:	29 83       	std	Y+1, r18	; 0x01
    1966:	3a 83       	std	Y+2, r19	; 0x02
    1968:	4b 83       	std	Y+3, r20	; 0x03
    196a:	5c 83       	std	Y+4, r21	; 0x04
    196c:	c3 01       	movw	r24, r6
    196e:	b2 01       	movw	r22, r4
    1970:	a5 01       	movw	r20, r10
    1972:	94 01       	movw	r18, r8
    1974:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__udivmodsi4>
	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
	if (ofs > 0) {
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
		if (ifptr > 0 &&
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	ab 81       	ldd	r26, Y+3	; 0x03
    197e:	bc 81       	ldd	r27, Y+4	; 0x04
    1980:	82 17       	cp	r24, r18
    1982:	93 07       	cpc	r25, r19
    1984:	a4 07       	cpc	r26, r20
    1986:	b5 07       	cpc	r27, r21
    1988:	e8 f0       	brcs	.+58     	; 0x19c4 <pf_lseek+0x128>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    198a:	88 27       	eor	r24, r24
    198c:	99 27       	eor	r25, r25
    198e:	dc 01       	movw	r26, r24
    1990:	88 19       	sub	r24, r8
    1992:	99 09       	sbc	r25, r9
    1994:	aa 09       	sbc	r26, r10
    1996:	bb 09       	sbc	r27, r11
    1998:	48 22       	and	r4, r24
    199a:	59 22       	and	r5, r25
    199c:	6a 22       	and	r6, r26
    199e:	7b 22       	and	r7, r27
    19a0:	d8 01       	movw	r26, r16
    19a2:	58 96       	adiw	r26, 0x18	; 24
    19a4:	4d 92       	st	X+, r4
    19a6:	5d 92       	st	X+, r5
    19a8:	6d 92       	st	X+, r6
    19aa:	7c 92       	st	X, r7
    19ac:	5b 97       	sbiw	r26, 0x1b	; 27
			ofs -= fs->fptr;
    19ae:	c4 18       	sub	r12, r4
    19b0:	d5 08       	sbc	r13, r5
    19b2:	e6 08       	sbc	r14, r6
    19b4:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
    19b6:	94 96       	adiw	r26, 0x24	; 36
    19b8:	6d 91       	ld	r22, X+
    19ba:	7d 91       	ld	r23, X+
    19bc:	8d 91       	ld	r24, X+
    19be:	9c 91       	ld	r25, X
    19c0:	97 97       	sbiw	r26, 0x27	; 39
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <pf_lseek+0x13a>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    19c4:	f8 01       	movw	r30, r16
    19c6:	60 a1       	ldd	r22, Z+32	; 0x20
    19c8:	71 a1       	ldd	r23, Z+33	; 0x21
    19ca:	82 a1       	ldd	r24, Z+34	; 0x22
    19cc:	93 a1       	ldd	r25, Z+35	; 0x23
			fs->curr_clust = clst;
    19ce:	64 a3       	std	Z+36, r22	; 0x24
    19d0:	75 a3       	std	Z+37, r23	; 0x25
    19d2:	86 a3       	std	Z+38, r24	; 0x26
    19d4:	97 a3       	std	Z+39, r25	; 0x27
		}
		while (ofs > bcs) {				/* Cluster following loop */
    19d6:	8c 14       	cp	r8, r12
    19d8:	9d 04       	cpc	r9, r13
    19da:	ae 04       	cpc	r10, r14
    19dc:	bf 04       	cpc	r11, r15
    19de:	60 f5       	brcc	.+88     	; 0x1a38 <pf_lseek+0x19c>
			clst = get_fat(clst);		/* Follow cluster chain */
    19e0:	0e 94 29 06 	call	0xc52	; 0xc52 <get_fat>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
    19e4:	62 30       	cpi	r22, 0x02	; 2
    19e6:	71 05       	cpc	r23, r1
    19e8:	81 05       	cpc	r24, r1
    19ea:	91 05       	cpc	r25, r1
    19ec:	08 f4       	brcc	.+2      	; 0x19f0 <pf_lseek+0x154>
    19ee:	63 c0       	rjmp	.+198    	; 0x1ab6 <pf_lseek+0x21a>
    19f0:	f8 01       	movw	r30, r16
    19f2:	40 84       	ldd	r4, Z+8	; 0x08
    19f4:	51 84       	ldd	r5, Z+9	; 0x09
    19f6:	62 84       	ldd	r6, Z+10	; 0x0a
    19f8:	73 84       	ldd	r7, Z+11	; 0x0b
    19fa:	64 15       	cp	r22, r4
    19fc:	75 05       	cpc	r23, r5
    19fe:	86 05       	cpc	r24, r6
    1a00:	97 05       	cpc	r25, r7
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <pf_lseek+0x16a>
    1a04:	58 c0       	rjmp	.+176    	; 0x1ab6 <pf_lseek+0x21a>
			fs->curr_clust = clst;
    1a06:	64 a3       	std	Z+36, r22	; 0x24
    1a08:	75 a3       	std	Z+37, r23	; 0x25
    1a0a:	86 a3       	std	Z+38, r24	; 0x26
    1a0c:	97 a3       	std	Z+39, r25	; 0x27
			fs->fptr += bcs;
    1a0e:	40 8c       	ldd	r4, Z+24	; 0x18
    1a10:	51 8c       	ldd	r5, Z+25	; 0x19
    1a12:	62 8c       	ldd	r6, Z+26	; 0x1a
    1a14:	73 8c       	ldd	r7, Z+27	; 0x1b
    1a16:	48 0c       	add	r4, r8
    1a18:	59 1c       	adc	r5, r9
    1a1a:	6a 1c       	adc	r6, r10
    1a1c:	7b 1c       	adc	r7, r11
    1a1e:	40 8e       	std	Z+24, r4	; 0x18
    1a20:	51 8e       	std	Z+25, r5	; 0x19
    1a22:	62 8e       	std	Z+26, r6	; 0x1a
    1a24:	73 8e       	std	Z+27, r7	; 0x1b
			ofs -= bcs;
    1a26:	c8 18       	sub	r12, r8
    1a28:	d9 08       	sbc	r13, r9
    1a2a:	ea 08       	sbc	r14, r10
    1a2c:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    1a2e:	8c 14       	cp	r8, r12
    1a30:	9d 04       	cpc	r9, r13
    1a32:	ae 04       	cpc	r10, r14
    1a34:	bf 04       	cpc	r11, r15
    1a36:	a0 f2       	brcs	.-88     	; 0x19e0 <pf_lseek+0x144>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    1a38:	d8 01       	movw	r26, r16
    1a3a:	58 96       	adiw	r26, 0x18	; 24
    1a3c:	8d 90       	ld	r8, X+
    1a3e:	9d 90       	ld	r9, X+
    1a40:	ad 90       	ld	r10, X+
    1a42:	bc 90       	ld	r11, X
    1a44:	5b 97       	sbiw	r26, 0x1b	; 27
    1a46:	8c 0c       	add	r8, r12
    1a48:	9d 1c       	adc	r9, r13
    1a4a:	ae 1c       	adc	r10, r14
    1a4c:	bf 1c       	adc	r11, r15
    1a4e:	f8 01       	movw	r30, r16
    1a50:	80 8e       	std	Z+24, r8	; 0x18
    1a52:	91 8e       	std	Z+25, r9	; 0x19
    1a54:	a2 8e       	std	Z+26, r10	; 0x1a
    1a56:	b3 8e       	std	Z+27, r11	; 0x1b
		sect = clust2sect(clst);		/* Current sector */
    1a58:	0e 94 5c 05 	call	0xab8	; 0xab8 <clust2sect>
		if (!sect) goto fe_abort;
    1a5c:	61 15       	cp	r22, r1
    1a5e:	71 05       	cpc	r23, r1
    1a60:	81 05       	cpc	r24, r1
    1a62:	91 05       	cpc	r25, r1
    1a64:	41 f1       	breq	.+80     	; 0x1ab6 <pf_lseek+0x21a>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
    1a66:	46 01       	movw	r8, r12
    1a68:	57 01       	movw	r10, r14
    1a6a:	07 2e       	mov	r0, r23
    1a6c:	79 e0       	ldi	r23, 0x09	; 9
    1a6e:	b6 94       	lsr	r11
    1a70:	a7 94       	ror	r10
    1a72:	97 94       	ror	r9
    1a74:	87 94       	ror	r8
    1a76:	7a 95       	dec	r23
    1a78:	d1 f7       	brne	.-12     	; 0x1a6e <pf_lseek+0x1d2>
    1a7a:	70 2d       	mov	r23, r0
		if (ofs % 512)
    1a7c:	f1 e0       	ldi	r31, 0x01	; 1
    1a7e:	df 22       	and	r13, r31
    1a80:	ee 24       	eor	r14, r14
    1a82:	ff 24       	eor	r15, r15
    1a84:	cd 28       	or	r12, r13
    1a86:	ce 28       	or	r12, r14
    1a88:	cf 28       	or	r12, r15
    1a8a:	29 f4       	brne	.+10     	; 0x1a96 <pf_lseek+0x1fa>
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
    1a8c:	d8 01       	movw	r26, r16
    1a8e:	13 96       	adiw	r26, 0x03	; 3
    1a90:	8c 92       	st	X, r8
		if (ofs % 512)
			fs->dsect = sect + fs->csect++;
	}

	return FR_OK;
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	1a c0       	rjmp	.+52     	; 0x1aca <pf_lseek+0x22e>
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
		if (ofs % 512)
			fs->dsect = sect + fs->csect++;
    1a96:	21 e0       	ldi	r18, 0x01	; 1
    1a98:	28 0d       	add	r18, r8
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	23 83       	std	Z+3, r18	; 0x03
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	88 0d       	add	r24, r8
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	a1 1d       	adc	r26, r1
    1aa8:	b1 1d       	adc	r27, r1
    1aaa:	80 a7       	std	Z+40, r24	; 0x28
    1aac:	91 a7       	std	Z+41, r25	; 0x29
    1aae:	a2 a7       	std	Z+42, r26	; 0x2a
    1ab0:	b3 a7       	std	Z+43, r27	; 0x2b
	}

	return FR_OK;
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	0a c0       	rjmp	.+20     	; 0x1aca <pf_lseek+0x22e>

fe_abort:
	fs->flag = 0;
    1ab6:	d8 01       	movw	r26, r16
    1ab8:	12 96       	adiw	r26, 0x02	; 2
    1aba:	1c 92       	st	X, r1
	return FR_DISK_ERR;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <pf_lseek+0x22e>
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1ac0:	86 e0       	ldi	r24, 0x06	; 6
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <pf_lseek+0x22e>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
			return FR_NOT_OPENED;
    1ac4:	85 e0       	ldi	r24, 0x05	; 5
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <pf_lseek+0x22e>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
		if (ofs % 512)
			fs->dsect = sect + fs->csect++;
	}

	return FR_OK;
    1ac8:	80 e0       	ldi	r24, 0x00	; 0

fe_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	bf 90       	pop	r11
    1ae4:	af 90       	pop	r10
    1ae6:	9f 90       	pop	r9
    1ae8:	8f 90       	pop	r8
    1aea:	7f 90       	pop	r7
    1aec:	6f 90       	pop	r6
    1aee:	5f 90       	pop	r5
    1af0:	4f 90       	pop	r4
    1af2:	08 95       	ret

00001af4 <__udivmodsi4>:
    1af4:	a1 e2       	ldi	r26, 0x21	; 33
    1af6:	1a 2e       	mov	r1, r26
    1af8:	aa 1b       	sub	r26, r26
    1afa:	bb 1b       	sub	r27, r27
    1afc:	fd 01       	movw	r30, r26
    1afe:	0d c0       	rjmp	.+26     	; 0x1b1a <__udivmodsi4_ep>

00001b00 <__udivmodsi4_loop>:
    1b00:	aa 1f       	adc	r26, r26
    1b02:	bb 1f       	adc	r27, r27
    1b04:	ee 1f       	adc	r30, r30
    1b06:	ff 1f       	adc	r31, r31
    1b08:	a2 17       	cp	r26, r18
    1b0a:	b3 07       	cpc	r27, r19
    1b0c:	e4 07       	cpc	r30, r20
    1b0e:	f5 07       	cpc	r31, r21
    1b10:	20 f0       	brcs	.+8      	; 0x1b1a <__udivmodsi4_ep>
    1b12:	a2 1b       	sub	r26, r18
    1b14:	b3 0b       	sbc	r27, r19
    1b16:	e4 0b       	sbc	r30, r20
    1b18:	f5 0b       	sbc	r31, r21

00001b1a <__udivmodsi4_ep>:
    1b1a:	66 1f       	adc	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	88 1f       	adc	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	1a 94       	dec	r1
    1b24:	69 f7       	brne	.-38     	; 0x1b00 <__udivmodsi4_loop>
    1b26:	60 95       	com	r22
    1b28:	70 95       	com	r23
    1b2a:	80 95       	com	r24
    1b2c:	90 95       	com	r25
    1b2e:	9b 01       	movw	r18, r22
    1b30:	ac 01       	movw	r20, r24
    1b32:	bd 01       	movw	r22, r26
    1b34:	cf 01       	movw	r24, r30
    1b36:	08 95       	ret

00001b38 <__muluhisi3>:
    1b38:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__umulhisi3>
    1b3c:	a5 9f       	mul	r26, r21
    1b3e:	90 0d       	add	r25, r0
    1b40:	b4 9f       	mul	r27, r20
    1b42:	90 0d       	add	r25, r0
    1b44:	a4 9f       	mul	r26, r20
    1b46:	80 0d       	add	r24, r0
    1b48:	91 1d       	adc	r25, r1
    1b4a:	11 24       	eor	r1, r1
    1b4c:	08 95       	ret

00001b4e <__umulhisi3>:
    1b4e:	a2 9f       	mul	r26, r18
    1b50:	b0 01       	movw	r22, r0
    1b52:	b3 9f       	mul	r27, r19
    1b54:	c0 01       	movw	r24, r0
    1b56:	a3 9f       	mul	r26, r19
    1b58:	70 0d       	add	r23, r0
    1b5a:	81 1d       	adc	r24, r1
    1b5c:	11 24       	eor	r1, r1
    1b5e:	91 1d       	adc	r25, r1
    1b60:	b2 9f       	mul	r27, r18
    1b62:	70 0d       	add	r23, r0
    1b64:	81 1d       	adc	r24, r1
    1b66:	11 24       	eor	r1, r1
    1b68:	91 1d       	adc	r25, r1
    1b6a:	08 95       	ret

00001b6c <_exit>:
    1b6c:	f8 94       	cli

00001b6e <__stop_program>:
    1b6e:	ff cf       	rjmp	.-2      	; 0x1b6e <__stop_program>
