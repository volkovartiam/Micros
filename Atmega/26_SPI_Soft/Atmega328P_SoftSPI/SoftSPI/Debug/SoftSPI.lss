
SoftSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b48  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fe  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000348  00000000  00000000  00001fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  78:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_write>:

#define SPI_time 1


void SPI_write(char byte) {
	for (char i=0; i<8; i++) {		// цикл на 8 бит
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	13 c0       	rjmp	.+38     	; 0xaa <SPI_write+0x2a>
		_delay_us(SPI_time/2);		// формируем половину паузы
		if (byte & (1<<7) ) {		// проверяется старший байт
  84:	88 23       	and	r24, r24
  86:	24 f4       	brge	.+8      	; 0x90 <SPI_write+0x10>
			HIGH(MOSI);
  88:	95 b1       	in	r25, 0x05	; 5
  8a:	94 60       	ori	r25, 0x04	; 4
  8c:	95 b9       	out	0x05, r25	; 5
  8e:	02 c0       	rjmp	.+4      	; 0x94 <SPI_write+0x14>
		} 
		else {
			LOW(MOSI);
  90:	95 b1       	in	r25, 0x05	; 5
  92:	15 b8       	out	0x05, r1	; 5
		}	
		byte<<=1;                   // двигаем байт
  94:	88 0f       	add	r24, r24
		_delay_us(SPI_time/2);		// завершаем паузу
		HIGH(SCK);
  96:	95 b1       	in	r25, 0x05	; 5
  98:	92 60       	ori	r25, 0x02	; 2
  9a:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	95 e0       	ldi	r25, 0x05	; 5
  9e:	9a 95       	dec	r25
  a0:	f1 f7       	brne	.-4      	; 0x9e <SPI_write+0x1e>
  a2:	00 00       	nop
		_delay_us(SPI_time);		// формируем импульс
		LOW(SCK);
  a4:	95 b1       	in	r25, 0x05	; 5
  a6:	15 b8       	out	0x05, r1	; 5

#define SPI_time 1


void SPI_write(char byte) {
	for (char i=0; i<8; i++) {		// цикл на 8 бит
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	28 30       	cpi	r18, 0x08	; 8
  ac:	58 f3       	brcs	.-42     	; 0x84 <SPI_write+0x4>
		_delay_us(SPI_time/2);		// завершаем паузу
		HIGH(SCK);
		_delay_us(SPI_time);		// формируем импульс
		LOW(SCK);
	}
}
  ae:	08 95       	ret

000000b0 <SPI_read>:


unsigned char SPI_read() {
	char byte=0;					// переменные для счетчика и байта
	for (char i=0; i<8; i++) {		
  b0:	90 e0       	ldi	r25, 0x00	; 0
	}
}


unsigned char SPI_read() {
	char byte=0;					// переменные для счетчика и байта
  b2:	80 e0       	ldi	r24, 0x00	; 0
	for (char i=0; i<8; i++) {		
  b4:	0f c0       	rjmp	.+30     	; 0xd4 <SPI_read+0x24>
  b6:	25 e0       	ldi	r18, 0x05	; 5
  b8:	2a 95       	dec	r18
  ba:	f1 f7       	brne	.-4      	; 0xb8 <SPI_read+0x8>
  bc:	00 00       	nop
		_delay_us(SPI_time);		// формируем паузу
		HIGH(SCK);
  be:	25 b1       	in	r18, 0x05	; 5
  c0:	22 60       	ori	r18, 0x02	; 2
  c2:	25 b9       	out	0x05, r18	; 5
		_delay_us(SPI_time/2);		// половина импульса
		if (SPI_PIN & MISO){
  c4:	1b 99       	sbic	0x03, 3	; 3
			byte++;					// читаем бит и записываем его
  c6:	8f 5f       	subi	r24, 0xFF	; 255
		}
		if (i!=7) {
  c8:	97 30       	cpi	r25, 0x07	; 7
  ca:	09 f0       	breq	.+2      	; 0xce <SPI_read+0x1e>
			byte<<=1;				// двигаем байт
  cc:	88 0f       	add	r24, r24
		}
		_delay_us(SPI_time/2);		// завершаем импульс
		LOW(SCK);
  ce:	25 b1       	in	r18, 0x05	; 5
  d0:	15 b8       	out	0x05, r1	; 5
}


unsigned char SPI_read() {
	char byte=0;					// переменные для счетчика и байта
	for (char i=0; i<8; i++) {		
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	78 f3       	brcs	.-34     	; 0xb6 <SPI_read+0x6>
		}
		_delay_us(SPI_time/2);		// завершаем импульс
		LOW(SCK);
	}
	return byte;					// вернули, что прочли
}
  d8:	08 95       	ret

000000da <SPI_start>:
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <SPI_start+0x2>
  e0:	00 00       	nop


void SPI_start() {
	_delay_us(SPI_time);
	LOW(SCK);
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	15 b8       	out	0x05, r1	; 5
	LOW(CS);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	15 b8       	out	0x05, r1	; 5
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <SPI_start+0x12>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <SPI_stop>:
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <SPI_stop+0x2>
  fa:	00 00       	nop
}


void SPI_stop() {
	_delay_us(SPI_time);
	HIGH(CS);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	85 b9       	out	0x05, r24	; 5
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <SPI_stop+0x10>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <main>:


int main(void)
{
	/**/
	DDRB |= (1<<PORTB5);		// для тестовой лампочки
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB5);
 112:	85 b1       	in	r24, 0x05	; 5
 114:	80 62       	ori	r24, 0x20	; 32
 116:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	81 ee       	ldi	r24, 0xE1	; 225
 11c:	94 e0       	ldi	r25, 0x04	; 4
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x12>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x1c>
 128:	00 00       	nop
	_delay_ms(100);				// ждем устаканивания питания
	PORTB &= !(1 << PORTB5);	
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	15 b8       	out	0x05, r1	; 5
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	81 ee       	ldi	r24, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x28>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x32>
 13e:	00 00       	nop
	_delay_ms(100);	
	
	
	SPI_PIN |= (1<<MISO_pin);
 140:	83 b1       	in	r24, 0x03	; 3
 142:	88 60       	ori	r24, 0x08	; 8
 144:	83 b9       	out	0x03, r24	; 3
	SPI_DDR &= ~(1<<MISO_pin);
 146:	84 b1       	in	r24, 0x04	; 4
 148:	87 7f       	andi	r24, 0xF7	; 247
 14a:	84 b9       	out	0x04, r24	; 4
	SPI_DDR |= CS|MOSI|SCK;
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	87 60       	ori	r24, 0x07	; 7
 150:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= CS|MOSI|SCK;
 152:	85 b1       	in	r24, 0x05	; 5
 154:	87 60       	ori	r24, 0x07	; 7
 156:	85 b9       	out	0x05, r24	; 5
		
	USART_Init(BAUD_9600);
 158:	87 e6       	ldi	r24, 0x67	; 103
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USART_Init>

		
	while(1) {
		 
		 for(int i = 0; i < 255; i++){
 160:	c0 e0       	ldi	r28, 0x00	; 0
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	11 c0       	rjmp	.+34     	; 0x188 <main+0x7c>
			SPI_start();		
 166:	0e 94 6d 00 	call	0xda	; 0xda <SPI_start>
			SPI_write(i);
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 40 00 	call	0x80	; 0x80 <SPI_write>
			SPI_stop();
 170:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_stop>
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	81 ee       	ldi	r24, 0xE1	; 225
 178:	94 e0       	ldi	r25, 0x04	; 4
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x6e>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x78>
 184:	00 00       	nop
	USART_Init(BAUD_9600);

		
	while(1) {
		 
		 for(int i = 0; i < 255; i++){
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	cf 3f       	cpi	r28, 0xFF	; 255
 18a:	d1 05       	cpc	r29, r1
 18c:	64 f3       	brlt	.-40     	; 0x166 <main+0x5a>
			SPI_write(i);
			SPI_stop();
			_delay_ms(100);
		 }

		 char x = SPI_read();
 18e:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_read>
		 USART_Transmit(x);
 192:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <USART_Transmit>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	81 ee       	ldi	r24, 0xE1	; 225
 19a:	94 e0       	ldi	r25, 0x04	; 4
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x90>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x9a>
 1a6:	00 00       	nop
 1a8:	db cf       	rjmp	.-74     	; 0x160 <main+0x54>

000001aa <USART_Init>:
#include "usart.h"

void USART_Init(unsigned int speed)
{
	//Регистр UBRR0 задает скорость передачи данных 
	UBRR0H = (unsigned char)(speed>>8);
 1aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)speed;
 1ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//TXEN0 - разрешение передачи данных
	//UCSZ02 - бит задающий количество передваемых бит в кадре (совместно с UCSZ00, UCSZ01)
	//RXB80 - для получения 9-го бита
	//TXB80 - для передачи 9-го бита

	UCSR0B |=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Включаем прием и передачу по USART
 1b2:	e1 ec       	ldi	r30, 0xC1	; 193
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 69       	ori	r24, 0x98	; 152
 1ba:	80 83       	st	Z, r24
	//USBS0 - задает количество стоп битов один/два
	//UCSZ00  
	//UCSZ01 - бит задающий количество передваемых бит в кадре
	//UCPOL0 - бит полярности падающий/восходящий
	
	UCSR0C |= (1<<UPM01)|(1<<UPM00)|(1<<UCSZ01);
 1bc:	e2 ec       	ldi	r30, 0xC2	; 194
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	84 63       	ori	r24, 0x34	; 52
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <USART_Transmit>:
	
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSR0A & (1<<UDRE0)) ); //Ожидание опустошения буфера приема
 1c8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1cc:	95 ff       	sbrs	r25, 5
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <USART_Transmit>
	UDR0 = data; //Начало передачи данных
 1d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d4:	08 95       	ret

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
