
SoftSPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095f  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070c  00000000  00000000  00000baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000389  00000000  00000000  000012bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000245  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_wr>:
#define SPI_time 1

// пишем байт в шину
void SPI_wr(char byte) {
	char i;							// счетчик для цикла
	for (i=0; i<8; i++) {			// цикл на 8 бит
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	13 c0       	rjmp	.+38     	; 0xaa <SPI_wr+0x2a>
		_delay_us(SPI_time/2);		// формируем половину паузы
		if (byte & 0x80) {
  84:	88 23       	and	r24, r24
  86:	24 f4       	brge	.+8      	; 0x90 <SPI_wr+0x10>
			//spi_di=1;				// выставляем один бит
			SPI_PORT |= spi_di;
  88:	9b b1       	in	r25, 0x0b	; 11
  8a:	90 64       	ori	r25, 0x40	; 64
  8c:	9b b9       	out	0x0b, r25	; 11
  8e:	02 c0       	rjmp	.+4      	; 0x94 <SPI_wr+0x14>
		} 
		else {
			//spi_di=0;
			SPI_PORT &= !spi_di;
  90:	9b b1       	in	r25, 0x0b	; 11
  92:	1b b8       	out	0x0b, r1	; 11
		}	
		byte<<=1;                   // двигаем байт
  94:	88 0f       	add	r24, r24
		_delay_us(SPI_time/2);		// завершаем паузу
		//spi_clk = 1;				// тактовый фронт
		SPI_PORT |= spi_clk;
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	90 68       	ori	r25, 0x80	; 128
  9a:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	95 e0       	ldi	r25, 0x05	; 5
  9e:	9a 95       	dec	r25
  a0:	f1 f7       	brne	.-4      	; 0x9e <SPI_wr+0x1e>
  a2:	00 00       	nop
		_delay_us(SPI_time);		// формируем импульс
		//spi_clk = 0;				// тактовый спад
		SPI_PORT &= !spi_clk;
  a4:	9b b1       	in	r25, 0x0b	; 11
  a6:	1b b8       	out	0x0b, r1	; 11
#define SPI_time 1

// пишем байт в шину
void SPI_wr(char byte) {
	char i;							// счетчик для цикла
	for (i=0; i<8; i++) {			// цикл на 8 бит
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	28 30       	cpi	r18, 0x08	; 8
  ac:	58 f3       	brcs	.-42     	; 0x84 <SPI_wr+0x4>
		SPI_PORT |= spi_clk;
		_delay_us(SPI_time);		// формируем импульс
		//spi_clk = 0;				// тактовый спад
		SPI_PORT &= !spi_clk;
	}
}
  ae:	08 95       	ret

000000b0 <spi_go>:
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <spi_go+0x2>
  b6:	00 00       	nop
// начинаем общение
void spi_go() {
	_delay_us(SPI_time);
	//spi_clk=0;
	//spi_cs =0;
	SPI_PORT &= !spi_clk;
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	1b b8       	out	0x0b, r1	; 11
	SPI_PORT &= !spi_cs;
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	1b b8       	out	0x0b, r1	; 11
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	8a 95       	dec	r24
  c4:	f1 f7       	brne	.-4      	; 0xc2 <spi_go+0x12>
  c6:	00 00       	nop
  c8:	08 95       	ret

000000ca <spi_end>:
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <spi_end+0x2>
  d0:	00 00       	nop
*/
// заканчиваем общение
void spi_end() {
	_delay_us(SPI_time);
	//spi_cs = 1;
	SPI_PORT |= spi_cs;
  d2:	8b b1       	in	r24, 0x0b	; 11
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <spi_end+0x10>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <main>:


int main(void)
{
	/**/
	DDRB |= (1<<PORTB5);		// для тестовой лампочки
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB5);
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	81 ee       	ldi	r24, 0xE1	; 225
  f2:	94 e0       	ldi	r25, 0x04	; 4
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x12>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x1c>
  fe:	00 00       	nop
	_delay_ms(100);				// ждем устаканивания питания
	PORTB &= !(1 << PORTB5);	
 100:	85 b1       	in	r24, 0x05	; 5
 102:	15 b8       	out	0x05, r1	; 5

	
	SPI_PORT_DDR |= DDR_spi_cs|DDR_spi_do|DDR_spi_di|DDR_spi_clk;
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	80 6f       	ori	r24, 0xF0	; 240
 108:	8a b9       	out	0x0a, r24	; 10
	SPI_PORT |= spi_cs|spi_do|spi_di|spi_clk;
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	80 6f       	ori	r24, 0xF0	; 240
 10e:	8b b9       	out	0x0b, r24	; 11
		 char t=0;
		 _delay_us(100); // ждем немного
		 PORTB.5=0; // гасим тестовую лампочку
		 // читаем ID микросхемы памяти
		 */
		 spi_go();		//SPI_wr(0x90); SPI_wr(0x00); SPI_wr(0x00); SPI_wr(0x00);
 110:	0e 94 58 00 	call	0xb0	; 0xb0 <spi_go>
		 SPI_wr(0x01);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 40 00 	call	0x80	; 0x80 <SPI_wr>
		 spi_end();
 11a:	0e 94 65 00 	call	0xca	; 0xca <spi_end>
		 if (SPI_rd()==0x13) t++; // сразу сравниваем с нужным
		 spi_end();
		 if (t==2) PORTB.5=1;  // включаем тестовую лампочку
		 */
		 
		 for(int i = 0; i < 255; i++){
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	d0 e0       	ldi	r29, 0x00	; 0
 122:	11 c0       	rjmp	.+34     	; 0x146 <main+0x64>
			spi_go();		//SPI_wr(0x90); SPI_wr(0x00); SPI_wr(0x00); SPI_wr(0x00);
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <spi_go>
			SPI_wr(i);
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 40 00 	call	0x80	; 0x80 <SPI_wr>
			spi_end();
 12e:	0e 94 65 00 	call	0xca	; 0xca <spi_end>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	81 ee       	ldi	r24, 0xE1	; 225
 136:	94 e0       	ldi	r25, 0x04	; 4
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x56>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x60>
 142:	00 00       	nop
		 if (SPI_rd()==0x13) t++; // сразу сравниваем с нужным
		 spi_end();
		 if (t==2) PORTB.5=1;  // включаем тестовую лампочку
		 */
		 
		 for(int i = 0; i < 255; i++){
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	cf 3f       	cpi	r28, 0xFF	; 255
 148:	d1 05       	cpc	r29, r1
 14a:	64 f3       	brlt	.-40     	; 0x124 <main+0x42>
 14c:	e1 cf       	rjmp	.-62     	; 0x110 <main+0x2e>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
