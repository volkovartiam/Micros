
StepperMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071c  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000486  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c9  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e2  00000000  00000000  00001bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	58 00       	.word	0x0058	; ????
  6a:	65 00       	.word	0x0065	; ????
  6c:	72 00       	.word	0x0072	; ????
  6e:	7f 00       	.word	0x007f	; ????
  70:	8c 00       	.word	0x008c	; ????
  72:	99 00       	.word	0x0099	; ????
  74:	a6 00       	.word	0x00a6	; ????
  76:	b3 00       	.word	0x00b3	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61
  84:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <SM_init>:
	for(int i=0; i<=3; i++){
		PORTD = (1<<i);
		SM_Delay;
		PORTD = ~PORTD;
	}
}
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8f 60       	ori	r24, 0x0F	; 15
  94:	8a b9       	out	0x0a, r24	; 10
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8b b9       	out	0x0b, r24	; 11
  9c:	08 95       	ret

0000009e <setSM>:

void setSM(int exp){
	switch(exp){
  9e:	88 30       	cpi	r24, 0x08	; 8
  a0:	91 05       	cpc	r25, r1
  a2:	08 f0       	brcs	.+2      	; 0xa6 <setSM+0x8>
  a4:	6c c0       	rjmp	.+216    	; 0x17e <setSM+0xe0>
  a6:	fc 01       	movw	r30, r24
  a8:	ec 5c       	subi	r30, 0xCC	; 204
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	0c 94 00 01 	jmp	0x200	; 0x200 <__tablejump2__>
		case 0:
			setIN0;	
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8b b9       	out	0x0b, r24	; 11
			resetIN1; 
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	8b b9       	out	0x0b, r24	; 11
			resetIN2;	
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8b 7f       	andi	r24, 0xFB	; 251
  c0:	8b b9       	out	0x0b, r24	; 11
			resetIN3;
  c2:	8b b1       	in	r24, 0x0b	; 11
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	8b b9       	out	0x0b, r24	; 11
			break;	
  c8:	5a c0       	rjmp	.+180    	; 0x17e <setSM+0xe0>
		case 1:
			setIN0;	
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	8b b9       	out	0x0b, r24	; 11
			setIN1; 
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	8b b9       	out	0x0b, r24	; 11
			resetIN2;	
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	8b b9       	out	0x0b, r24	; 11
			resetIN3;
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	87 7f       	andi	r24, 0xF7	; 247
  e0:	8b b9       	out	0x0b, r24	; 11
			break;
  e2:	4d c0       	rjmp	.+154    	; 0x17e <setSM+0xe0>
		case 2:
			resetIN0;
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	8b b9       	out	0x0b, r24	; 11
			setIN1;
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	8b b9       	out	0x0b, r24	; 11
			resetIN2;
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	8b b9       	out	0x0b, r24	; 11
			resetIN3;
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8b b9       	out	0x0b, r24	; 11
			break;
  fc:	40 c0       	rjmp	.+128    	; 0x17e <setSM+0xe0>
		case 3:
			resetIN0;
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	8b b9       	out	0x0b, r24	; 11
			setIN1;
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8b b9       	out	0x0b, r24	; 11
			setIN2;
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	8b b9       	out	0x0b, r24	; 11
			resetIN3;
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	87 7f       	andi	r24, 0xF7	; 247
 114:	8b b9       	out	0x0b, r24	; 11
			break;
 116:	33 c0       	rjmp	.+102    	; 0x17e <setSM+0xe0>
		case 4:
			resetIN0;
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	8b b9       	out	0x0b, r24	; 11
			resetIN1;
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	8b b9       	out	0x0b, r24	; 11
			setIN2;
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	84 60       	ori	r24, 0x04	; 4
 128:	8b b9       	out	0x0b, r24	; 11
			resetIN3;
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	87 7f       	andi	r24, 0xF7	; 247
 12e:	8b b9       	out	0x0b, r24	; 11
			break;
 130:	26 c0       	rjmp	.+76     	; 0x17e <setSM+0xe0>
		case 5:
			resetIN0;
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	8b b9       	out	0x0b, r24	; 11
			resetIN1;
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8d 7f       	andi	r24, 0xFD	; 253
 13c:	8b b9       	out	0x0b, r24	; 11
			setIN2;
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	84 60       	ori	r24, 0x04	; 4
 142:	8b b9       	out	0x0b, r24	; 11
			setIN3;
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	88 60       	ori	r24, 0x08	; 8
 148:	8b b9       	out	0x0b, r24	; 11
			break;
 14a:	19 c0       	rjmp	.+50     	; 0x17e <setSM+0xe0>
		case 6:
			resetIN0;
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	8b b9       	out	0x0b, r24	; 11
			resetIN1;
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	8d 7f       	andi	r24, 0xFD	; 253
 156:	8b b9       	out	0x0b, r24	; 11
			resetIN2;
 158:	8b b1       	in	r24, 0x0b	; 11
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	8b b9       	out	0x0b, r24	; 11
			setIN3;
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	88 60       	ori	r24, 0x08	; 8
 162:	8b b9       	out	0x0b, r24	; 11
			break;
 164:	0c c0       	rjmp	.+24     	; 0x17e <setSM+0xe0>
		case 7:
			setIN0;
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	8b b9       	out	0x0b, r24	; 11
			resetIN1;
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	8d 7f       	andi	r24, 0xFD	; 253
 170:	8b b9       	out	0x0b, r24	; 11
			resetIN2;
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	8b b9       	out	0x0b, r24	; 11
			setIN3;
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f e1       	ldi	r24, 0x1F	; 31
 180:	9e e4       	ldi	r25, 0x4E	; 78
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <setSM+0xe4>
 186:	00 c0       	rjmp	.+0      	; 0x188 <setSM+0xea>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <SM_forvard>:
	SM_Delay;
}


void SM_forvard()
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
	for (int i=0; i <=7; i++)
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	04 c0       	rjmp	.+8      	; 0x19e <SM_forvard+0x12>
	{
		setSM(i);
 196:	ce 01       	movw	r24, r28
 198:	0e 94 4f 00 	call	0x9e	; 0x9e <setSM>
}


void SM_forvard()
{
	for (int i=0; i <=7; i++)
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	c8 30       	cpi	r28, 0x08	; 8
 1a0:	d1 05       	cpc	r29, r1
 1a2:	cc f3       	brlt	.-14     	; 0x196 <SM_forvard+0xa>
	{
		setSM(i);
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <SM_backward>:


void SM_backward()
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
	for (int i=7; i >=0; i--)
 1ae:	c7 e0       	ldi	r28, 0x07	; 7
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <SM_backward+0x12>
	{
		setSM(i);
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 4f 00 	call	0x9e	; 0x9e <setSM>
}


void SM_backward()
{
	for (int i=7; i >=0; i--)
 1ba:	21 97       	sbiw	r28, 0x01	; 1
 1bc:	dd 23       	and	r29, r29
 1be:	d4 f7       	brge	.-12     	; 0x1b4 <SM_backward+0xa>
	{
		setSM(i);
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <main>:

int main(void)
{
	SM_init();
 1c6:	0e 94 48 00 	call	0x90	; 0x90 <SM_init>
    while (1) 
    {
		//runLEDs();

		for (int i=0; i <=512; i++)
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <main+0x10>
		{
			SM_forvard();
 1d0:	0e 94 c6 00 	call	0x18c	; 0x18c <SM_forvard>
	SM_init();
    while (1) 
    {
		//runLEDs();

		for (int i=0; i <=512; i++)
 1d4:	21 96       	adiw	r28, 0x01	; 1
 1d6:	c1 30       	cpi	r28, 0x01	; 1
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	d8 07       	cpc	r29, r24
 1dc:	cc f3       	brlt	.-14     	; 0x1d0 <main+0xa>
 1de:	8f e1       	ldi	r24, 0x1F	; 31
 1e0:	9e e4       	ldi	r25, 0x4E	; 78
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x1c>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x22>
 1e8:	00 00       	nop
		{
			SM_forvard();
		}

		SM_Delay;
		for (int i=0; i <=512; i++)
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <main+0x30>
		{
			SM_backward();
 1f0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <SM_backward>
		{
			SM_forvard();
		}

		SM_Delay;
		for (int i=0; i <=512; i++)
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	c1 30       	cpi	r28, 0x01	; 1
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	d9 07       	cpc	r29, r25
 1fc:	cc f3       	brlt	.-14     	; 0x1f0 <main+0x2a>
 1fe:	e5 cf       	rjmp	.-54     	; 0x1ca <main+0x4>

00000200 <__tablejump2__>:
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	05 90       	lpm	r0, Z+
 206:	f4 91       	lpm	r31, Z
 208:	e0 2d       	mov	r30, r0
 20a:	09 94       	ijmp

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
