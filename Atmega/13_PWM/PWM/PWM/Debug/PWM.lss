
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000759  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  0000103b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004e  00000000  00000000  00001727  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001775  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  88:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timerInit>:
	OCR1AL=0x1F;			//Output Compare Register = 0 - в нашем случае это скважность шим (0 - это 0, а FF - 100 %)
	TIMSK1|=0x00;//
	*/
	
	
  DDRD |= (1 << PORTD6);  //OC0A (12)
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 64       	ori	r24, 0x40	; 64
  94:	8a b9       	out	0x0a, r24	; 10
  DDRD |= (1 << PORTD5);  //OC0B (11)
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	8a b9       	out	0x0a, r24	; 10

  TCCR0A = 0;
  9c:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0;
  9e:	15 bc       	out	0x25, r1	; 37
  TCNT0 = 0;
  a0:	16 bc       	out	0x26, r1	; 38
  
  //Не инверсный режим работы OC0A и OC0B
  TCCR0A |= (1 << COM0A1);
  a2:	84 b5       	in	r24, 0x24	; 36
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= (1 << COM0B1);
  a8:	84 b5       	in	r24, 0x24	; 36
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	84 bd       	out	0x24, r24	; 36

  //Режим 3: Fast PWM (Быстрый ШИМ), частота регулируется предделителем, скважность регулируется OCR0A и OCR0B
  TCCR0A |= (1 << WGM00) | (1 << WGM01);
  ae:	84 b5       	in	r24, 0x24	; 36
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	84 bd       	out	0x24, r24	; 36
  
  //Предделитель - 64 - 976 ГЦ
  TCCR0B |= (1 << CS02)|(1 << CS00);
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	85 60       	ori	r24, 0x05	; 5
  b8:	85 bd       	out	0x25, r24	; 37
  
  OCR0A = 200;
  ba:	88 ec       	ldi	r24, 0xC8	; 200
  bc:	87 bd       	out	0x27, r24	; 39
  OCR0B = 70;
  be:	86 e4       	ldi	r24, 0x46	; 70
  c0:	88 bd       	out	0x28, r24	; 40
  OCR0B = 250;
  c2:	8a ef       	ldi	r24, 0xFA	; 250
  c4:	88 bd       	out	0x28, r24	; 40
	
   OCR0A = 5;
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	87 bd       	out	0x27, r24	; 39
   OCR0B = 7;
  ca:	87 e0       	ldi	r24, 0x07	; 7
  cc:	88 bd       	out	0x28, r24	; 40
  ce:	08 95       	ret

000000d0 <__vector_11>:
			
}


ISR(TIMER1_COMPA_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
	if(i==2){
		i=-1;
	}
	i++;
	*/
}
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <main>:
	
	PORTD=0x00;
	DDRD=0x08;
	*/
	unsigned char pwm_state=0;
	timerInit();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <timerInit>
	sei();
  e8:	78 94       	sei
	PORTD = 0b00000000;
	
	PORTD=0x00;
	DDRD=0x08;
	*/
	unsigned char pwm_state=0;
  ea:	80 e0       	ldi	r24, 0x00	; 0
	sei();
	
    while (1) 
    {
		
		if (pwm_state==0)
  ec:	81 11       	cpse	r24, r1
  ee:	0a c0       	rjmp	.+20     	; 0x104 <main+0x20>
		{
			OCR0A++;
  f0:	97 b5       	in	r25, 0x27	; 39
  f2:	9f 5f       	subi	r25, 0xFF	; 255
  f4:	97 bd       	out	0x27, r25	; 39
			OCR0B++;
  f6:	98 b5       	in	r25, 0x28	; 40
  f8:	9f 5f       	subi	r25, 0xFF	; 255
  fa:	98 bd       	out	0x28, r25	; 40
			if (OCR0B>254)
  fc:	98 b5       	in	r25, 0x28	; 40
  fe:	9f 3f       	cpi	r25, 0xFF	; 255
 100:	09 f4       	brne	.+2      	; 0x104 <main+0x20>
			{
				pwm_state=1;
 102:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		if (pwm_state==1)
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	39 f4       	brne	.+14     	; 0x116 <main+0x32>
		{
			OCR0B--;
 108:	98 b5       	in	r25, 0x28	; 40
 10a:	91 50       	subi	r25, 0x01	; 1
 10c:	98 bd       	out	0x28, r25	; 40
			if (OCR0B<1)
 10e:	98 b5       	in	r25, 0x28	; 40
 110:	91 11       	cpse	r25, r1
 112:	01 c0       	rjmp	.+2      	; 0x116 <main+0x32>
			{
				pwm_state=0;
 114:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	ed ee       	ldi	r30, 0xED	; 237
 118:	f2 e0       	ldi	r31, 0x02	; 2
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x36>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x3c>
 120:	00 00       	nop
 122:	e4 cf       	rjmp	.-56     	; 0xec <main+0x8>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
