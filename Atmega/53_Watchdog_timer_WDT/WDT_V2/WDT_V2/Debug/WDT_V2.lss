
WDT_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075e  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000683  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cd  00000000  00000000  00001151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b1  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d3  00000000  00000000  00001989  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_11>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	7f 00       	.word	0x007f	; ????
  6a:	86 00       	.word	0x0086	; ????
  6c:	8d 00       	.word	0x008d	; ????
  6e:	94 00       	.word	0x0094	; ????
  70:	9b 00       	.word	0x009b	; ????
  72:	a2 00       	.word	0x00a2	; ????
  74:	a9 00       	.word	0x00a9	; ????
  76:	b0 00       	.word	0x00b0	; ????
  78:	b7 00       	.word	0x00b7	; ????
  7a:	be 00       	.word	0x00be	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 08 01 	call	0x210	; 0x210 <main>
  9c:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_1>:

unsigned char tim1_count=0;


ISR(INT0_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	TIMSK1 &= ~(1<<OCIE1A);
  b4:	ef e6       	ldi	r30, 0x6F	; 111
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	80 83       	st	Z, r24
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_11>:


ISR(TIMER1_COMPA_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	switch (tim1_count)
  e4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	8e 2f       	mov	r24, r30
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	91 05       	cpc	r25, r1
  f0:	08 f0       	brcs	.+2      	; 0xf4 <__vector_11+0x26>
  f2:	4a c0       	rjmp	.+148    	; 0x188 <__vector_11+0xba>
  f4:	fc 01       	movw	r30, r24
  f6:	ec 5c       	subi	r30, 0xCC	; 204
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	0c 94 1a 01 	jmp	0x234	; 0x234 <__tablejump2__>
	{
		case 0:
		LED10_OFF();
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	85 b9       	out	0x05, r24	; 5
		LED1_ON();
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	88 60       	ori	r24, 0x08	; 8
 108:	8b b9       	out	0x0b, r24	; 11
		break;
 10a:	3e c0       	rjmp	.+124    	; 0x188 <__vector_11+0xba>
		case 1:
		LED1_OFF();
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	8b b9       	out	0x0b, r24	; 11
		LED2_ON();
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	80 61       	ori	r24, 0x10	; 16
 116:	8b b9       	out	0x0b, r24	; 11
		break;
 118:	37 c0       	rjmp	.+110    	; 0x188 <__vector_11+0xba>
		case 2:
		//wdt_reset();
		LED2_OFF();
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	8b b9       	out	0x0b, r24	; 11
		LED3_ON();
 120:	8b b1       	in	r24, 0x0b	; 11
 122:	80 62       	ori	r24, 0x20	; 32
 124:	8b b9       	out	0x0b, r24	; 11
		break;
 126:	30 c0       	rjmp	.+96     	; 0x188 <__vector_11+0xba>
		case 3:;
		LED3_OFF();
 128:	8b b1       	in	r24, 0x0b	; 11
 12a:	8f 7d       	andi	r24, 0xDF	; 223
 12c:	8b b9       	out	0x0b, r24	; 11
		LED4_ON();
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	80 64       	ori	r24, 0x40	; 64
 132:	8b b9       	out	0x0b, r24	; 11
		break;
 134:	29 c0       	rjmp	.+82     	; 0x188 <__vector_11+0xba>
		case 4:
		LED4_OFF();
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	8b b9       	out	0x0b, r24	; 11
		LED5_ON();
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	8b b9       	out	0x0b, r24	; 11
		break;
 142:	22 c0       	rjmp	.+68     	; 0x188 <__vector_11+0xba>
		case 5:
		//wdt_reset();
		LED5_OFF();
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	8f 77       	andi	r24, 0x7F	; 127
 148:	8b b9       	out	0x0b, r24	; 11
		LED6_ON();
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	85 b9       	out	0x05, r24	; 5
		break;
 150:	1b c0       	rjmp	.+54     	; 0x188 <__vector_11+0xba>
		case 6:
		LED6_OFF();
 152:	85 b1       	in	r24, 0x05	; 5
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	85 b9       	out	0x05, r24	; 5
		LED7_ON();
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	85 b9       	out	0x05, r24	; 5
		break;
 15e:	14 c0       	rjmp	.+40     	; 0x188 <__vector_11+0xba>
		case 7:
		LED7_OFF();
 160:	85 b1       	in	r24, 0x05	; 5
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	85 b9       	out	0x05, r24	; 5
		LED8_ON();
 166:	85 b1       	in	r24, 0x05	; 5
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	85 b9       	out	0x05, r24	; 5
		break;
 16c:	0d c0       	rjmp	.+26     	; 0x188 <__vector_11+0xba>
		case 8:
		//wdt_reset();
		LED8_OFF();
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	8b 7f       	andi	r24, 0xFB	; 251
 172:	85 b9       	out	0x05, r24	; 5
		LED9_ON();
 174:	85 b1       	in	r24, 0x05	; 5
 176:	88 60       	ori	r24, 0x08	; 8
 178:	85 b9       	out	0x05, r24	; 5
		break;
 17a:	06 c0       	rjmp	.+12     	; 0x188 <__vector_11+0xba>
		case 9:
		LED9_OFF();
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	87 7f       	andi	r24, 0xF7	; 247
 180:	85 b9       	out	0x05, r24	; 5
		LED10_ON();
 182:	85 b1       	in	r24, 0x05	; 5
 184:	80 61       	ori	r24, 0x10	; 16
 186:	85 b9       	out	0x05, r24	; 5
		break;
	}
	
	tim1_count++;
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(tim1_count>9) {
 192:	8a 30       	cpi	r24, 0x0A	; 10
 194:	10 f0       	brcs	.+4      	; 0x19a <__vector_11+0xcc>
		tim1_count=0;
 196:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <init_ports>:


void init_ports()
{
	DDRD &=	~PORTD_INT0_PIN;
 1b0:	8a b1       	in	r24, 0x0a	; 10
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	8a b9       	out	0x0a, r24	; 10
	DDRD |=	PORTD_OUT_PINS;		
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	88 6f       	ori	r24, 0xF8	; 248
 1ba:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~PORTD_INT0_PIN;
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	8b 7f       	andi	r24, 0xFB	; 251
 1c0:	8b b9       	out	0x0b, r24	; 11
	PORTD |= PORTD_INT0_PIN;	
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= PORTB_OUT_PINS;
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	8f 61       	ori	r24, 0x1F	; 31
 1cc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~PORTB_OUT_PINS;
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	8e 7f       	andi	r24, 0xFE	; 254
 1d2:	85 b9       	out	0x05, r24	; 5
 1d4:	08 95       	ret

000001d6 <init_timer_1>:
}


void init_timer_1()
{
	TCCR1B |= (1<<WGM12);		//CTC (Clear Timer on Compare match)
 1d6:	e1 e8       	ldi	r30, 0x81	; 129
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);		//Output Compare A Match Interrupt Enable
 1e0:	af e6       	ldi	r26, 0x6F	; 111
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	8c 91       	ld	r24, X
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	8c 93       	st	X, r24
	OCR1AH = 0b01111010;		//compare value
 1ea:	8a e7       	ldi	r24, 0x7A	; 122
 1ec:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 0b00010010;
 1f0:	82 e1       	ldi	r24, 0x12	; 18
 1f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<CS12);		//div 256
 1f6:	80 81       	ld	r24, Z
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <init_ext_interrupt>:
}


void init_ext_interrupt()
{
	EICRA |= (1<<ISC01);		//falling eddge
 1fe:	e9 e6       	ldi	r30, 0x69	; 105
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	82 60       	ori	r24, 0x02	; 2
 206:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);			//EXT INT
 208:	8d b3       	in	r24, 0x1d	; 29
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	8d bb       	out	0x1d, r24	; 29
 20e:	08 95       	ret

00000210 <main>:
}

int main(void)
{
	init_ports();
 210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <init_ports>
	init_timer_1();
 214:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <init_timer_1>
	init_ext_interrupt();
 218:	0e 94 ff 00 	call	0x1fe	; 0x1fe <init_ext_interrupt>
	
	sei();
 21c:	78 94       	sei
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 21e:	98 e2       	ldi	r25, 0x28	; 40
 220:	88 e1       	ldi	r24, 0x18	; 24
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	a8 95       	wdr
 228:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 232:	ff cf       	rjmp	.-2      	; 0x232 <main+0x22>

00000234 <__tablejump2__>:
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	05 90       	lpm	r0, Z+
 23a:	f4 91       	lpm	r31, Z
 23c:	e0 2d       	mov	r30, r0
 23e:	09 94       	ijmp

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
