
WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000700  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000660  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a6  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000380  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d3  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_1>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_11>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	7f 00       	.word	0x007f	; ????
  6a:	86 00       	.word	0x0086	; ????
  6c:	8d 00       	.word	0x008d	; ????
  6e:	95 00       	.word	0x0095	; ????
  70:	9c 00       	.word	0x009c	; ????
  72:	a3 00       	.word	0x00a3	; ????
  74:	ab 00       	.word	0x00ab	; ????
  76:	b2 00       	.word	0x00b2	; ????
  78:	b9 00       	.word	0x00b9	; ????
  7a:	c1 00       	.word	0x00c1	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a1 30       	cpi	r26, 0x01	; 1
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <__vector_1>:
#define LED10_OFF() PORTB&=~(0b00010000);

unsigned char tim1_count=0;

ISR(INT0_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	TIMSK1 &= ~(1<<OCIE1A);
  b4:	ef e6       	ldi	r30, 0x6F	; 111
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	80 83       	st	Z, r24
}
  be:	ff 91       	pop	r31
  c0:	ef 91       	pop	r30
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	switch (tim1_count)
  e4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	8e 2f       	mov	r24, r30
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	91 05       	cpc	r25, r1
  f0:	08 f0       	brcs	.+2      	; 0xf4 <__vector_11+0x26>
  f2:	4d c0       	rjmp	.+154    	; 0x18e <__vector_11+0xc0>
  f4:	fc 01       	movw	r30, r24
  f6:	ec 5c       	subi	r30, 0xCC	; 204
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	0c 94 16 01 	jmp	0x22c	; 0x22c <__tablejump2__>
	{
		case 0:
		LED10_OFF();
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	85 b9       	out	0x05, r24	; 5
		LED1_ON();
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	88 60       	ori	r24, 0x08	; 8
 108:	8b b9       	out	0x0b, r24	; 11
		break;
 10a:	41 c0       	rjmp	.+130    	; 0x18e <__vector_11+0xc0>
		case 1:
		LED1_OFF();
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	87 7f       	andi	r24, 0xF7	; 247
 110:	8b b9       	out	0x0b, r24	; 11
		LED2_ON();
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	80 61       	ori	r24, 0x10	; 16
 116:	8b b9       	out	0x0b, r24	; 11
		break;
 118:	3a c0       	rjmp	.+116    	; 0x18e <__vector_11+0xc0>
		case 2:
		wdt_reset();
 11a:	a8 95       	wdr
		LED2_OFF();
 11c:	8b b1       	in	r24, 0x0b	; 11
 11e:	8f 7e       	andi	r24, 0xEF	; 239
 120:	8b b9       	out	0x0b, r24	; 11
		LED3_ON();
 122:	8b b1       	in	r24, 0x0b	; 11
 124:	80 62       	ori	r24, 0x20	; 32
 126:	8b b9       	out	0x0b, r24	; 11
		break;
 128:	32 c0       	rjmp	.+100    	; 0x18e <__vector_11+0xc0>
		case 3:;
		LED3_OFF();
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 7d       	andi	r24, 0xDF	; 223
 12e:	8b b9       	out	0x0b, r24	; 11
		LED4_ON();
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8b b9       	out	0x0b, r24	; 11
		break;
 136:	2b c0       	rjmp	.+86     	; 0x18e <__vector_11+0xc0>
		case 4:
		LED4_OFF();
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	8b b9       	out	0x0b, r24	; 11
		LED5_ON();
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	80 68       	ori	r24, 0x80	; 128
 142:	8b b9       	out	0x0b, r24	; 11
		break;
 144:	24 c0       	rjmp	.+72     	; 0x18e <__vector_11+0xc0>
		case 5:
		wdt_reset();
 146:	a8 95       	wdr
		LED5_OFF();
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 77       	andi	r24, 0x7F	; 127
 14c:	8b b9       	out	0x0b, r24	; 11
		LED6_ON();
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 b9       	out	0x05, r24	; 5
		break;
 154:	1c c0       	rjmp	.+56     	; 0x18e <__vector_11+0xc0>
		case 6:
		LED6_OFF();
 156:	85 b1       	in	r24, 0x05	; 5
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	85 b9       	out	0x05, r24	; 5
		LED7_ON();
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	85 b9       	out	0x05, r24	; 5
		break;
 162:	15 c0       	rjmp	.+42     	; 0x18e <__vector_11+0xc0>
		case 7:
		LED7_OFF();
 164:	85 b1       	in	r24, 0x05	; 5
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	85 b9       	out	0x05, r24	; 5
		LED8_ON();
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	85 b9       	out	0x05, r24	; 5
		break;
 170:	0e c0       	rjmp	.+28     	; 0x18e <__vector_11+0xc0>
		case 8:
		wdt_reset();
 172:	a8 95       	wdr
		LED8_OFF();
 174:	85 b1       	in	r24, 0x05	; 5
 176:	8b 7f       	andi	r24, 0xFB	; 251
 178:	85 b9       	out	0x05, r24	; 5
		LED9_ON();
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	88 60       	ori	r24, 0x08	; 8
 17e:	85 b9       	out	0x05, r24	; 5
		break;
 180:	06 c0       	rjmp	.+12     	; 0x18e <__vector_11+0xc0>
		case 9:
		LED9_OFF();
 182:	85 b1       	in	r24, 0x05	; 5
 184:	87 7f       	andi	r24, 0xF7	; 247
 186:	85 b9       	out	0x05, r24	; 5
		LED10_ON();
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	85 b9       	out	0x05, r24	; 5
		break;
	}
	tim1_count++;
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(tim1_count>9) tim1_count=0;
 198:	8a 30       	cpi	r24, 0x0A	; 10
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <__vector_11+0xd2>
 19c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:


int main(void)
{
	DDRD |= 0b11111000;
 1b6:	8a b1       	in	r24, 0x0a	; 10
 1b8:	88 6f       	ori	r24, 0xF8	; 248
 1ba:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(0b00000100);		//INT0
 1bc:	8a b1       	in	r24, 0x0a	; 10
 1be:	8b 7f       	andi	r24, 0xFB	; 251
 1c0:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(0b11111000);
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	87 70       	andi	r24, 0x07	; 7
 1c6:	8b b9       	out	0x0b, r24	; 11
	PORTD |= 0b00000100;		//PD2 PULL UP
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0b00011111;
 1ce:	84 b1       	in	r24, 0x04	; 4
 1d0:	8f 61       	ori	r24, 0x1F	; 31
 1d2:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(0b00011111);
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	80 7e       	andi	r24, 0xE0	; 224
 1d8:	85 b9       	out	0x05, r24	; 5
	
	TCCR1B |= (1<<WGM12);		//CTC (Clear Timer on Compare match)
 1da:	e1 e8       	ldi	r30, 0x81	; 129
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);		//Output Compare A Match Interrupt Enable
 1e4:	af e6       	ldi	r26, 0x6F	; 111
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	8c 91       	ld	r24, X
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	8c 93       	st	X, r24
	OCR1AH = 0b01111010;		//compare value
 1ee:	8a e7       	ldi	r24, 0x7A	; 122
 1f0:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 0b00010010;
 1f4:	82 e1       	ldi	r24, 0x12	; 18
 1f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<CS12);		//div 256
 1fa:	80 81       	ld	r24, Z
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	80 83       	st	Z, r24
	EICRA |= (1<<ISC01);		//falling eddge
 200:	e9 e6       	ldi	r30, 0x69	; 105
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	82 60       	ori	r24, 0x02	; 2
 208:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);			//EXT INT
 20a:	8d b3       	in	r24, 0x1d	; 29
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 210:	78 94       	sei
	tim1_count=0;
 212:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 216:	9f e0       	ldi	r25, 0x0F	; 15
 218:	88 e1       	ldi	r24, 0x18	; 24
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	a8 95       	wdr
 220:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 224:	0f be       	out	0x3f, r0	; 63
 226:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 22a:	ff cf       	rjmp	.-2      	; 0x22a <main+0x74>

0000022c <__tablejump2__>:
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	05 90       	lpm	r0, Z+
 232:	f4 91       	lpm	r31, Z
 234:	e0 2d       	mov	r30, r0
 236:	09 94       	ijmp

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
