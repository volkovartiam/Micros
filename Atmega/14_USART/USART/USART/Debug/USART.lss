
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000856  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072a  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000359  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000190a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "usart.h"
//-----------------------------------------------------------
int main(void)
{
	
	USART_Init (BAUD_9600);
  80:	87 e6       	ldi	r24, 0x67	; 103
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 5d 00 	call	0xba	; 0xba <USART_Init>

	while(1)
	{
		
		USART_Transmit('O');//Передаем при включении
  88:	8f e4       	ldi	r24, 0x4F	; 79
  8a:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
		USART_Transmit('k');//сообщение "Ok!", что свидетельствует
  8e:	8b e6       	ldi	r24, 0x6B	; 107
  90:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
		USART_Transmit('!');//о правильно работе программы
  94:	81 e2       	ldi	r24, 0x21	; 33
  96:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
		USART_Transmit(0x0d);//переход в начало строки
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
		USART_Transmit(0x0a);//переход на новую строку
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	89 e6       	ldi	r24, 0x69	; 105
  aa:	98 e1       	ldi	r25, 0x18	; 24
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
  b8:	e7 cf       	rjmp	.-50     	; 0x88 <main+0x8>

000000ba <USART_Init>:
#include "usart.h"

void USART_Init(unsigned int speed)
{
	//Регистр UBRR0 задает скорость передачи данных 
	UBRR0H = (unsigned char)(speed>>8);
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)speed;
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//TXEN0 - разрешение передачи данных
	//UCSZ02 - бит задающий количество передваемых бит в кадре (совместно с UCSZ00, UCSZ01)
	//RXB80 - для получения 9-го бита
	//TXB80 - для передачи 9-го бита

	UCSR0B |=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Включаем прием и передачу по USART
  c2:	e1 ec       	ldi	r30, 0xC1	; 193
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 69       	ori	r24, 0x98	; 152
  ca:	80 83       	st	Z, r24
	//USBS0 - задает количество стоп битов один/два
	//UCSZ00  
	//UCSZ01 - бит задающий количество передваемых бит в кадре
	//UCPOL0 - бит полярности падающий/восходящий
	
	UCSR0C |= (1<<UPM01)|(1<<UPM00)|(1<<UCSZ01);
  cc:	e2 ec       	ldi	r30, 0xC2	; 194
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	84 63       	ori	r24, 0x34	; 52
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <USART_Transmit>:
	
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSR0A & (1<<UDRE0)) ); //Ожидание опустошения буфера приема
  d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  dc:	95 ff       	sbrs	r25, 5
  de:	fc cf       	rjmp	.-8      	; 0xd8 <USART_Transmit>
	UDR0 = data; //Начало передачи данных
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
