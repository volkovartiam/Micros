
USART_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c5  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000751  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039e  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d9  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f2  00000000  00000000  00001a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
volatile uint8_t USART_ReceiveBuffer; 

//-----------------------------------------------------------
int main(void)
{
	DDRB |= 1 << 5; // Configuring PB5 / D13 as Output	
  90:	84 b1       	in	r24, 0x04	; 4
  92:	80 62       	ori	r24, 0x20	; 32
  94:	84 b9       	out	0x04, r24	; 4
	USART_Init(BAUD_9600);
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 96 00 	call	0x12c	; 0x12c <USART_Init>
	sei();
  9e:	78 94       	sei

	USART_Transmit('O');//Передаем при включении
  a0:	8f e4       	ldi	r24, 0x4F	; 79
  a2:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_Transmit>
	USART_Transmit('k');//сообщение "Ok!", что свидетельствует
  a6:	8b e6       	ldi	r24, 0x6B	; 107
  a8:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_Transmit>
	USART_Transmit('!');//о правильно работе программы
  ac:	81 e2       	ldi	r24, 0x21	; 33
  ae:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_Transmit>
	USART_Transmit(0x0d);//переход в начало строки
  b2:	8d e0       	ldi	r24, 0x0D	; 13
  b4:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_Transmit>
	USART_Transmit(0x0a);//переход на новую строку
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x34>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x3e>
  ce:	00 00       	nop
	_delay_ms(500);
	PORTB |= 1<<5;    // Writing HIGH to glow LED
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	2f ef       	ldi	r18, 0xFF	; 255
  d8:	89 e6       	ldi	r24, 0x69	; 105
  da:	98 e1       	ldi	r25, 0x18	; 24
  dc:	21 50       	subi	r18, 0x01	; 1
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x4c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x56>
  e6:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1<<5); // Writing LOW
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x5e>

000000f0 <__vector_18>:
	{
	}
}

ISR(USART_RX_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
	USART_Transmit(b);
	USART_Transmit('R');
	i++;
	*/

	PORTB |= 1<<5;    // Writing HIGH to glow LED
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	85 b9       	out	0x05, r24	; 5

		
	USART_ReceiveBuffer = UDR0;
 102:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (USART_ReceiveBuffer == '1')
 10a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10e:	81 33       	cpi	r24, 0x31	; 49
 110:	21 f4       	brne	.+8      	; 0x11a <__vector_18+0x2a>
	{
		PORTB |= 1<<5;    // Writing HIGH to glow LED
 112:	85 b1       	in	r24, 0x05	; 5
 114:	80 62       	ori	r24, 0x20	; 32
 116:	85 b9       	out	0x05, r24	; 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <__vector_18+0x30>
	}
	else
	{
		PORTB &= ~(1<<5); // Writing LOW
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	8f 7d       	andi	r24, 0xDF	; 223
 11e:	85 b9       	out	0x05, r24	; 5
	}
	
}
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <USART_Init>:
#include "usart.h"

void USART_Init(unsigned int speed)
{
	//Регистр UBRR0 задает скорость передачи данных 
	UBRR0H = (unsigned char)(speed>>8);
 12c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)speed;
 130:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//TXEN0 - разрешение передачи данных
	//UCSZ02 - бит задающий количество передваемых бит в кадре (совместно с UCSZ00, UCSZ01)
	//RXB80 - для получения 9-го бита
	//TXB80 - для передачи 9-го бита

	UCSR0B |=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Включаем прием и передачу по USART
 134:	e1 ec       	ldi	r30, 0xC1	; 193
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 69       	ori	r24, 0x98	; 152
 13c:	80 83       	st	Z, r24
	//UCSZ00  
	//UCSZ01 - бит задающий количество передваемых бит в кадре
	//UCPOL0 - бит полярности падающий/восходящий
	
//	UCSR0C |= (1<<UPM01)|(1<<UPM00)|(1<<UCSZ01)|(1<<UCSZ00);
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 13e:	e2 ec       	ldi	r30, 0xC2	; 194
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	86 60       	ori	r24, 0x06	; 6
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <USART_Transmit>:
	
}

void USART_Transmit( unsigned char data ) //Функция отправки данных
{
	while ( !(UCSR0A & (1<<UDRE0)) ); //Ожидание опустошения буфера приема
 14a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14e:	95 ff       	sbrs	r25, 5
 150:	fc cf       	rjmp	.-8      	; 0x14a <USART_Transmit>
	UDR0 = data; //Начало передачи данных
 152:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 156:	08 95       	ret

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
