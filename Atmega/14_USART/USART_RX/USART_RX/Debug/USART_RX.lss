
USART_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000789  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c2  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d4  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b6  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e6  00000000  00000000  0000178a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_Ini>:
volatile uint8_t USART_ReceiveBuffer; // Global Buffer

void USART_Ini()
{
	// Set Baud Rate
	UBRR0H = BAUD_PRESCALER >> 8;
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
  94:	87 e6       	ldi	r24, 0x67	; 103
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
  9a:	86 e0       	ldi	r24, 0x06	; 6
  9c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	// Enable Receiver and Transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//Enable Global Interrupts
	sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <main>:
}

int main()
{
	DDRB |= 1 << 5; // Configuring PB5 / D13 as Output
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	84 b9       	out	0x04, r24	; 4
	USART_Ini();
  b0:	0e 94 48 00 	call	0x90	; 0x90 <USART_Ini>
	UCSR0B |= RX_COMPLETE_INTERRUPT;
  b4:	e1 ec       	ldi	r30, 0xC1	; 193
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
	
	PORTB |= 1<<5;    // Writing HIGH to glow LED
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	89 e6       	ldi	r24, 0x69	; 105
  c8:	98 e1       	ldi	r25, 0x18	; 24
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x20>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x2a>
  d4:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1<<5); // Writing LOW
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	85 b9       	out	0x05, r24	; 5
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x32>

000000de <__vector_18>:
	}
	return 0;
}

ISR(USART_RX_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	USART_ReceiveBuffer = UDR0;
  ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTB |= 1<<5;    // Writing HIGH to glow LED
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	89 e6       	ldi	r24, 0x69	; 105
 100:	98 e1       	ldi	r25, 0x18	; 24
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <__vector_18+0x24>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <__vector_18+0x2e>
 10c:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1<<5); // Writing LOW
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	8f 7d       	andi	r24, 0xDF	; 223
 112:	85 b9       	out	0x05, r24	; 5
	
		
	if (USART_ReceiveBuffer == 'a')
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	81 36       	cpi	r24, 0x61	; 97
 11a:	21 f4       	brne	.+8      	; 0x124 <__vector_18+0x46>
	{
		PORTB |= 1<<5;    // Writing HIGH to glow LED
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	85 b9       	out	0x05, r24	; 5
 122:	03 c0       	rjmp	.+6      	; 0x12a <__vector_18+0x4c>
	}
	else
	{
		PORTB &= ~(1<<5); // Writing LOW
 124:	85 b1       	in	r24, 0x05	; 5
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	85 b9       	out	0x05, r24	; 5
	}

}
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
