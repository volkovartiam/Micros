
DS18B20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e4a  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000974  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b2  00000000  00000000  00001b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00002238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047e  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000486  00000000  00000000  000027d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  88:	0c 94 2b 01 	jmp	0x256	; 0x256 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <dt_testdevice>:
#include "DS18B20.h"


char dt_testdevice(void)	//функци€ определени€ датчика на шине
{
	char stektemp=SREG;// сохраним значение стека
  90:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
  92:	f8 94       	cli
	char dt;
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
  94:	84 b1       	in	r24, 0x04	; 4
  96:	81 60       	ori	r24, 0x01	; 1
  98:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	e3 e9       	ldi	r30, 0x93	; 147
  9c:	f7 e0       	ldi	r31, 0x07	; 7
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <dt_testdevice+0xe>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <dt_testdevice+0x14>
  a4:	00 00       	nop
	_delay_us(485); //задержка как минимум на 480 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	f0 ea       	ldi	r31, 0xA0	; 160
  ae:	fa 95       	dec	r31
  b0:	f1 f7       	brne	.-4      	; 0xae <dt_testdevice+0x1e>
	_delay_us(30); //задержка как максимум на 60 микросекунд
	if ((PINTEMP & (1<<BITTEMP))==1)//провер€ем, ответит ли устройство
  b2:	18 9b       	sbis	0x03, 0	; 3
  b4:	02 c0       	rjmp	.+4      	; 0xba <dt_testdevice+0x2a>
	{
		dt=1;//устройство есть
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <dt_testdevice+0x2c>
	}
	else dt=0;//устройства нет
  ba:	80 e0       	ldi	r24, 0x00	; 0
	SREG = stektemp;// вернем значение стека
  bc:	9f bf       	out	0x3f, r25	; 63
  be:	ef e8       	ldi	r30, 0x8F	; 143
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <dt_testdevice+0x32>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <dt_testdevice+0x38>
  c8:	00 00       	nop
	_delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
	return dt; //вернем результат
}
  ca:	08 95       	ret

000000cc <dt_sendbit>:


//функци€ записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
  cc:	2f b7       	in	r18, 0x3f	; 63
	cli(); //запрещаем прерывание
  ce:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
  d0:	94 b1       	in	r25, 0x04	; 4
  d2:	91 60       	ori	r25, 0x01	; 1
  d4:	94 b9       	out	0x04, r25	; 4
  d6:	9a e0       	ldi	r25, 0x0A	; 10
  d8:	9a 95       	dec	r25
  da:	f1 f7       	brne	.-4      	; 0xd8 <dt_sendbit+0xc>
  dc:	00 c0       	rjmp	.+0      	; 0xde <dt_sendbit+0x12>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
  de:	88 23       	and	r24, r24
  e0:	19 f0       	breq	.+6      	; 0xe8 <dt_sendbit+0x1c>
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	84 b9       	out	0x04, r24	; 4
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <dt_sendbit+0x20>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <dt_sendbit+0x26>
  f2:	00 00       	nop
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	84 b9       	out	0x04, r24	; 4
	SREG = stektemp;// вернем значение стека
  fa:	2f bf       	out	0x3f, r18	; 63
  fc:	08 95       	ret

000000fe <dt_sendbyte>:
}


//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	d8 2f       	mov	r29, r24
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
 104:	c0 e0       	ldi	r28, 0x00	; 0
 106:	17 c0       	rjmp	.+46     	; 0x136 <dt_sendbyte+0x38>
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0c 2e       	mov	r0, r28
 10e:	02 c0       	rjmp	.+4      	; 0x114 <dt_sendbyte+0x16>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <dt_sendbyte+0x12>
 118:	2d 2f       	mov	r18, r29
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	28 23       	and	r18, r24
 11e:	39 23       	and	r19, r25
 120:	82 17       	cp	r24, r18
 122:	93 07       	cpc	r25, r19
 124:	21 f4       	brne	.+8      	; 0x12e <dt_sendbyte+0x30>
		dt_sendbit(1);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 66 00 	call	0xcc	; 0xcc <dt_sendbit>
 12c:	03 c0       	rjmp	.+6      	; 0x134 <dt_sendbyte+0x36>
		else //посылаем 0
		dt_sendbit(0);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 66 00 	call	0xcc	; 0xcc <dt_sendbit>

//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
 134:	cf 5f       	subi	r28, 0xFF	; 255
 136:	c8 30       	cpi	r28, 0x08	; 8
 138:	38 f3       	brcs	.-50     	; 0x108 <dt_sendbyte+0xa>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <dt_readbit>:


//функци€ чтени€ бита с устройства
char dt_readbit(void)
{
	char stektemp=SREG;// сохраним значение стека
 140:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
 142:	f8 94       	cli
	char bt; //переменна€ хранени€ бита
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
 144:	84 b1       	in	r24, 0x04	; 4
 146:	81 60       	ori	r24, 0x01	; 1
 148:	84 b9       	out	0x04, r24	; 4
 14a:	2a e0       	ldi	r18, 0x0A	; 10
 14c:	2a 95       	dec	r18
 14e:	f1 f7       	brne	.-4      	; 0x14c <dt_readbit+0xc>
 150:	00 c0       	rjmp	.+0      	; 0x152 <dt_readbit+0x12>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
 152:	84 b1       	in	r24, 0x04	; 4
 154:	8e 7f       	andi	r24, 0xFE	; 254
 156:	84 b9       	out	0x04, r24	; 4
 158:	85 e4       	ldi	r24, 0x45	; 69
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <dt_readbit+0x1a>
 15e:	00 00       	nop
	_delay_us(13);
	bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
 160:	83 b1       	in	r24, 0x03	; 3
 162:	81 70       	andi	r24, 0x01	; 1
 164:	20 ef       	ldi	r18, 0xF0	; 240
 166:	2a 95       	dec	r18
 168:	f1 f7       	brne	.-4      	; 0x166 <dt_readbit+0x26>
	_delay_us(45);
	SREG = stektemp;// вернем значение стека
 16a:	9f bf       	out	0x3f, r25	; 63
	return bt; //вернем результат
}
 16c:	08 95       	ret

0000016e <dt_readbyte>:


//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
	char c=0;
	char i;
	for(i=0;i<8;i++)
 172:	c0 e0       	ldi	r28, 0x00	; 0


//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
 174:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
 176:	0b c0       	rjmp	.+22     	; 0x18e <dt_readbyte+0x20>
	c|=dt_readbit()<<i; //читаем бит
 178:	0e 94 a0 00 	call	0x140	; 0x140 <dt_readbit>
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0c 2e       	mov	r0, r28
 180:	02 c0       	rjmp	.+4      	; 0x186 <dt_readbyte+0x18>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <dt_readbyte+0x14>
 18a:	d8 2b       	or	r29, r24
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
 18c:	cf 5f       	subi	r28, 0xFF	; 255
 18e:	c8 30       	cpi	r28, 0x08	; 8
 190:	98 f3       	brcs	.-26     	; 0x178 <dt_readbyte+0xa>
	c|=dt_readbit()<<i; //читаем бит
	return c;
}
 192:	8d 2f       	mov	r24, r29
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <dt_check>:


//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
 19a:	cf 93       	push	r28
	unsigned char bt;//переменна€ дл€ считывани€ байта
	unsigned int tt=0;
	if(dt_testdevice()==1) //если устройство нашлось
 19c:	0e 94 48 00 	call	0x90	; 0x90 <dt_testdevice>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	09 f5       	brne	.+66     	; 0x1e6 <dt_check+0x4c>
	{
		dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
 1a4:	8c ec       	ldi	r24, 0xCC	; 204
 1a6:	0e 94 7f 00 	call	0xfe	; 0xfe <dt_sendbyte>
		dt_sendbyte(T_CONVERT); //измер€ем температуру
 1aa:	84 e4       	ldi	r24, 0x44	; 68
 1ac:	0e 94 7f 00 	call	0xfe	; 0xfe <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	8e e9       	ldi	r24, 0x9E	; 158
 1b4:	94 e2       	ldi	r25, 0x24	; 36
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <dt_check+0x1c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <dt_check+0x26>
 1c0:	00 00       	nop
		_delay_ms(750); //в 12битном режиме преобразовани€ - 750 милисекунд
		dt_testdevice(); //снова используем  те же манипул€ции с шиной что и при проверке ее присутстви€
 1c2:	0e 94 48 00 	call	0x90	; 0x90 <dt_testdevice>
		dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
 1c6:	8c ec       	ldi	r24, 0xCC	; 204
 1c8:	0e 94 7f 00 	call	0xfe	; 0xfe <dt_sendbyte>
		dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
 1cc:	8e eb       	ldi	r24, 0xBE	; 190
 1ce:	0e 94 7f 00 	call	0xfe	; 0xfe <dt_sendbyte>
		bt = dt_readbyte(); //читаем младший бит
 1d2:	0e 94 b7 00 	call	0x16e	; 0x16e <dt_readbyte>
 1d6:	c8 2f       	mov	r28, r24
		tt = dt_readbyte(); //читаем старший бит MS
 1d8:	0e 94 b7 00 	call	0x16e	; 0x16e <dt_readbyte>
 1dc:	90 e0       	ldi	r25, 0x00	; 0
		tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
 1de:	98 2f       	mov	r25, r24
 1e0:	88 27       	eor	r24, r24
 1e2:	8c 2b       	or	r24, r28
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <dt_check+0x50>

//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
	unsigned char bt;//переменна€ дл€ считывани€ байта
	unsigned int tt=0;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
		bt = dt_readbyte(); //читаем младший бит
		tt = dt_readbyte(); //читаем старший бит MS
		tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
	}
	return tt;
}
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <port_ini>:

unsigned char sec,min,hour,day,date,month,year;

void port_ini(void)
{
	PORTD=0x00;
 1ee:	1b b8       	out	0x0b, r1	; 11
	//DDRD=0xFF;
	DDRD=0b11111100;
 1f0:	8c ef       	ldi	r24, 0xFC	; 252
 1f2:	8a b9       	out	0x0a, r24	; 10
	
	PORTB=0x00;
 1f4:	15 b8       	out	0x05, r1	; 5
	DDRB=0b11111110;
 1f6:	8e ef       	ldi	r24, 0xFE	; 254
 1f8:	84 b9       	out	0x04, r24	; 4
 1fa:	08 95       	ret

000001fc <main>:

	I2C_Init(); //»нициализируем шину I2C
	LCD_ini();  //»нициализируем дисплей
	clearlcd(); //ќчистим дисплей
	*/
	USART_Init();
 1fc:	0e 94 18 01 	call	0x230	; 0x230 <USART_Init>
	port_ini(); //»нициализируем порты
 200:	0e 94 f7 00 	call	0x1ee	; 0x1ee <port_ini>
			USART_Transmit(0x0d);	//переход в начало строки
			USART_Transmit(0x0a);	//переход на новую строку	
		}
		*/
		
		unsigned int tt = dt_check();
 204:	0e 94 cd 00 	call	0x19a	; 0x19a <dt_check>
 208:	d8 2f       	mov	r29, r24
 20a:	c9 2f       	mov	r28, r25
		unsigned int tt_temporary = tt;
		USART_Transmit(tt_temporary>>8);
 20c:	89 2f       	mov	r24, r25
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 24 01 	call	0x248	; 0x248 <USART_Transmit>
		USART_Transmit(tt);
 214:	8d 2f       	mov	r24, r29
 216:	9c 2f       	mov	r25, r28
 218:	0e 94 24 01 	call	0x248	; 0x248 <USART_Transmit>
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	89 e6       	ldi	r24, 0x69	; 105
 220:	98 e1       	ldi	r25, 0x18	; 24
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0x26>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0x30>
 22c:	00 00       	nop
 22e:	ea cf       	rjmp	.-44     	; 0x204 <main+0x8>

00000230 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 230:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 234:	87 e6       	ldi	r24, 0x67	; 103
 236:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 240:	88 e1       	ldi	r24, 0x18	; 24
 242:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 246:	08 95       	ret

00000248 <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 248:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 24c:	95 ff       	sbrs	r25, 5
 24e:	fc cf       	rjmp	.-8      	; 0x248 <USART_Transmit>
	UDR0 = data;
 250:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
