
DS18B20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000744  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ff  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c81  00000000  00000000  00002323  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d44  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057d  00000000  00000000  00003f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009fe  00000000  00000000  000044e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004edf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 81 01 	call	0x302	; 0x302 <main>
  88:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <dt_testdevice>:
#include "DS18B20.h"

//функци€ определени€ датчика на шине
char dt_testdevice(void) //dt - digital termomether | определим, есть ли устройство на шине
{
	char stektemp=SREG;// сохраним значение стека
  90:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
  92:	f8 94       	cli
	char dt;
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
  94:	84 b1       	in	r24, 0x04	; 4
  96:	81 60       	ori	r24, 0x01	; 1
  98:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	81 ea       	ldi	r24, 0xA1	; 161
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <dt_testdevice+0xc>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <dt_testdevice+0x12>
	_delay_us(485); //задержка как минимум на 480 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	84 b9       	out	0x04, r24	; 4
  a8:	85 e1       	ldi	r24, 0x15	; 21
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <dt_testdevice+0x1a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <dt_testdevice+0x20>
	_delay_us(65); //задержка как максимум на 60 микросекунд
	if ((PINTEMP & (1<<BITTEMP))==0)//провер€ем, ответит ли устройство
  b0:	18 99       	sbic	0x03, 0	; 3
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <dt_testdevice+0x28>
	{
		dt=1;//устройство есть
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <dt_testdevice+0x2a>
	}
	else dt=0;//устройства нет
  b8:	80 e0       	ldi	r24, 0x00	; 0
	SREG = stektemp;// вернем значение стека
  ba:	9f bf       	out	0x3f, r25	; 63
  bc:	9c e8       	ldi	r25, 0x8C	; 140
  be:	9a 95       	dec	r25
  c0:	f1 f7       	brne	.-4      	; 0xbe <dt_testdevice+0x2e>
	_delay_us(420); //задержка как минимум на 480 микросекунд, но хватит и 420, тк это с учетом времени прошедших команд
	return dt; //вернем результат
}
  c2:	08 95       	ret

000000c4 <dt_sendbit>:


//функци€ записи бита на устройство
void dt_sendbit(char bt)
{
	char stektemp=SREG;// сохраним значение стека
  c4:	2f b7       	in	r18, 0x3f	; 63
	cli(); //запрещаем прерывание
  c6:	f8 94       	cli
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
  c8:	94 b1       	in	r25, 0x04	; 4
  ca:	91 60       	ori	r25, 0x01	; 1
  cc:	94 b9       	out	0x04, r25	; 4
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <dt_sendbit+0xc>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	if(bt)
  d0:	88 23       	and	r24, r24
  d2:	19 f0       	breq	.+6      	; 0xda <dt_sendbit+0x16>
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	84 b9       	out	0x04, r24	; 4
  da:	85 e1       	ldi	r24, 0x15	; 21
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <dt_sendbit+0x18>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <dt_sendbit+0x1e>
	_delay_us(65); //задержка как минимум на 60 микросекунд
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
  e2:	84 b1       	in	r24, 0x04	; 4
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	84 b9       	out	0x04, r24	; 4
	SREG = stektemp;// вернем значение стека
  e8:	2f bf       	out	0x3f, r18	; 63
  ea:	08 95       	ret

000000ec <dt_sendbyte>:
}


//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	d8 2f       	mov	r29, r24
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	17 c0       	rjmp	.+46     	; 0x124 <dt_sendbyte+0x38>
	{
		if((bt & (1<<i)) == 1<<i)//посылаем 1
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0c 2e       	mov	r0, r28
  fc:	02 c0       	rjmp	.+4      	; 0x102 <dt_sendbyte+0x16>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <dt_sendbyte+0x12>
 106:	2d 2f       	mov	r18, r29
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	28 23       	and	r18, r24
 10c:	39 23       	and	r19, r25
 10e:	82 17       	cp	r24, r18
 110:	93 07       	cpc	r25, r19
 112:	21 f4       	brne	.+8      	; 0x11c <dt_sendbyte+0x30>
		dt_sendbit(1);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 62 00 	call	0xc4	; 0xc4 <dt_sendbit>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <dt_sendbyte+0x36>
		else //посылаем 0
		dt_sendbit(0);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 62 00 	call	0xc4	; 0xc4 <dt_sendbit>

//функци€ записи байта на устройство
void dt_sendbyte(unsigned char bt)
{
	char i;
	for(i=0;i<8;i++)//посылаем отдельно каждый бит на устройство
 122:	cf 5f       	subi	r28, 0xFF	; 255
 124:	c8 30       	cpi	r28, 0x08	; 8
 126:	38 f3       	brcs	.-50     	; 0xf6 <dt_sendbyte+0xa>
		if((bt & (1<<i)) == 1<<i)//посылаем 1
		dt_sendbit(1);
		else //посылаем 0
		dt_sendbit(0);
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <dt_readbit>:


//функци€ чтени€ бита с устройства
char dt_readbit(void)
{
	char stektemp=SREG;// сохраним значение стека
 12e:	9f b7       	in	r25, 0x3f	; 63
	cli(); //запрещаем прерывание
 130:	f8 94       	cli
	char bt; //переменна€ хранени€ бита
	DDRTEMP |= 1<<BITTEMP; //прит€гиваем шину
 132:	84 b1       	in	r24, 0x04	; 4
 134:	81 60       	ori	r24, 0x01	; 1
 136:	84 b9       	out	0x04, r24	; 4
 138:	00 c0       	rjmp	.+0      	; 0x13a <dt_readbit+0xc>
	_delay_us(2); //задержка как минимум на 2 микросекунды
	DDRTEMP &= ~(1<<BITTEMP); //отпускаем шину
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	8e 7f       	andi	r24, 0xFE	; 254
 13e:	84 b9       	out	0x04, r24	; 4
 140:	24 e0       	ldi	r18, 0x04	; 4
 142:	2a 95       	dec	r18
 144:	f1 f7       	brne	.-4      	; 0x142 <dt_readbit+0x14>
 146:	00 00       	nop
	_delay_us(13);
	bt = (PINTEMP & (1<<BITTEMP))>>BITTEMP; //читаем бит
 148:	83 b1       	in	r24, 0x03	; 3
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	2f e0       	ldi	r18, 0x0F	; 15
 14e:	2a 95       	dec	r18
 150:	f1 f7       	brne	.-4      	; 0x14e <dt_readbit+0x20>
	_delay_us(45);
	SREG = stektemp;// вернем значение стека
 152:	9f bf       	out	0x3f, r25	; 63
	return bt; //вернем результат
}
 154:	08 95       	ret

00000156 <dt_readbyte>:


//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
	char c=0;
	char i;
	for(i=0;i<8;i++)
 15a:	c0 e0       	ldi	r28, 0x00	; 0


//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
 15c:	d0 e0       	ldi	r29, 0x00	; 0
	char i;
	for(i=0;i<8;i++)
 15e:	0b c0       	rjmp	.+22     	; 0x176 <dt_readbyte+0x20>
	c|=dt_readbit()<<i; //читаем бит
 160:	0e 94 97 00 	call	0x12e	; 0x12e <dt_readbit>
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0c 2e       	mov	r0, r28
 168:	02 c0       	rjmp	.+4      	; 0x16e <dt_readbyte+0x18>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <dt_readbyte+0x14>
 172:	d8 2b       	or	r29, r24
//функци€ чтени€ байта с устройства
unsigned char dt_readbyte(void)
{
	char c=0;
	char i;
	for(i=0;i<8;i++)
 174:	cf 5f       	subi	r28, 0xFF	; 255
 176:	c8 30       	cpi	r28, 0x08	; 8
 178:	98 f3       	brcs	.-26     	; 0x160 <dt_readbyte+0xa>
	c|=dt_readbit()<<i; //читаем бит
	return c;
}
 17a:	8d 2f       	mov	r24, r29
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <dt_check>:


//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
 182:	cf 93       	push	r28
	unsigned char bt;//переменна€ дл€ считывани€ байта
	unsigned int tt=0;
	if(dt_testdevice()==1) //если устройство нашлось
 184:	0e 94 48 00 	call	0x90	; 0x90 <dt_testdevice>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	09 f5       	brne	.+66     	; 0x1ce <dt_check+0x4c>
	{
		dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
 18c:	8c ec       	ldi	r24, 0xCC	; 204
 18e:	0e 94 76 00 	call	0xec	; 0xec <dt_sendbyte>
		dt_sendbyte(T_CONVERT); //измер€ем температуру
 192:	84 e4       	ldi	r24, 0x44	; 68
 194:	0e 94 76 00 	call	0xec	; 0xec <dt_sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ee       	ldi	r18, 0xEF	; 239
 19a:	89 e4       	ldi	r24, 0x49	; 73
 19c:	92 e0       	ldi	r25, 0x02	; 2
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <dt_check+0x1c>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <dt_check+0x26>
 1a8:	00 00       	nop
		_delay_ms(750); //в 12битном режиме преобразовани€ - 750 милисекунд
		dt_testdevice(); //снова используем  те же манипул€ции с шиной что и при проверке ее присутстви€
 1aa:	0e 94 48 00 	call	0x90	; 0x90 <dt_testdevice>
		dt_sendbyte(NOID); //пропустить идентификацию, тк у нас только одно устройство на шине
 1ae:	8c ec       	ldi	r24, 0xCC	; 204
 1b0:	0e 94 76 00 	call	0xec	; 0xec <dt_sendbyte>
		dt_sendbyte(READ_DATA); //даем команду на чтение данных с устройства
 1b4:	8e eb       	ldi	r24, 0xBE	; 190
 1b6:	0e 94 76 00 	call	0xec	; 0xec <dt_sendbyte>
		bt = dt_readbyte(); //читаем младший бит
 1ba:	0e 94 ab 00 	call	0x156	; 0x156 <dt_readbyte>
 1be:	c8 2f       	mov	r28, r24
		tt = dt_readbyte(); //читаем старший бит MS
 1c0:	0e 94 ab 00 	call	0x156	; 0x156 <dt_readbyte>
 1c4:	90 e0       	ldi	r25, 0x00	; 0
		tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
 1c6:	98 2f       	mov	r25, r24
 1c8:	88 27       	eor	r24, r24
 1ca:	8c 2b       	or	r24, r28
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <dt_check+0x50>

//функци€ преобразовани€ показаний датчика в температуру
int dt_check(void)
{
	unsigned char bt;//переменна€ дл€ считывани€ байта
	unsigned int tt=0;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
		bt = dt_readbyte(); //читаем младший бит
		tt = dt_readbyte(); //читаем старший бит MS
		tt = (tt<<8)|bt;//сдвигаем старший влево, младший пишем на его место, тем самым получаем общий результат
	}
	return tt;
}
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <converttemp>:


//преобразование температуры в единицы
char converttemp (unsigned int tt)
{
	char t = tt>>4;//сдвиг и отсечение части старшего байта
 1d6:	92 95       	swap	r25
 1d8:	82 95       	swap	r24
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	89 27       	eor	r24, r25
 1de:	9f 70       	andi	r25, 0x0F	; 15
 1e0:	89 27       	eor	r24, r25
	return t;
}
 1e2:	08 95       	ret

000001e4 <sendhalfbyte>:
#include "lcd.h"

//----------------------------------------
void sendhalfbyte(unsigned char c)
{
	c<<=4;
 1e4:	82 95       	swap	r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
	e1; //включаем линию ≈
 1e8:	9b b1       	in	r25, 0x0b	; 11
 1ea:	98 60       	ori	r25, 0x08	; 8
 1ec:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	90 e1       	ldi	r25, 0x10	; 16
 1f0:	9a 95       	dec	r25
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <sendhalfbyte+0xc>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <sendhalfbyte+0x12>
	_delay_us(50);
	PORTD&=0b00001111; //стираем информацию на входах DB4-DB7, остальное не трогаем
 1f6:	9b b1       	in	r25, 0x0b	; 11
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	9b b9       	out	0x0b, r25	; 11
	PORTD|=c;
 1fc:	9b b1       	in	r25, 0x0b	; 11
 1fe:	89 2b       	or	r24, r25
 200:	8b b9       	out	0x0b, r24	; 11
	e0; //выключаем линию ≈
 202:	8b b1       	in	r24, 0x0b	; 11
 204:	87 7f       	andi	r24, 0xF7	; 247
 206:	8b b9       	out	0x0b, r24	; 11
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	8a 95       	dec	r24
 20c:	f1 f7       	brne	.-4      	; 0x20a <sendhalfbyte+0x26>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <sendhalfbyte+0x2c>
 210:	08 95       	ret

00000212 <sendbyte>:
	_delay_us(50);
}
//----------------------------------------
void sendbyte(unsigned char c, unsigned char mode)
{
 212:	cf 93       	push	r28
 214:	c8 2f       	mov	r28, r24
	if (mode==0) rs0;
 216:	61 11       	cpse	r22, r1
 218:	04 c0       	rjmp	.+8      	; 0x222 <sendbyte+0x10>
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8b 7f       	andi	r24, 0xFB	; 251
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	03 c0       	rjmp	.+6      	; 0x228 <sendbyte+0x16>
	else         rs1;
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	84 60       	ori	r24, 0x04	; 4
 226:	8b b9       	out	0x0b, r24	; 11
	unsigned char hc=0;
	hc=c>>4;
	sendhalfbyte(hc); sendhalfbyte(c);
 228:	8c 2f       	mov	r24, r28
 22a:	82 95       	swap	r24
 22c:	8f 70       	andi	r24, 0x0F	; 15
 22e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <sendhalfbyte>
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <sendhalfbyte>
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <sendcharlcd>:
//----------------------------------------
void sendcharlcd(unsigned char c)
{
	sendbyte(c,1);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	0e 94 09 01 	call	0x212	; 0x212 <sendbyte>
 242:	08 95       	ret

00000244 <setpos>:
}
//----------------------------------------
void setpos(unsigned char x, unsigned y)
{
	char adress;
	adress=(0x40*y+x)|0b10000000;
 244:	90 e4       	ldi	r25, 0x40	; 64
 246:	69 9f       	mul	r22, r25
 248:	80 0d       	add	r24, r0
 24a:	11 24       	eor	r1, r1
	sendbyte(adress, 0);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	0e 94 09 01 	call	0x212	; 0x212 <sendbyte>
 254:	08 95       	ret

00000256 <LCD_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	85 ea       	ldi	r24, 0xA5	; 165
 258:	9e e0       	ldi	r25, 0x0E	; 14
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_ini+0x4>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_ini+0xa>
 260:	00 00       	nop
}
//----------------------------------------
void LCD_ini(void)
{
	_delay_ms(15); //∆дем 15 мс (стр 45)
	sendhalfbyte(0b00000011);
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <sendhalfbyte>
 268:	87 ee       	ldi	r24, 0xE7	; 231
 26a:	93 e0       	ldi	r25, 0x03	; 3
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_ini+0x16>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_ini+0x1c>
 272:	00 00       	nop
	_delay_ms(4);
	sendhalfbyte(0b00000011);
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	91 e2       	ldi	r25, 0x21	; 33
 27c:	9a 95       	dec	r25
 27e:	f1 f7       	brne	.-4      	; 0x27c <LCD_ini+0x26>
 280:	00 00       	nop
	_delay_us(100);
	sendhalfbyte(0b00000011);
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <sendhalfbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	89 ef       	ldi	r24, 0xF9	; 249
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_ini+0x36>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_ini+0x3c>
 292:	00 00       	nop
	_delay_ms(1);
	sendhalfbyte(0b00000010);
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <sendhalfbyte>
 29a:	89 ef       	ldi	r24, 0xF9	; 249
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_ini+0x48>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_ini+0x4e>
 2a4:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00101000, 0); //4бит-режим (DL=0) и 2 линии (N=1)
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	88 e2       	ldi	r24, 0x28	; 40
 2aa:	0e 94 09 01 	call	0x212	; 0x212 <sendbyte>
 2ae:	89 ef       	ldi	r24, 0xF9	; 249
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_ini+0x5c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_ini+0x62>
 2b8:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00001100, 0); //включаем изображение на дисплее (D=1), курсоры никакие не включаем (C=0, B=0)
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	8c e0       	ldi	r24, 0x0C	; 12
 2be:	0e 94 09 01 	call	0x212	; 0x212 <sendbyte>
 2c2:	89 ef       	ldi	r24, 0xF9	; 249
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <LCD_ini+0x70>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <LCD_ini+0x76>
 2cc:	00 00       	nop
	_delay_ms(1);
	sendbyte(0b00000110, 0); //курсор (хоть он у нас и невидимый) будет двигатьс€ влево
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	0e 94 09 01 	call	0x212	; 0x212 <sendbyte>
 2d6:	89 ef       	ldi	r24, 0xF9	; 249
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_ini+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_ini+0x8a>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <clearlcd>:
	_delay_ms(1);
}
//----------------------------------------
void clearlcd(void)
{
	sendbyte(0b00000001, 0);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 09 01 	call	0x212	; 0x212 <sendbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	86 e7       	ldi	r24, 0x76	; 118
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <clearlcd+0xc>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <clearlcd+0x12>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <port_ini>:

unsigned char sec,min,hour,day,date,month,year;

void port_ini(void)
{
	PORTD=0x00;
 2fa:	1b b8       	out	0x0b, r1	; 11
	//DDRD=0xFF;
	DDRD=0b11111100;
 2fc:	8c ef       	ldi	r24, 0xFC	; 252
 2fe:	8a b9       	out	0x0a, r24	; 10
 300:	08 95       	ret

00000302 <main>:

int main(void)
{
	unsigned int tt=0; //переменна€ дл€ хранени€ температуры
	
	port_ini(); //»нициализируем порты
 302:	0e 94 7d 01 	call	0x2fa	; 0x2fa <port_ini>
	I2C_Init(); //»нициализируем шину I2C
 306:	0e 94 05 03 	call	0x60a	; 0x60a <I2C_Init>
	LCD_ini();  //»нициализируем дисплей
 30a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_ini>
	clearlcd(); //ќчистим дисплей
 30e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <clearlcd>

	USART_Init();
 312:	0e 94 44 03 	call	0x688	; 0x688 <USART_Init>
	//	I2C_StopCondition();
	
	while(1)
	{
		//„итаем времени
		I2C_SendByteByADDR(0,0b11010000);	//переходим на адрес 0
 316:	60 ed       	ldi	r22, 0xD0	; 208
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 1f 03 	call	0x63e	; 0x63e <I2C_SendByteByADDR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31e:	8f e4       	ldi	r24, 0x4F	; 79
 320:	93 ec       	ldi	r25, 0xC3	; 195
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <main+0x20>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0x26>
 328:	00 00       	nop
		_delay_ms(200);
		I2C_StartCondition(); //ќтправим условие START
 32a:	0e 94 09 03 	call	0x612	; 0x612 <I2C_StartCondition>
		I2C_SendByte(0b11010001); //отправим в устройство бит чтени€
 32e:	81 ed       	ldi	r24, 0xD1	; 209
 330:	0e 94 15 03 	call	0x62a	; 0x62a <I2C_SendByte>
		sec = I2C_ReadByte();
 334:	0e 94 30 03 	call	0x660	; 0x660 <I2C_ReadByte>
 338:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sec>
		min = I2C_ReadByte();
 33c:	0e 94 30 03 	call	0x660	; 0x660 <I2C_ReadByte>
 340:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <min>
		hour = I2C_ReadByte();
 344:	0e 94 30 03 	call	0x660	; 0x660 <I2C_ReadByte>
 348:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
		day = I2C_ReadByte();
 34c:	0e 94 30 03 	call	0x660	; 0x660 <I2C_ReadByte>
 350:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <day>
		date = I2C_ReadByte();
 354:	0e 94 30 03 	call	0x660	; 0x660 <I2C_ReadByte>
 358:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <date>
		month = I2C_ReadByte();
 35c:	0e 94 30 03 	call	0x660	; 0x660 <I2C_ReadByte>
 360:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		year = I2C_ReadLastByte();
 364:	0e 94 3a 03 	call	0x674	; 0x674 <I2C_ReadLastByte>
 368:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <year>
		I2C_StopCondition(); //ќтправим условие STOP
 36c:	0e 94 11 03 	call	0x622	; 0x622 <I2C_StopCondition>
		sec = RTC_ConvertFromDec(sec); //ѕреобразуем в дес€тичный формат
 370:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sec>
 374:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <RTC_ConvertFromDec>
 378:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <sec>
		min = RTC_ConvertFromDec(min); //ѕреобразуем в дес€тичный формат
 37c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <min>
 380:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <RTC_ConvertFromDec>
 384:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <min>
		hour = RTC_ConvertFromDec(hour); //ѕреобразуем в дес€тичный формат
 388:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 38c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <RTC_ConvertFromDec>
 390:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <hour>
		day = RTC_ConvertFromDec(day); //ѕреобразуем в дес€тичный формат
 394:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <day>
 398:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <RTC_ConvertFromDec>
 39c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <day>
		year = RTC_ConvertFromDec(year); //ѕреобразуем в дес€тичный формат
 3a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <year>
 3a4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <RTC_ConvertFromDec>
 3a8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <year>
		month = RTC_ConvertFromDec(month); //ѕреобразуем в дес€тичный формат
 3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <RTC_ConvertFromDec>
 3b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		date = RTC_ConvertFromDec(date); //ѕреобразуем в дес€тичный формат
 3b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <date>
 3bc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <RTC_ConvertFromDec>
 3c0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <date>
		setpos(0,0); //—тавим курсор на начало координат
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 22 01 	call	0x244	; 0x244 <setpos>
		sendcharlcd(date/10+0x30);//ѕреобразуем число в код числа
 3ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <date>
 3d2:	cd ec       	ldi	r28, 0xCD	; 205
 3d4:	8c 9f       	mul	r24, r28
 3d6:	81 2d       	mov	r24, r1
 3d8:	11 24       	eor	r1, r1
 3da:	86 95       	lsr	r24
 3dc:	86 95       	lsr	r24
 3de:	86 95       	lsr	r24
 3e0:	80 5d       	subi	r24, 0xD0	; 208
 3e2:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(date%10+0x30);//ѕреобразуем число в код числа
 3e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <date>
 3ea:	8c 9f       	mul	r24, r28
 3ec:	91 2d       	mov	r25, r1
 3ee:	11 24       	eor	r1, r1
 3f0:	96 95       	lsr	r25
 3f2:	96 95       	lsr	r25
 3f4:	96 95       	lsr	r25
 3f6:	99 0f       	add	r25, r25
 3f8:	29 2f       	mov	r18, r25
 3fa:	22 0f       	add	r18, r18
 3fc:	22 0f       	add	r18, r18
 3fe:	92 0f       	add	r25, r18
 400:	89 1b       	sub	r24, r25
 402:	80 5d       	subi	r24, 0xD0	; 208
 404:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd('.');
 408:	8e e2       	ldi	r24, 0x2E	; 46
 40a:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(month/10+0x30);//ѕреобразуем число в код числа
 40e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 412:	8c 9f       	mul	r24, r28
 414:	81 2d       	mov	r24, r1
 416:	11 24       	eor	r1, r1
 418:	86 95       	lsr	r24
 41a:	86 95       	lsr	r24
 41c:	86 95       	lsr	r24
 41e:	80 5d       	subi	r24, 0xD0	; 208
 420:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(month%10+0x30);//ѕреобразуем число в код числа
 424:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 428:	8c 9f       	mul	r24, r28
 42a:	91 2d       	mov	r25, r1
 42c:	11 24       	eor	r1, r1
 42e:	96 95       	lsr	r25
 430:	96 95       	lsr	r25
 432:	96 95       	lsr	r25
 434:	99 0f       	add	r25, r25
 436:	29 2f       	mov	r18, r25
 438:	22 0f       	add	r18, r18
 43a:	22 0f       	add	r18, r18
 43c:	92 0f       	add	r25, r18
 43e:	89 1b       	sub	r24, r25
 440:	80 5d       	subi	r24, 0xD0	; 208
 442:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd('.');
 446:	8e e2       	ldi	r24, 0x2E	; 46
 448:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd('2');
 44c:	82 e3       	ldi	r24, 0x32	; 50
 44e:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd('0');
 452:	80 e3       	ldi	r24, 0x30	; 48
 454:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(year/10+0x30);//ѕреобразуем число в код числа
 458:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <year>
 45c:	8c 9f       	mul	r24, r28
 45e:	81 2d       	mov	r24, r1
 460:	11 24       	eor	r1, r1
 462:	86 95       	lsr	r24
 464:	86 95       	lsr	r24
 466:	86 95       	lsr	r24
 468:	80 5d       	subi	r24, 0xD0	; 208
 46a:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(year%10+0x30);//ѕреобразуем число в код числа
 46e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <year>
 472:	8c 9f       	mul	r24, r28
 474:	91 2d       	mov	r25, r1
 476:	11 24       	eor	r1, r1
 478:	96 95       	lsr	r25
 47a:	96 95       	lsr	r25
 47c:	96 95       	lsr	r25
 47e:	99 0f       	add	r25, r25
 480:	29 2f       	mov	r18, r25
 482:	22 0f       	add	r18, r18
 484:	22 0f       	add	r18, r18
 486:	92 0f       	add	r25, r18
 488:	89 1b       	sub	r24, r25
 48a:	80 5d       	subi	r24, 0xD0	; 208
 48c:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(' ');
 490:	80 e2       	ldi	r24, 0x20	; 32
 492:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd('-');
 496:	8d e2       	ldi	r24, 0x2D	; 45
 498:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(day+0x30);//ѕреобразуем число в код числа
 49c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <day>
 4a0:	80 5d       	subi	r24, 0xD0	; 208
 4a2:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd('-');
 4a6:	8d e2       	ldi	r24, 0x2D	; 45
 4a8:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		setpos(0,1); //—тавим курсор на начало координат
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 22 01 	call	0x244	; 0x244 <setpos>
		sendcharlcd(hour/10+0x30);//ѕреобразуем число в код числа
 4b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 4ba:	8c 9f       	mul	r24, r28
 4bc:	81 2d       	mov	r24, r1
 4be:	11 24       	eor	r1, r1
 4c0:	86 95       	lsr	r24
 4c2:	86 95       	lsr	r24
 4c4:	86 95       	lsr	r24
 4c6:	80 5d       	subi	r24, 0xD0	; 208
 4c8:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(hour%10+0x30);//ѕреобразуем число в код числа
 4cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <hour>
 4d0:	8c 9f       	mul	r24, r28
 4d2:	91 2d       	mov	r25, r1
 4d4:	11 24       	eor	r1, r1
 4d6:	96 95       	lsr	r25
 4d8:	96 95       	lsr	r25
 4da:	96 95       	lsr	r25
 4dc:	99 0f       	add	r25, r25
 4de:	29 2f       	mov	r18, r25
 4e0:	22 0f       	add	r18, r18
 4e2:	22 0f       	add	r18, r18
 4e4:	92 0f       	add	r25, r18
 4e6:	89 1b       	sub	r24, r25
 4e8:	80 5d       	subi	r24, 0xD0	; 208
 4ea:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(':');
 4ee:	8a e3       	ldi	r24, 0x3A	; 58
 4f0:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(min/10+0x30);//ѕреобразуем число в код числа
 4f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <min>
 4f8:	8c 9f       	mul	r24, r28
 4fa:	81 2d       	mov	r24, r1
 4fc:	11 24       	eor	r1, r1
 4fe:	86 95       	lsr	r24
 500:	86 95       	lsr	r24
 502:	86 95       	lsr	r24
 504:	80 5d       	subi	r24, 0xD0	; 208
 506:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(min%10+0x30);//ѕреобразуем число в код числа
 50a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <min>
 50e:	8c 9f       	mul	r24, r28
 510:	91 2d       	mov	r25, r1
 512:	11 24       	eor	r1, r1
 514:	96 95       	lsr	r25
 516:	96 95       	lsr	r25
 518:	96 95       	lsr	r25
 51a:	99 0f       	add	r25, r25
 51c:	29 2f       	mov	r18, r25
 51e:	22 0f       	add	r18, r18
 520:	22 0f       	add	r18, r18
 522:	92 0f       	add	r25, r18
 524:	89 1b       	sub	r24, r25
 526:	80 5d       	subi	r24, 0xD0	; 208
 528:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(':');
 52c:	8a e3       	ldi	r24, 0x3A	; 58
 52e:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(sec/10+0x30);//ѕреобразуем число в код числа
 532:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sec>
 536:	8c 9f       	mul	r24, r28
 538:	81 2d       	mov	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	86 95       	lsr	r24
 53e:	86 95       	lsr	r24
 540:	86 95       	lsr	r24
 542:	80 5d       	subi	r24, 0xD0	; 208
 544:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(sec%10+0x30);//ѕреобразуем число в код числа
 548:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <sec>
 54c:	8c 9f       	mul	r24, r28
 54e:	c1 2d       	mov	r28, r1
 550:	11 24       	eor	r1, r1
 552:	c6 95       	lsr	r28
 554:	c6 95       	lsr	r28
 556:	c6 95       	lsr	r28
 558:	cc 0f       	add	r28, r28
 55a:	9c 2f       	mov	r25, r28
 55c:	99 0f       	add	r25, r25
 55e:	99 0f       	add	r25, r25
 560:	c9 0f       	add	r28, r25
 562:	8c 1b       	sub	r24, r28
 564:	80 5d       	subi	r24, 0xD0	; 208
 566:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(' ');
 56a:	80 e2       	ldi	r24, 0x20	; 32
 56c:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		tt = converttemp(dt_check()); //измер€ем температуру
 570:	0e 94 c1 00 	call	0x182	; 0x182 <dt_check>
 574:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <converttemp>
 578:	08 2f       	mov	r16, r24
 57a:	10 e0       	ldi	r17, 0x00	; 0
		sendcharlcd(tt/10+0x30);//ѕреобразуем число в код числа
 57c:	98 01       	movw	r18, r16
 57e:	ad ec       	ldi	r26, 0xCD	; 205
 580:	bc ec       	ldi	r27, 0xCC	; 204
 582:	0e 94 57 03 	call	0x6ae	; 0x6ae <__umulhisi3>
 586:	ec 01       	movw	r28, r24
 588:	d6 95       	lsr	r29
 58a:	c7 95       	ror	r28
 58c:	d6 95       	lsr	r29
 58e:	c7 95       	ror	r28
 590:	d6 95       	lsr	r29
 592:	c7 95       	ror	r28
 594:	8c 2f       	mov	r24, r28
 596:	80 5d       	subi	r24, 0xD0	; 208
 598:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd(tt%10+0x30);//ѕреобразуем число в код числа
 59c:	ce 01       	movw	r24, r28
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	cc 0f       	add	r28, r28
 5a4:	dd 1f       	adc	r29, r29
 5a6:	cc 0f       	add	r28, r28
 5a8:	dd 1f       	adc	r29, r29
 5aa:	cc 0f       	add	r28, r28
 5ac:	dd 1f       	adc	r29, r29
 5ae:	c8 0f       	add	r28, r24
 5b0:	d9 1f       	adc	r29, r25
 5b2:	c8 01       	movw	r24, r16
 5b4:	8c 1b       	sub	r24, r28
 5b6:	9d 0b       	sbc	r25, r29
 5b8:	80 5d       	subi	r24, 0xD0	; 208
 5ba:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd('*');
 5be:	8a e2       	ldi	r24, 0x2A	; 42
 5c0:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		sendcharlcd('C');
 5c4:	83 e4       	ldi	r24, 0x43	; 67
 5c6:	0e 94 1e 01 	call	0x23c	; 0x23c <sendcharlcd>
		
		//LocalData = USART_ReceivePolling();
		USART_TransmitPolling(LocalData);
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 50 03 	call	0x6a0	; 0x6a0 <USART_TransmitPolling>
		USART_TransmitPolling('O');
 5d2:	8f e4       	ldi	r24, 0x4F	; 79
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <USART_TransmitPolling>
		USART_TransmitPolling('K');
 5da:	8b e4       	ldi	r24, 0x4B	; 75
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 50 03 	call	0x6a0	; 0x6a0 <USART_TransmitPolling>
		USART_TransmitPolling(0x0d);//переход в начало строки
 5e2:	8d e0       	ldi	r24, 0x0D	; 13
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <USART_TransmitPolling>
		USART_TransmitPolling(0x0a);//переход на новую строку
 5ea:	8a e0       	ldi	r24, 0x0A	; 10
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 50 03 	call	0x6a0	; 0x6a0 <USART_TransmitPolling>
 5f2:	91 ce       	rjmp	.-734    	; 0x316 <main+0x14>

000005f4 <RTC_ConvertFromDec>:

#include "RTC.h"

unsigned char RTC_ConvertFromDec(unsigned char c)
{
	unsigned char ch = ((c>>4)*10+(0b00001111&c));
 5f4:	98 2f       	mov	r25, r24
 5f6:	92 95       	swap	r25
 5f8:	9f 70       	andi	r25, 0x0F	; 15
 5fa:	99 0f       	add	r25, r25
 5fc:	29 2f       	mov	r18, r25
 5fe:	22 0f       	add	r18, r18
 600:	22 0f       	add	r18, r18
 602:	92 0f       	add	r25, r18
 604:	8f 70       	andi	r24, 0x0F	; 15
	return ch;
}
 606:	89 0f       	add	r24, r25
 608:	08 95       	ret

0000060a <I2C_Init>:

#include "twi.h"

void I2C_Init (void)
{
	TWBR=0x20;//скорость передачи (при 8 мгц получаетс€ 100 кгц, что и необходимо дл€ общени€ с ds1307)
 60a:	80 e2       	ldi	r24, 0x20	; 32
 60c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 610:	08 95       	ret

00000612 <I2C_StartCondition>:
}


void I2C_StartCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 612:	84 ea       	ldi	r24, 0xA4	; 164
 614:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));//подождем пока установитс€ TWIN
 618:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 61c:	88 23       	and	r24, r24
 61e:	e4 f7       	brge	.-8      	; 0x618 <I2C_StartCondition+0x6>
}
 620:	08 95       	ret

00000622 <I2C_StopCondition>:

void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
 622:	84 e9       	ldi	r24, 0x94	; 148
 624:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 628:	08 95       	ret

0000062a <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;//запишем байт в регистр данных
 62a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN);//включим передачу байта
 62e:	84 e8       	ldi	r24, 0x84	; 132
 630:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));//подождем пока установитс€ TWIN
 634:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 638:	88 23       	and	r24, r24
 63a:	e4 f7       	brge	.-8      	; 0x634 <I2C_SendByte+0xa>
}
 63c:	08 95       	ret

0000063e <I2C_SendByteByADDR>:

void I2C_SendByteByADDR(unsigned char c,unsigned char addr)
{
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	c8 2f       	mov	r28, r24
 644:	d6 2f       	mov	r29, r22
	I2C_StartCondition(); // ќтправим условие START
 646:	0e 94 09 03 	call	0x612	; 0x612 <I2C_StartCondition>
	I2C_SendByte(addr); // ќтправим в шину адрес устройства + бит чтени€-записи
 64a:	8d 2f       	mov	r24, r29
 64c:	0e 94 15 03 	call	0x62a	; 0x62a <I2C_SendByte>
	I2C_SendByte(c);// ќтправим байт данных
 650:	8c 2f       	mov	r24, r28
 652:	0e 94 15 03 	call	0x62a	; 0x62a <I2C_SendByte>
	I2C_StopCondition();// ќтправим условие STOP
 656:	0e 94 11 03 	call	0x622	; 0x622 <I2C_StopCondition>
}
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 660:	84 ec       	ldi	r24, 0xC4	; 196
 662:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
 666:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 66a:	88 23       	and	r24, r24
 66c:	e4 f7       	brge	.-8      	; 0x666 <I2C_ReadByte+0x6>
	return TWDR;//читаем регистр данных
 66e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 672:	08 95       	ret

00000674 <I2C_ReadLastByte>:

unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
 674:	84 e8       	ldi	r24, 0x84	; 132
 676:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
 67a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 67e:	88 23       	and	r24, r24
 680:	e4 f7       	brge	.-8      	; 0x67a <I2C_ReadLastByte+0x6>
	return TWDR;//читаем регистр данных
 682:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 686:	08 95       	ret

00000688 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 688:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 68c:	87 e6       	ldi	r24, 0x67	; 103
 68e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 692:	86 e0       	ldi	r24, 0x06	; 6
 694:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 698:	88 e1       	ldi	r24, 0x18	; 24
 69a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 69e:	08 95       	ret

000006a0 <USART_TransmitPolling>:

void USART_TransmitPolling(uint8_t DataByte)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 6a0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 6a4:	95 ff       	sbrs	r25, 5
 6a6:	fc cf       	rjmp	.-8      	; 0x6a0 <USART_TransmitPolling>
	UDR0 = DataByte;
 6a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 6ac:	08 95       	ret

000006ae <__umulhisi3>:
 6ae:	a2 9f       	mul	r26, r18
 6b0:	b0 01       	movw	r22, r0
 6b2:	b3 9f       	mul	r27, r19
 6b4:	c0 01       	movw	r24, r0
 6b6:	a3 9f       	mul	r26, r19
 6b8:	70 0d       	add	r23, r0
 6ba:	81 1d       	adc	r24, r1
 6bc:	11 24       	eor	r1, r1
 6be:	91 1d       	adc	r25, r1
 6c0:	b2 9f       	mul	r27, r18
 6c2:	70 0d       	add	r23, r0
 6c4:	81 1d       	adc	r24, r1
 6c6:	11 24       	eor	r1, r1
 6c8:	91 1d       	adc	r25, r1
 6ca:	08 95       	ret

000006cc <_exit>:
 6cc:	f8 94       	cli

000006ce <__stop_program>:
 6ce:	ff cf       	rjmp	.-2      	; 0x6ce <__stop_program>
