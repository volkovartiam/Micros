
Timer_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  0000018a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000739  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000975  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000297  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003aa  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_timer_1>:
		
}


void init_timer_1(void){
	cli();
  90:	f8 94       	cli
	TIMSK0 |= (1<<TOIE0);					// разрешаем прерывания по переполнению таймера
  92:	ee e6       	ldi	r30, 0x6E	; 110
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	TCCR0B |= (1<<CS00);					// устанавливаем делитель тактовой частоты в 1 (без деления частоты)
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bd       	out	0x25, r24	; 37
	sei();
  a2:	78 94       	sei
	
	timer_freg = F_CPU / 1;						// получаем частоту таймера (расчет в режиме отладки)
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	94 e2       	ldi	r25, 0x24	; 36
  a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timer_freg+0x1>
  ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timer_freg>
	timer_period = (1.0/timer_freg)*1000;		// период таймера в милисекундах (умножение на 1000)
  b0:	84 ee       	ldi	r24, 0xE4	; 228
  b2:	98 e3       	ldi	r25, 0x38	; 56
  b4:	ae ed       	ldi	r26, 0xDE	; 222
  b6:	bd e3       	ldi	r27, 0x3D	; 61
  b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timer_period>
  bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timer_period+0x1>
  c0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <timer_period+0x2>
  c4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <timer_period+0x3>
	timer_inter_period = timer_period * 0xFF;	// период срабатывания таймера,  0xFF - значение таймера по переполнению
  c8:	8b ea       	ldi	r24, 0xAB	; 171
  ca:	9a e5       	ldi	r25, 0x5A	; 90
  cc:	ad ed       	ldi	r26, 0xDD	; 221
  ce:	b1 e4       	ldi	r27, 0x41	; 65
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  dc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	asm("nop");
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <initPins>:



void initPins()
{
	DDRD = 0xFF;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;
  e8:	1b b8       	out	0x0b, r1	; 11
  ea:	08 95       	ret

000000ec <main>:
}


int main(void){
	initPins();
  ec:	0e 94 72 00 	call	0xe4	; 0xe4 <initPins>
	init_timer_1();
  f0:	0e 94 48 00 	call	0x90	; 0x90 <init_timer_1>
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x8>

000000f6 <__vector_16>:
	}	
}


ISR(TIMER0_OVF_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
//	PIND = 0b10000001;
	PIND = PORTD0 | PORTD7;
 102:	87 e0       	ldi	r24, 0x07	; 7
 104:	89 b9       	out	0x09, r24	; 9
}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
