
Dinamic_IND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000807  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006da  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000216  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000384  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000276  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_11>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	76 00       	.word	0x0076	; ????
  6a:	5b 00       	.word	0x005b	; ????
  6c:	5e 00       	.word	0x005e	; ????
  6e:	61 00       	.word	0x0061	; ????
  70:	64 00       	.word	0x0064	; ????
  72:	67 00       	.word	0x0067	; ????
  74:	6a 00       	.word	0x006a	; ????
  76:	6d 00       	.word	0x006d	; ????
  78:	70 00       	.word	0x0070	; ????
  7a:	73 00       	.word	0x0073	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
  9c:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <segchar>:
unsigned char n_count=0;
int i = 0;

void segchar(unsigned char seg)
{
	switch(seg)
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	91 05       	cpc	r25, r1
  aa:	10 f5       	brcc	.+68     	; 0xf0 <segchar+0x4c>
  ac:	fc 01       	movw	r30, r24
  ae:	ec 5c       	subi	r30, 0xCC	; 204
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	0c 94 83 01 	jmp	0x306	; 0x306 <__tablejump2__>
	{
		case 1: PORTD = 0b11111001; break;
  b6:	89 ef       	ldi	r24, 0xF9	; 249
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	08 95       	ret
		case 2: PORTD = 0b10100100; break;
  bc:	84 ea       	ldi	r24, 0xA4	; 164
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	08 95       	ret
		case 3: PORTD = 0b10110000; break;
  c2:	80 eb       	ldi	r24, 0xB0	; 176
  c4:	8b b9       	out	0x0b, r24	; 11
  c6:	08 95       	ret
		case 4: PORTD = 0b10011001; break;
  c8:	89 e9       	ldi	r24, 0x99	; 153
  ca:	8b b9       	out	0x0b, r24	; 11
  cc:	08 95       	ret
		case 5: PORTD = 0b10010010; break;
  ce:	82 e9       	ldi	r24, 0x92	; 146
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret
		case 6: PORTD = 0b10000010; break;
  d4:	82 e8       	ldi	r24, 0x82	; 130
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	08 95       	ret
		case 7: PORTD = 0b11111000; break;
  da:	88 ef       	ldi	r24, 0xF8	; 248
  dc:	8b b9       	out	0x0b, r24	; 11
  de:	08 95       	ret
		case 8: PORTD = 0b10000000; break;
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	08 95       	ret
		case 9: PORTD = 0b10010000; break;
  e6:	80 e9       	ldi	r24, 0x90	; 144
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	08 95       	ret
		case 0: PORTD = 0b11000000; break;
  ec:	80 ec       	ldi	r24, 0xC0	; 192
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	08 95       	ret

000000f2 <timer_init>:
}


void timer_init(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
  fc:	af e6       	ldi	r26, 0x6F	; 111
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	8c 91       	ld	r24, X
 102:	82 60       	ori	r24, 0x02	; 2
 104:	8c 93       	st	X, r24
	OCR1AH = 0b00000001; //записываем в регистр число для сравнения
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	OCR1AL = 0b00000000;
 10c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B |= (1<<CS12);//установим делитель.
 110:	80 81       	ld	r24, Z
 112:	84 60       	ori	r24, 0x04	; 4
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <ledprint>:
	ledprint(4321);
}


void ledprint(unsigned int number)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ac 01       	movw	r20, r24

	int R3 = number%10;
 126:	9c 01       	movw	r18, r24
 128:	ad ec       	ldi	r26, 0xCD	; 205
 12a:	bc ec       	ldi	r27, 0xCC	; 204
 12c:	0e 94 89 01 	call	0x312	; 0x312 <__umulhisi3>
 130:	ec 01       	movw	r28, r24
 132:	d6 95       	lsr	r29
 134:	c7 95       	ror	r28
 136:	d6 95       	lsr	r29
 138:	c7 95       	ror	r28
 13a:	d6 95       	lsr	r29
 13c:	c7 95       	ror	r28
 13e:	ce 01       	movw	r24, r28
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	cc 0f       	add	r28, r28
 146:	dd 1f       	adc	r29, r29
 148:	cc 0f       	add	r28, r28
 14a:	dd 1f       	adc	r29, r29
 14c:	cc 0f       	add	r28, r28
 14e:	dd 1f       	adc	r29, r29
 150:	c8 0f       	add	r28, r24
 152:	d9 1f       	adc	r29, r25
 154:	ca 01       	movw	r24, r20
 156:	8c 1b       	sub	r24, r28
 158:	9d 0b       	sbc	r25, r29
 15a:	ec 01       	movw	r28, r24
	int R2 = number%100/10;
 15c:	36 95       	lsr	r19
 15e:	27 95       	ror	r18
 160:	36 95       	lsr	r19
 162:	27 95       	ror	r18
 164:	ab e7       	ldi	r26, 0x7B	; 123
 166:	b4 e1       	ldi	r27, 0x14	; 20
 168:	0e 94 89 01 	call	0x312	; 0x312 <__umulhisi3>
 16c:	9c 01       	movw	r18, r24
 16e:	36 95       	lsr	r19
 170:	27 95       	ror	r18
 172:	64 e6       	ldi	r22, 0x64	; 100
 174:	62 9f       	mul	r22, r18
 176:	c0 01       	movw	r24, r0
 178:	63 9f       	mul	r22, r19
 17a:	90 0d       	add	r25, r0
 17c:	11 24       	eor	r1, r1
 17e:	9a 01       	movw	r18, r20
 180:	28 1b       	sub	r18, r24
 182:	39 0b       	sbc	r19, r25
 184:	ad ec       	ldi	r26, 0xCD	; 205
 186:	bc ec       	ldi	r27, 0xCC	; 204
 188:	0e 94 89 01 	call	0x312	; 0x312 <__umulhisi3>
 18c:	8c 01       	movw	r16, r24
 18e:	16 95       	lsr	r17
 190:	07 95       	ror	r16
 192:	16 95       	lsr	r17
 194:	07 95       	ror	r16
 196:	16 95       	lsr	r17
 198:	07 95       	ror	r16
	int R1 = number%1000/100;
 19a:	fa 01       	movw	r30, r20
 19c:	f6 95       	lsr	r31
 19e:	e7 95       	ror	r30
 1a0:	f6 95       	lsr	r31
 1a2:	e7 95       	ror	r30
 1a4:	f6 95       	lsr	r31
 1a6:	e7 95       	ror	r30
 1a8:	9f 01       	movw	r18, r30
 1aa:	a5 ec       	ldi	r26, 0xC5	; 197
 1ac:	b0 e2       	ldi	r27, 0x20	; 32
 1ae:	0e 94 89 01 	call	0x312	; 0x312 <__umulhisi3>
 1b2:	92 95       	swap	r25
 1b4:	82 95       	swap	r24
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	89 27       	eor	r24, r25
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	89 27       	eor	r24, r25
 1be:	68 ee       	ldi	r22, 0xE8	; 232
 1c0:	73 e0       	ldi	r23, 0x03	; 3
 1c2:	86 9f       	mul	r24, r22
 1c4:	90 01       	movw	r18, r0
 1c6:	87 9f       	mul	r24, r23
 1c8:	30 0d       	add	r19, r0
 1ca:	96 9f       	mul	r25, r22
 1cc:	30 0d       	add	r19, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	ca 01       	movw	r24, r20
 1d2:	82 1b       	sub	r24, r18
 1d4:	93 0b       	sbc	r25, r19
 1d6:	9c 01       	movw	r18, r24
 1d8:	36 95       	lsr	r19
 1da:	27 95       	ror	r18
 1dc:	36 95       	lsr	r19
 1de:	27 95       	ror	r18
 1e0:	ab e7       	ldi	r26, 0x7B	; 123
 1e2:	b4 e1       	ldi	r27, 0x14	; 20
 1e4:	0e 94 89 01 	call	0x312	; 0x312 <__umulhisi3>
 1e8:	7c 01       	movw	r14, r24
 1ea:	f6 94       	lsr	r15
 1ec:	e7 94       	ror	r14
	int R0 = number/1000;
 1ee:	9f 01       	movw	r18, r30
 1f0:	a5 ec       	ldi	r26, 0xC5	; 197
 1f2:	b0 e2       	ldi	r27, 0x20	; 32
 1f4:	0e 94 89 01 	call	0x312	; 0x312 <__umulhisi3>
 1f8:	92 95       	swap	r25
 1fa:	82 95       	swap	r24
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	89 27       	eor	r24, r25
 200:	9f 70       	andi	r25, 0x0F	; 15
 202:	89 27       	eor	r24, r25

	if(i==0){
 204:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20c:	23 2b       	or	r18, r19
 20e:	71 f4       	brne	.+28     	; 0x22c <ledprint+0x114>
		segchar(R0);
 210:	0e 94 52 00 	call	0xa4	; 0xa4 <segchar>
		PORTB=PORTB0;
 214:	15 b8       	out	0x05, r1	; 5
		PORTB|=(1<<PORTB);	
 216:	25 b1       	in	r18, 0x05	; 5
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <ledprint+0x10a>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	2a 95       	dec	r18
 224:	e2 f7       	brpl	.-8      	; 0x21e <ledprint+0x106>
 226:	95 b1       	in	r25, 0x05	; 5
 228:	89 2b       	or	r24, r25
 22a:	85 b9       	out	0x05, r24	; 5
	}
	if(i==1){
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 230:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	39 f4       	brne	.+14     	; 0x246 <ledprint+0x12e>
		segchar(R1);
 238:	8e 2d       	mov	r24, r14
 23a:	0e 94 52 00 	call	0xa4	; 0xa4 <segchar>
		PORTB=PORTB0;
 23e:	15 b8       	out	0x05, r1	; 5
		PORTB|=(1<<PORTB1);	
 240:	85 b1       	in	r24, 0x05	; 5
 242:	82 60       	ori	r24, 0x02	; 2
 244:	85 b9       	out	0x05, r24	; 5
	}
	if(i==2){
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24e:	02 97       	sbiw	r24, 0x02	; 2
 250:	39 f4       	brne	.+14     	; 0x260 <ledprint+0x148>
		segchar(R2);
 252:	80 2f       	mov	r24, r16
 254:	0e 94 52 00 	call	0xa4	; 0xa4 <segchar>
		PORTB=PORTB0;
 258:	15 b8       	out	0x05, r1	; 5
		PORTB|=(1<<PORTB2);
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	85 b9       	out	0x05, r24	; 5
	}
	if(i==3){
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 264:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 268:	03 97       	sbiw	r24, 0x03	; 3
 26a:	39 f4       	brne	.+14     	; 0x27a <ledprint+0x162>
		segchar(R3);
 26c:	8c 2f       	mov	r24, r28
 26e:	0e 94 52 00 	call	0xa4	; 0xa4 <segchar>
		PORTB=PORTB0;
 272:	15 b8       	out	0x05, r1	; 5
		PORTB|=(1<<PORTB3);
 274:	85 b1       	in	r24, 0x05	; 5
 276:	88 60       	ori	r24, 0x08	; 8
 278:	85 b9       	out	0x05, r24	; 5
	}
	i++;
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 288:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(i>=4){
 28c:	04 97       	sbiw	r24, 0x04	; 4
 28e:	24 f0       	brlt	.+8      	; 0x298 <ledprint+0x180>
		i=0;
 290:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 294:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	08 95       	ret

000002a6 <__vector_11>:
}
//--------------------------------------------

//--------------------------------------------
ISR (TIMER1_COMPA_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	ledprint(4321);
 2c8:	81 ee       	ldi	r24, 0xE1	; 225
 2ca:	90 e1       	ldi	r25, 0x10	; 16
 2cc:	0e 94 8c 00 	call	0x118	; 0x118 <ledprint>
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <main>:


int main(void)
{
	
	DDRD = 0xFF;
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 2f6:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0b00001111;
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
 2fc:	15 b8       	out	0x05, r1	; 5

	timer_init();
 2fe:	0e 94 79 00 	call	0xf2	; 0xf2 <timer_init>
	sei();
 302:	78 94       	sei
 304:	ff cf       	rjmp	.-2      	; 0x304 <main+0x12>

00000306 <__tablejump2__>:
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	05 90       	lpm	r0, Z+
 30c:	f4 91       	lpm	r31, Z
 30e:	e0 2d       	mov	r30, r0
 310:	09 94       	ijmp

00000312 <__umulhisi3>:
 312:	a2 9f       	mul	r26, r18
 314:	b0 01       	movw	r22, r0
 316:	b3 9f       	mul	r27, r19
 318:	c0 01       	movw	r24, r0
 31a:	a3 9f       	mul	r26, r19
 31c:	70 0d       	add	r23, r0
 31e:	81 1d       	adc	r24, r1
 320:	11 24       	eor	r1, r1
 322:	91 1d       	adc	r25, r1
 324:	b2 9f       	mul	r27, r18
 326:	70 0d       	add	r23, r0
 328:	81 1d       	adc	r24, r1
 32a:	11 24       	eor	r1, r1
 32c:	91 1d       	adc	r25, r1
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
