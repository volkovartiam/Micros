
Dinamic_IND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089c  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000750  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000239  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	81 00       	.word	0x0081	; ????
  6a:	66 00       	.word	0x0066	; ????
  6c:	69 00       	.word	0x0069	; ????
  6e:	6c 00       	.word	0x006c	; ????
  70:	6f 00       	.word	0x006f	; ????
  72:	72 00       	.word	0x0072	; ????
  74:	75 00       	.word	0x0075	; ????
  76:	78 00       	.word	0x0078	; ????
  78:	7b 00       	.word	0x007b	; ????
  7a:	7e 00       	.word	0x007e	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e1       	ldi	r30, 0x16	; 22
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 30       	cpi	r26, 0x02	; 2
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  b2:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <segchar>:
void timer_ini(void)
{
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
	TIMSK1 |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
	OCR1AH = 0b00001111; //записываем в регистр число для сравнения
	OCR1AL = 0b01000010;
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	91 05       	cpc	r25, r1
  c0:	10 f5       	brcc	.+68     	; 0x106 <segchar+0x4c>
  c2:	fc 01       	movw	r30, r24
  c4:	ec 5c       	subi	r30, 0xCC	; 204
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__tablejump2__>
  cc:	89 ef       	ldi	r24, 0xF9	; 249
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	08 95       	ret
  d2:	84 ea       	ldi	r24, 0xA4	; 164
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	08 95       	ret
  d8:	80 eb       	ldi	r24, 0xB0	; 176
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	08 95       	ret
  de:	89 e9       	ldi	r24, 0x99	; 153
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	08 95       	ret
  e4:	82 e9       	ldi	r24, 0x92	; 146
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	08 95       	ret
  ea:	82 e8       	ldi	r24, 0x82	; 130
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	08 95       	ret
  f0:	88 ef       	ldi	r24, 0xF8	; 248
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	08 95       	ret
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	08 95       	ret
  fc:	80 e9       	ldi	r24, 0x90	; 144
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	08 95       	ret
 102:	80 ec       	ldi	r24, 0xC0	; 192
 104:	8b b9       	out	0x0b, r24	; 11
 106:	08 95       	ret

00000108 <ledprint>:
}


void ledprint(int number)
{
	int R0 = number%10;
 108:	6a e0       	ldi	r22, 0x0A	; 10
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <__divmodhi4>
	int R2 = number%1000/100;
	int R3 = number/1000;

	int delayTimer = 5;
	
	segchar(R0);
 110:	0e 94 5d 00 	call	0xba	; 0xba <segchar>
	PORTB&=~(1<<PORTB0);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	85 b9       	out	0x05, r24	; 5
	PORTB|=(1<<PORTB0);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	81 ee       	ldi	r24, 0xE1	; 225
 122:	94 e0       	ldi	r25, 0x04	; 4
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <ledprint+0x1c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <ledprint+0x22>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <change_i>:
	*/
}


void change_i(){
	if(i >= 9999){
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	8f 30       	cpi	r24, 0x0F	; 15
 138:	27 e2       	ldi	r18, 0x27	; 39
 13a:	92 07       	cpc	r25, r18
 13c:	2c f0       	brlt	.+10     	; 0x148 <change_i+0x1a>
		i = 0;
 13e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 142:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 146:	08 95       	ret
		} else {
		i++;
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	08 95       	ret

00000154 <__vector_11>:
}
//--------------------------------------------

//--------------------------------------------
ISR (TIMER1_COMPA_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
	ledprint(i);
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	0e 94 84 00 	call	0x108	; 0x108 <ledprint>
	change_i();
 182:	0e 94 97 00 	call	0x12e	; 0x12e <change_i>
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <main>:


int main(void)
{
	
	DDRD = 0xFF;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 1ac:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0b00001111;
 1ae:	8f e0       	ldi	r24, 0x0F	; 15
 1b0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
 1b2:	15 b8       	out	0x05, r1	; 5
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <main+0xc>

000001b6 <__divmodhi4>:
 1b6:	97 fb       	bst	r25, 7
 1b8:	07 2e       	mov	r0, r23
 1ba:	16 f4       	brtc	.+4      	; 0x1c0 <__divmodhi4+0xa>
 1bc:	00 94       	com	r0
 1be:	07 d0       	rcall	.+14     	; 0x1ce <__divmodhi4_neg1>
 1c0:	77 fd       	sbrc	r23, 7
 1c2:	09 d0       	rcall	.+18     	; 0x1d6 <__divmodhi4_neg2>
 1c4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__udivmodhi4>
 1c8:	07 fc       	sbrc	r0, 7
 1ca:	05 d0       	rcall	.+10     	; 0x1d6 <__divmodhi4_neg2>
 1cc:	3e f4       	brtc	.+14     	; 0x1dc <__divmodhi4_exit>

000001ce <__divmodhi4_neg1>:
 1ce:	90 95       	com	r25
 1d0:	81 95       	neg	r24
 1d2:	9f 4f       	sbci	r25, 0xFF	; 255
 1d4:	08 95       	ret

000001d6 <__divmodhi4_neg2>:
 1d6:	70 95       	com	r23
 1d8:	61 95       	neg	r22
 1da:	7f 4f       	sbci	r23, 0xFF	; 255

000001dc <__divmodhi4_exit>:
 1dc:	08 95       	ret

000001de <__tablejump2__>:
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	05 90       	lpm	r0, Z+
 1e4:	f4 91       	lpm	r31, Z
 1e6:	e0 2d       	mov	r30, r0
 1e8:	09 94       	ijmp

000001ea <__udivmodhi4>:
 1ea:	aa 1b       	sub	r26, r26
 1ec:	bb 1b       	sub	r27, r27
 1ee:	51 e1       	ldi	r21, 0x11	; 17
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <__udivmodhi4_ep>

000001f2 <__udivmodhi4_loop>:
 1f2:	aa 1f       	adc	r26, r26
 1f4:	bb 1f       	adc	r27, r27
 1f6:	a6 17       	cp	r26, r22
 1f8:	b7 07       	cpc	r27, r23
 1fa:	10 f0       	brcs	.+4      	; 0x200 <__udivmodhi4_ep>
 1fc:	a6 1b       	sub	r26, r22
 1fe:	b7 0b       	sbc	r27, r23

00000200 <__udivmodhi4_ep>:
 200:	88 1f       	adc	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	5a 95       	dec	r21
 206:	a9 f7       	brne	.-22     	; 0x1f2 <__udivmodhi4_loop>
 208:	80 95       	com	r24
 20a:	90 95       	com	r25
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
