
Static_IND_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001527  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  00001967  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000651  00000000  00000000  0000220d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000529  00000000  00000000  00002988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051a  00000000  00000000  00002eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000033cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  9e:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setAnodeOrCathode>:
void showDigits(){
	for (int i = 0; i < 10; i++){
		show_digit(i);
		_delay_ms(500);
	}
}
  a6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <X+0x1>
  aa:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <X>
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Y+0x1>
  b6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Y>
  ba:	08 95       	ret

000000bc <init_struct_default_segments>:

struct Segment def_seg;
/**/
void init_struct_default_segments(){
	
	def_seg._pin_A = pin_A;
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	10 82       	st	Z, r1
	def_seg._pin_B = pin_B;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	81 83       	std	Z+1, r24	; 0x01
	def_seg._pin_C = pin_C;
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	82 83       	std	Z+2, r24	; 0x02
	def_seg._pin_D = pin_D;
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	83 83       	std	Z+3, r24	; 0x03
	def_seg._pin_E = pin_E;
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	94 83       	std	Z+4, r25	; 0x04
	def_seg._pin_F = pin_F;
  d2:	95 e0       	ldi	r25, 0x05	; 5
  d4:	95 83       	std	Z+5, r25	; 0x05
	def_seg._pin_G = pin_G;
  d6:	96 e0       	ldi	r25, 0x06	; 6
  d8:	96 83       	std	Z+6, r25	; 0x06
	def_seg._pin_DP = pin_DP;
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	97 83       	std	Z+7, r25	; 0x07
		
	def_seg._PORT_A = PORT_A;
  de:	80 87       	std	Z+8, r24	; 0x08
	def_seg._PORT_B = PORT_B;
  e0:	81 87       	std	Z+9, r24	; 0x09
	def_seg._PORT_C = PORT_C;
  e2:	82 87       	std	Z+10, r24	; 0x0a
	def_seg._PORT_D = PORT_D;
  e4:	83 87       	std	Z+11, r24	; 0x0b
	def_seg._PORT_E = PORT_E;
  e6:	84 87       	std	Z+12, r24	; 0x0c
	def_seg._PORT_F = PORT_F;
  e8:	85 87       	std	Z+13, r24	; 0x0d
	def_seg._PORT_G = PORT_G;
  ea:	86 87       	std	Z+14, r24	; 0x0e
	def_seg._PORT_DP = PORT_DP;
  ec:	87 87       	std	Z+15, r24	; 0x0f
  ee:	08 95       	ret

000000f0 <init_seg_struct>:
}
/**/

//void init_seg_struct(struct Segment& def_seg){
//void init_seg_struct(struct Segment def_seg){
void init_seg_struct(){
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	
	set_Anode_Or_Cathode;
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <setAnodeOrCathode>
	
	#define set_struct(PORT, PIN) gpioInitPinModeAndValue( PORT,  PIN,  MODE_OUTPUT,  LOW )
	
	set_struct(def_seg._PORT_A,  def_seg._pin_A);
  f8:	c0 e0       	ldi	r28, 0x00	; 0
  fa:	d1 e0       	ldi	r29, 0x01	; 1
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	68 81       	ld	r22, Y
 102:	88 85       	ldd	r24, Y+8	; 0x08
 104:	0e 94 b1 00 	call	0x162	; 0x162 <gpioInitPinModeAndValue>
	set_struct(def_seg._PORT_B,  def_seg._pin_B);
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	69 81       	ldd	r22, Y+1	; 0x01
 10e:	89 85       	ldd	r24, Y+9	; 0x09
 110:	0e 94 b1 00 	call	0x162	; 0x162 <gpioInitPinModeAndValue>
	set_struct(def_seg._PORT_C,  def_seg._pin_C);
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	6a 81       	ldd	r22, Y+2	; 0x02
 11a:	8a 85       	ldd	r24, Y+10	; 0x0a
 11c:	0e 94 b1 00 	call	0x162	; 0x162 <gpioInitPinModeAndValue>
	set_struct(def_seg._PORT_D,  def_seg._pin_D);
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	6b 81       	ldd	r22, Y+3	; 0x03
 126:	8b 85       	ldd	r24, Y+11	; 0x0b
 128:	0e 94 b1 00 	call	0x162	; 0x162 <gpioInitPinModeAndValue>
	set_struct(def_seg._PORT_E,  def_seg._pin_E);
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	6c 81       	ldd	r22, Y+4	; 0x04
 132:	8c 85       	ldd	r24, Y+12	; 0x0c
 134:	0e 94 b1 00 	call	0x162	; 0x162 <gpioInitPinModeAndValue>
	set_struct(def_seg._PORT_F,  def_seg._pin_F);
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	6d 81       	ldd	r22, Y+5	; 0x05
 13e:	8d 85       	ldd	r24, Y+13	; 0x0d
 140:	0e 94 b1 00 	call	0x162	; 0x162 <gpioInitPinModeAndValue>
	set_struct(def_seg._PORT_G,  def_seg._pin_G);
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	6e 81       	ldd	r22, Y+6	; 0x06
 14a:	8e 85       	ldd	r24, Y+14	; 0x0e
 14c:	0e 94 b1 00 	call	0x162	; 0x162 <gpioInitPinModeAndValue>
	set_struct(def_seg._PORT_DP,  def_seg._pin_DP);
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	6f 81       	ldd	r22, Y+7	; 0x07
 156:	8f 85       	ldd	r24, Y+15	; 0x0f
 158:	0e 94 b1 00 	call	0x162	; 0x162 <gpioInitPinModeAndValue>
	gpioInitPinModeAndValue(def_seg._PORT_E,  def_seg._pin_E,  MODE_OUTPUT,  INIT_STATE);
	gpioInitPinModeAndValue(def_seg._PORT_F,  def_seg._pin_F,  MODE_OUTPUT,  INIT_STATE);
	gpioInitPinModeAndValue(def_seg._PORT_G,  def_seg._pin_G,  MODE_OUTPUT,  INIT_STATE);
	gpioInitPinModeAndValue(def_seg._PORT_DP, def_seg._pin_DP, MODE_OUTPUT,  INIT_STATE);
	*/
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <gpioInitPinModeAndValue>:
#include "GPIO.h"


void gpioInitPinModeAndValue(uint8_t port, uint8_t pin, uint8_t mode, uint8_t initValue) {
	
	switch(port) {
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	c9 f1       	breq	.+114    	; 0x1d8 <gpioInitPinModeAndValue+0x76>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	09 f4       	brne	.+2      	; 0x16c <gpioInitPinModeAndValue+0xa>
 16a:	69 c0       	rjmp	.+210    	; 0x23e <gpioInitPinModeAndValue+0xdc>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	09 f0       	breq	.+2      	; 0x172 <gpioInitPinModeAndValue+0x10>
 170:	98 c0       	rjmp	.+304    	; 0x2a2 <gpioInitPinModeAndValue+0x140>
		case PB:
			if(mode == MODE_INPUT) {
 172:	41 11       	cpse	r20, r1
 174:	0d c0       	rjmp	.+26     	; 0x190 <gpioInitPinModeAndValue+0x2e>
				DDRB = DDRB & (~(1 << pin));
 176:	34 b1       	in	r19, 0x04	; 4
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	06 2e       	mov	r0, r22
 17e:	02 c0       	rjmp	.+4      	; 0x184 <gpioInitPinModeAndValue+0x22>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <gpioInitPinModeAndValue+0x1e>
 188:	80 95       	com	r24
 18a:	83 23       	and	r24, r19
 18c:	84 b9       	out	0x04, r24	; 4
 18e:	0b c0       	rjmp	.+22     	; 0x1a6 <gpioInitPinModeAndValue+0x44>
				} else {
				DDRB = DDRB | (1 << pin);
 190:	34 b1       	in	r19, 0x04	; 4
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	06 2e       	mov	r0, r22
 198:	02 c0       	rjmp	.+4      	; 0x19e <gpioInitPinModeAndValue+0x3c>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <gpioInitPinModeAndValue+0x38>
 1a2:	83 2b       	or	r24, r19
 1a4:	84 b9       	out	0x04, r24	; 4
			}
			if(initValue) {
 1a6:	22 23       	and	r18, r18
 1a8:	59 f0       	breq	.+22     	; 0x1c0 <gpioInitPinModeAndValue+0x5e>
				PORTB = PORTB | (1 << pin);
 1aa:	25 b1       	in	r18, 0x05	; 5
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <gpioInitPinModeAndValue+0x54>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <gpioInitPinModeAndValue+0x50>
 1ba:	82 2b       	or	r24, r18
 1bc:	85 b9       	out	0x05, r24	; 5
 1be:	08 95       	ret
				} else {
				PORTB = PORTB & (~(1 << pin));
 1c0:	25 b1       	in	r18, 0x05	; 5
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <gpioInitPinModeAndValue+0x6a>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <gpioInitPinModeAndValue+0x66>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	85 b9       	out	0x05, r24	; 5
 1d6:	08 95       	ret
			}
			return;

		case PC:
			if(mode == MODE_INPUT) {
 1d8:	41 11       	cpse	r20, r1
 1da:	0d c0       	rjmp	.+26     	; 0x1f6 <gpioInitPinModeAndValue+0x94>
				DDRC = DDRC & (~(1 << pin));
 1dc:	37 b1       	in	r19, 0x07	; 7
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	06 2e       	mov	r0, r22
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <gpioInitPinModeAndValue+0x88>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <gpioInitPinModeAndValue+0x84>
 1ee:	80 95       	com	r24
 1f0:	83 23       	and	r24, r19
 1f2:	87 b9       	out	0x07, r24	; 7
 1f4:	0b c0       	rjmp	.+22     	; 0x20c <gpioInitPinModeAndValue+0xaa>
			} else {
				DDRC = DDRC | (1 << pin);
 1f6:	37 b1       	in	r19, 0x07	; 7
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	06 2e       	mov	r0, r22
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <gpioInitPinModeAndValue+0xa2>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <gpioInitPinModeAndValue+0x9e>
 208:	83 2b       	or	r24, r19
 20a:	87 b9       	out	0x07, r24	; 7
			}
			if(initValue) {
 20c:	22 23       	and	r18, r18
 20e:	59 f0       	breq	.+22     	; 0x226 <gpioInitPinModeAndValue+0xc4>
				PORTC = PORTC | (1 << pin);
 210:	28 b1       	in	r18, 0x08	; 8
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <gpioInitPinModeAndValue+0xba>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <gpioInitPinModeAndValue+0xb6>
 220:	82 2b       	or	r24, r18
 222:	88 b9       	out	0x08, r24	; 8
 224:	08 95       	ret
				} else {
				PORTC = PORTC & (~(1 << pin));
 226:	28 b1       	in	r18, 0x08	; 8
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <gpioInitPinModeAndValue+0xd0>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <gpioInitPinModeAndValue+0xcc>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	88 b9       	out	0x08, r24	; 8
 23c:	08 95       	ret
			}
			return;

		case PD:
			if(mode == MODE_INPUT) {
 23e:	41 11       	cpse	r20, r1
 240:	0d c0       	rjmp	.+26     	; 0x25c <gpioInitPinModeAndValue+0xfa>
				DDRD = DDRD & (~(1 << pin));
 242:	3a b1       	in	r19, 0x0a	; 10
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	06 2e       	mov	r0, r22
 24a:	02 c0       	rjmp	.+4      	; 0x250 <gpioInitPinModeAndValue+0xee>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	0a 94       	dec	r0
 252:	e2 f7       	brpl	.-8      	; 0x24c <gpioInitPinModeAndValue+0xea>
 254:	80 95       	com	r24
 256:	83 23       	and	r24, r19
 258:	8a b9       	out	0x0a, r24	; 10
 25a:	0b c0       	rjmp	.+22     	; 0x272 <gpioInitPinModeAndValue+0x110>
				} else {
				DDRD = DDRD | (1 << pin);
 25c:	3a b1       	in	r19, 0x0a	; 10
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	06 2e       	mov	r0, r22
 264:	02 c0       	rjmp	.+4      	; 0x26a <gpioInitPinModeAndValue+0x108>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <gpioInitPinModeAndValue+0x104>
 26e:	83 2b       	or	r24, r19
 270:	8a b9       	out	0x0a, r24	; 10
			}
			if(initValue) {
 272:	22 23       	and	r18, r18
 274:	59 f0       	breq	.+22     	; 0x28c <gpioInitPinModeAndValue+0x12a>
				PORTD = PORTD | (1 << pin);
 276:	2b b1       	in	r18, 0x0b	; 11
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <gpioInitPinModeAndValue+0x120>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <gpioInitPinModeAndValue+0x11c>
 286:	82 2b       	or	r24, r18
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	08 95       	ret
				} else {
				PORTD = PORTD & (~(1 << pin));
 28c:	2b b1       	in	r18, 0x0b	; 11
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <gpioInitPinModeAndValue+0x136>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <gpioInitPinModeAndValue+0x132>
 29c:	80 95       	com	r24
 29e:	82 23       	and	r24, r18
 2a0:	8b b9       	out	0x0b, r24	; 11
 2a2:	08 95       	ret

000002a4 <main>:
	show_segments_in_portD();
	init_seg();
	*/
	
	//struct Segment segment;
	init_struct_default_segments();
 2a4:	0e 94 5e 00 	call	0xbc	; 0xbc <init_struct_default_segments>
	init_seg_struct();
 2a8:	0e 94 78 00 	call	0xf0	; 0xf0 <init_seg_struct>
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <main+0x8>

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
