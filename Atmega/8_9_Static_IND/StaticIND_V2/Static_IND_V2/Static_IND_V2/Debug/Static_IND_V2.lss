
Static_IND_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8f  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083c  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000667  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006cb  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002b29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	08 01       	movw	r0, r16
  6a:	e7 00       	.word	0x00e7	; ????
  6c:	f0 00       	.word	0x00f0	; ????
  6e:	f3 00       	.word	0x00f3	; ????
  70:	f6 00       	.word	0x00f6	; ????
  72:	f9 00       	.word	0x00f9	; ????
  74:	fc 00       	.word	0x00fc	; ????
  76:	ff 00       	.word	0x00ff	; ????
  78:	02 01       	movw	r0, r4
  7a:	05 01       	movw	r0, r10

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e6       	ldi	r30, 0x6E	; 110
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  a2:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <gpioSetPinModeNew>:
	switch(port) {
		case PB: PINB |= (1 << pin);
		case PC: PINC |= (1 << pin);
		case PD: PIND |= (1 << pin);
	}
}
  aa:	44 23       	and	r20, r20
  ac:	39 f0       	breq	.+14     	; 0xbc <gpioSetPinModeNew+0x12>
  ae:	31 e0       	ldi	r19, 0x01	; 1
  b0:	06 2e       	mov	r0, r22
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <gpioSetPinModeNew+0xc>
  b4:	33 0f       	add	r19, r19
  b6:	0a 94       	dec	r0
  b8:	ea f7       	brpl	.-6      	; 0xb4 <gpioSetPinModeNew+0xa>
  ba:	01 c0       	rjmp	.+2      	; 0xbe <gpioSetPinModeNew+0x14>
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	22 23       	and	r18, r18
  c0:	31 f0       	breq	.+12     	; 0xce <gpioSetPinModeNew+0x24>
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <gpioSetPinModeNew+0x1e>
  c6:	99 0f       	add	r25, r25
  c8:	6a 95       	dec	r22
  ca:	ea f7       	brpl	.-6      	; 0xc6 <gpioSetPinModeNew+0x1c>
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <gpioSetPinModeNew+0x26>
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	59 f0       	breq	.+22     	; 0xea <gpioSetPinModeNew+0x40>
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	81 f0       	breq	.+32     	; 0xf8 <gpioSetPinModeNew+0x4e>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	a1 f4       	brne	.+40     	; 0x104 <gpioSetPinModeNew+0x5a>
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	38 2b       	or	r19, r24
  e0:	34 b9       	out	0x04, r19	; 4
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	98 2b       	or	r25, r24
  e6:	95 b9       	out	0x05, r25	; 5
  e8:	08 95       	ret
  ea:	87 b1       	in	r24, 0x07	; 7
  ec:	38 2b       	or	r19, r24
  ee:	37 b9       	out	0x07, r19	; 7
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	98 2b       	or	r25, r24
  f4:	98 b9       	out	0x08, r25	; 8
  f6:	08 95       	ret
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	38 2b       	or	r19, r24
  fc:	3a b9       	out	0x0a, r19	; 10
  fe:	8b b1       	in	r24, 0x0b	; 11
 100:	98 2b       	or	r25, r24
 102:	9b b9       	out	0x0b, r25	; 11
 104:	08 95       	ret

00000106 <gpioSetPin>:


void gpioSetPin(uint8_t port, uint8_t pin, uint8_t value) {
	switch(port) {
 106:	82 30       	cpi	r24, 0x02	; 2
 108:	f1 f0       	breq	.+60     	; 0x146 <gpioSetPin+0x40>
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	a9 f1       	breq	.+106    	; 0x178 <gpioSetPin+0x72>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	09 f0       	breq	.+2      	; 0x114 <gpioSetPin+0xe>
 112:	4a c0       	rjmp	.+148    	; 0x1a8 <gpioSetPin+0xa2>
		case PB: PORTB = ((value != 0) ? (PORTB | (1 << pin)) : (PORTB & (~(1 << pin)))); return;
 114:	44 23       	and	r20, r20
 116:	51 f0       	breq	.+20     	; 0x12c <gpioSetPin+0x26>
 118:	25 b1       	in	r18, 0x05	; 5
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <gpioSetPin+0x1e>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <gpioSetPin+0x1a>
 128:	82 2b       	or	r24, r18
 12a:	0b c0       	rjmp	.+22     	; 0x142 <gpioSetPin+0x3c>
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <gpioSetPin+0x32>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <gpioSetPin+0x2e>
 13c:	82 2f       	mov	r24, r18
 13e:	80 95       	com	r24
 140:	89 23       	and	r24, r25
 142:	85 b9       	out	0x05, r24	; 5
 144:	08 95       	ret
		case PC: PORTC = ((value != 0) ? (PORTC | (1 << pin)) : (PORTC & (~(1 << pin)))); return;
 146:	44 23       	and	r20, r20
 148:	51 f0       	breq	.+20     	; 0x15e <gpioSetPin+0x58>
 14a:	28 b1       	in	r18, 0x08	; 8
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <gpioSetPin+0x50>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <gpioSetPin+0x4c>
 15a:	82 2b       	or	r24, r18
 15c:	0b c0       	rjmp	.+22     	; 0x174 <gpioSetPin+0x6e>
 15e:	98 b1       	in	r25, 0x08	; 8
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <gpioSetPin+0x64>
 166:	22 0f       	add	r18, r18
 168:	33 1f       	adc	r19, r19
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <gpioSetPin+0x60>
 16e:	82 2f       	mov	r24, r18
 170:	80 95       	com	r24
 172:	89 23       	and	r24, r25
 174:	88 b9       	out	0x08, r24	; 8
 176:	08 95       	ret
		case PD: PORTD = ((value != 0) ? (PORTD | (1 << pin)) : (PORTD & (~(1 << pin)))); return;
 178:	44 23       	and	r20, r20
 17a:	51 f0       	breq	.+20     	; 0x190 <gpioSetPin+0x8a>
 17c:	2b b1       	in	r18, 0x0b	; 11
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <gpioSetPin+0x82>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <gpioSetPin+0x7e>
 18c:	82 2b       	or	r24, r18
 18e:	0b c0       	rjmp	.+22     	; 0x1a6 <gpioSetPin+0xa0>
 190:	9b b1       	in	r25, 0x0b	; 11
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <gpioSetPin+0x96>
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <gpioSetPin+0x92>
 1a0:	82 2f       	mov	r24, r18
 1a2:	80 95       	com	r24
 1a4:	89 23       	and	r24, r25
 1a6:	8b b9       	out	0x0b, r24	; 11
 1a8:	08 95       	ret

000001aa <gpioSetSEGMode>:
	int size = 	sizeof(segments)/sizeof(segments[0]);
	for (int i = 0; i < size; i++){
		PORTD = (1<<segments[i]);
		_delay_ms(500);
	}
}
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	0e 94 55 00 	call	0xaa	; 0xaa <gpioSetPinModeNew>
 1b2:	08 95       	ret

000001b4 <gpioSetSEG>:
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	0e 94 83 00 	call	0x106	; 0x106 <gpioSetPin>
 1ba:	08 95       	ret

000001bc <segchar>:
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	8a 30       	cpi	r24, 0x0A	; 10
 1c0:	91 05       	cpc	r25, r1
 1c2:	40 f5       	brcc	.+80     	; 0x214 <segchar+0x58>
 1c4:	fc 01       	movw	r30, r24
 1c6:	ec 5c       	subi	r30, 0xCC	; 204
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__tablejump2__>
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <gpioSetSEG>
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <gpioSetSEG>
 1de:	08 95       	ret
 1e0:	84 ea       	ldi	r24, 0xA4	; 164
 1e2:	8b b9       	out	0x0b, r24	; 11
 1e4:	08 95       	ret
 1e6:	80 eb       	ldi	r24, 0xB0	; 176
 1e8:	8b b9       	out	0x0b, r24	; 11
 1ea:	08 95       	ret
 1ec:	89 e9       	ldi	r24, 0x99	; 153
 1ee:	8b b9       	out	0x0b, r24	; 11
 1f0:	08 95       	ret
 1f2:	82 e9       	ldi	r24, 0x92	; 146
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	08 95       	ret
 1f8:	82 e8       	ldi	r24, 0x82	; 130
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	08 95       	ret
 1fe:	88 ef       	ldi	r24, 0xF8	; 248
 200:	8b b9       	out	0x0b, r24	; 11
 202:	08 95       	ret
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	8b b9       	out	0x0b, r24	; 11
 208:	08 95       	ret
 20a:	80 e9       	ldi	r24, 0x90	; 144
 20c:	8b b9       	out	0x0b, r24	; 11
 20e:	08 95       	ret
 210:	80 ec       	ldi	r24, 0xC0	; 192
 212:	8b b9       	out	0x0b, r24	; 11
 214:	08 95       	ret

00000216 <main>:


int main(void)
{

	init_seg_A;
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gpioSetSEGMode>
	init_seg_B;
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gpioSetSEGMode>
	init_seg_C;
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gpioSetSEGMode>
	init_seg_D;
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gpioSetSEGMode>
	init_seg_E;
 236:	64 e0       	ldi	r22, 0x04	; 4
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gpioSetSEGMode>
	init_seg_F;
 23e:	65 e0       	ldi	r22, 0x05	; 5
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gpioSetSEGMode>
	init_seg_G;
 246:	66 e0       	ldi	r22, 0x06	; 6
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gpioSetSEGMode>
	init_seg_DOT;
 24e:	67 e0       	ldi	r22, 0x07	; 7
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gpioSetSEGMode>
	
	//show_segments();

    while (1) 
    {
		segchar(1);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 de 00 	call	0x1bc	; 0x1bc <segchar>
 25c:	fc cf       	rjmp	.-8      	; 0x256 <main+0x40>

0000025e <__tablejump2__>:
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	05 90       	lpm	r0, Z+
 264:	f4 91       	lpm	r31, Z
 266:	e0 2d       	mov	r30, r0
 268:	09 94       	ijmp

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
