
StaticIND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000776  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d4  00000000  00000000  000009a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f7  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a2  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019d  00000000  00000000  00001762  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	6e 00       	.word	0x006e	; ????
  6a:	53 00       	.word	0x0053	; ????
  6c:	56 00       	.word	0x0056	; ????
  6e:	59 00       	.word	0x0059	; ????
  70:	5c 00       	.word	0x005c	; ????
  72:	5f 00       	.word	0x005f	; ????
  74:	62 00       	.word	0x0062	; ????
  76:	65 00       	.word	0x0065	; ????
  78:	68 00       	.word	0x0068	; ????
  7a:	6b 00       	.word	0x006b	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8c:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <segchar>:

void segchar(unsigned char seg);
void showDigits(void);

void segchar(unsigned char seg){
	switch (seg)
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	91 05       	cpc	r25, r1
  9a:	10 f5       	brcc	.+68     	; 0xe0 <segchar+0x4c>
  9c:	fc 01       	movw	r30, r24
  9e:	ec 5c       	subi	r30, 0xCC	; 204
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	0c 94 94 00 	jmp	0x128	; 0x128 <__tablejump2__>
	{
		case 1: PORTD = 0b11111001; break;
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	08 95       	ret
		case 2: PORTD = 0b10100100; break;
  ac:	84 ea       	ldi	r24, 0xA4	; 164
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret
		case 3: PORTD = 0b10110000; break;
  b2:	80 eb       	ldi	r24, 0xB0	; 176
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret
		case 4: PORTD = 0b10011001; break;
  b8:	89 e9       	ldi	r24, 0x99	; 153
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	08 95       	ret
		case 5: PORTD = 0b10010010; break;
  be:	82 e9       	ldi	r24, 0x92	; 146
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	08 95       	ret
		case 6: PORTD = 0b10000010; break;
  c4:	82 e8       	ldi	r24, 0x82	; 130
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	08 95       	ret
		case 7: PORTD = 0b11111000; break;
  ca:	88 ef       	ldi	r24, 0xF8	; 248
  cc:	8b b9       	out	0x0b, r24	; 11
  ce:	08 95       	ret
		case 8: PORTD = 0b10000000; break;
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	08 95       	ret
		case 9: PORTD = 0b10010000; break;
  d6:	80 e9       	ldi	r24, 0x90	; 144
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	08 95       	ret
		case 0: PORTD = 0b11000000; break;
  dc:	80 ec       	ldi	r24, 0xC0	; 192
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	08 95       	ret

000000e2 <showDigits>:
	}
}
/**/
void showDigits(void){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
	for (int i = 0; i < 10; i++){
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	0d c0       	rjmp	.+26     	; 0x106 <showDigits+0x24>
		segchar(i);
  ec:	8c 2f       	mov	r24, r28
  ee:	0e 94 4a 00 	call	0x94	; 0x94 <segchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	2f e9       	ldi	r18, 0x9F	; 159
  f4:	86 e8       	ldi	r24, 0x86	; 134
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <showDigits+0x16>
 100:	00 c0       	rjmp	.+0      	; 0x102 <showDigits+0x20>
 102:	00 00       	nop
		case 0: PORTD = 0b11000000; break;
	}
}
/**/
void showDigits(void){
	for (int i = 0; i < 10; i++){
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	ca 30       	cpi	r28, 0x0A	; 10
 108:	d1 05       	cpc	r29, r1
 10a:	84 f3       	brlt	.-32     	; 0xec <showDigits+0xa>
		segchar(i);
		_delay_ms(500);
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <main>:


int main(void)
{
    
	DDRD = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000000;
 116:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0x00;
 118:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b00000001;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	85 b9       	out	0x05, r24	; 5
	
    while (1) 
    {
		
		if( !(PINB&0b00000001) ){
 11e:	18 99       	sbic	0x03, 0	; 3
 120:	fe cf       	rjmp	.-4      	; 0x11e <main+0xc>
			showDigits();
 122:	0e 94 71 00 	call	0xe2	; 0xe2 <showDigits>
 126:	fb cf       	rjmp	.-10     	; 0x11e <main+0xc>

00000128 <__tablejump2__>:
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	05 90       	lpm	r0, Z+
 12e:	f4 91       	lpm	r31, Z
 130:	e0 2d       	mov	r30, r0
 132:	09 94       	ijmp

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
