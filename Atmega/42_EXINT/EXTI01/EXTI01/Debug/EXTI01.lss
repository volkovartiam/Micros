
EXTI01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000f2  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008e  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012b  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000157  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005e  00000000  00000000  00000663  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000006c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_2>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <port_ini>:
#include <avr/interrupt.h>
//-----------------------------------------------------
void port_ini(void)
{
	//Включим ножку светодиода на выход
	DDRB |= 0b00100000;
  80:	25 9a       	sbi	0x04, 5	; 4
	//Включим ножки INT0 и INT1 (PD2 и PD3)  на вход
	DDRD &= ~(0b00001100);
  82:	8a b1       	in	r24, 0x0a	; 10
  84:	83 7f       	andi	r24, 0xF3	; 243
  86:	8a b9       	out	0x0a, r24	; 10
	//Подтянем резистор на ножках INT0 и INT1 (PD2 и PD3) к питанию
	PORTD |= 0b00001100;
  88:	8b b1       	in	r24, 0x0b	; 11
  8a:	8c 60       	ori	r24, 0x0C	; 12
  8c:	8b b9       	out	0x0b, r24	; 11
  8e:	08 95       	ret

00000090 <int_ini>:
}
//-----------------------------------------------------
void int_ini(void)
{
	//включим прерывания INT0 и INT1 по нисходящему фронту
	EICRA|=(1<<ISC11)|(1<<ISC01);
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8a 60       	ori	r24, 0x0A	; 10
  98:	80 83       	st	Z, r24
	//разрешим внешние прерывания INT0 и INT1
	EIMSK|=(1<<INT1)|(1<<INT0);	
  9a:	8d b3       	in	r24, 0x1d	; 29
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	8d bb       	out	0x1d, r24	; 29
  a0:	08 95       	ret

000000a2 <__vector_1>:
}
//-----------------------------------------------------
ISR(INT0_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
	PORTB |= 0b00100000;	
  ac:	2d 9a       	sbi	0x05, 5	; 5
}
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_2>:
//-----------------------------------------------------
ISR(INT1_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
	PORTB &= ~(0b00100000);
  c2:	2d 98       	cbi	0x05, 5	; 5
}
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:
//-----------------------------------------------------
int main(void)
{
    port_ini();
  ce:	0e 94 40 00 	call	0x80	; 0x80 <port_ini>
	int_ini();
  d2:	0e 94 48 00 	call	0x90	; 0x90 <int_ini>
	sei();
  d6:	78 94       	sei
    while (1) 
    {
    }
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0xa>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
