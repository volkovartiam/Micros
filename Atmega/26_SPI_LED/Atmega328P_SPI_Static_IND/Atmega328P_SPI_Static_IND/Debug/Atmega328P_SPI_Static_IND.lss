
Atmega328P_SPI_Static_IND.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8d  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080d  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000412  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000236  00000000  00000000  00001e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	b0 00       	.word	0x00b0	; ????
  6a:	83 00       	.word	0x0083	; ????
  6c:	88 00       	.word	0x0088	; ????
  6e:	8d 00       	.word	0x008d	; ????
  70:	92 00       	.word	0x0092	; ????
  72:	97 00       	.word	0x0097	; ????
  74:	9c 00       	.word	0x009c	; ????
  76:	a1 00       	.word	0x00a1	; ????
  78:	a6 00       	.word	0x00a6	; ????
  7a:	ab 00       	.word	0x00ab	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:


int main(void)
{
	
	SPI_init();
  94:	0e 94 b5 00 	call	0x16a	; 0x16a <SPI_init>
	
	SPI_transmit(0xFF);
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	89 e6       	ldi	r24, 0x69	; 105
  a2:	98 e1       	ldi	r25, 0x18	; 24
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x10>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1a>
  ae:	00 00       	nop
	_delay_ms(500);
	
	SPI_transmit(0x00);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_transmit>
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	89 e6       	ldi	r24, 0x69	; 105
  ba:	98 e1       	ldi	r25, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x28>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x32>
  c6:	00 00       	nop
	_delay_ms(500);

    while (1) 
    {
		for(uint8_t i=0; i<10; i++)
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	0e c0       	rjmp	.+28     	; 0xe8 <main+0x54>
		{
			segchar(i);
  cc:	8c 2f       	mov	r24, r28
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 7b 00 	call	0xf6	; 0xf6 <segchar>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x46>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x50>
  e4:	00 00       	nop
	SPI_transmit(0x00);
	_delay_ms(500);

    while (1) 
    {
		for(uint8_t i=0; i<10; i++)
  e6:	cf 5f       	subi	r28, 0xFF	; 255
  e8:	ca 30       	cpi	r28, 0x0A	; 10
  ea:	80 f3       	brcs	.-32     	; 0xcc <main+0x38>
  ec:	ed cf       	rjmp	.-38     	; 0xc8 <main+0x34>

000000ee <displayNumber>:

#include "segment_ind.h"


void displayNumber(int number){
	SPI_transmit(~number);
  ee:	80 95       	com	r24
  f0:	0e 94 bf 00 	call	0x17e	; 0x17e <SPI_transmit>
  f4:	08 95       	ret

000000f6 <segchar>:
}


void segchar(int seg)
{
	switch (seg)
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	91 05       	cpc	r25, r1
  fa:	b0 f5       	brcc	.+108    	; 0x168 <segchar+0x72>
  fc:	fc 01       	movw	r30, r24
  fe:	ec 5c       	subi	r30, 0xCC	; 204
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	0c 94 ca 00 	jmp	0x194	; 0x194 <__tablejump2__>
	{
		case 1:
		displayNumber(249);
 106:	89 ef       	ldi	r24, 0xF9	; 249
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 10e:	08 95       	ret
		case 2:
		displayNumber(164);
 110:	84 ea       	ldi	r24, 0xA4	; 164
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 118:	08 95       	ret
		case 3:
		displayNumber(176);
 11a:	80 eb       	ldi	r24, 0xB0	; 176
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 122:	08 95       	ret
		case 4:
		displayNumber(153);
 124:	89 e9       	ldi	r24, 0x99	; 153
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 12c:	08 95       	ret
		case 5:
		displayNumber(146);
 12e:	82 e9       	ldi	r24, 0x92	; 146
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 136:	08 95       	ret
		case 6:
		displayNumber(130);
 138:	82 e8       	ldi	r24, 0x82	; 130
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 140:	08 95       	ret
		case 7:
		displayNumber(248);
 142:	88 ef       	ldi	r24, 0xF8	; 248
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 14a:	08 95       	ret
		case 8:
		displayNumber(128);
 14c:	80 e8       	ldi	r24, 0x80	; 128
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 154:	08 95       	ret
		case 9:
		displayNumber(144);
 156:	80 e9       	ldi	r24, 0x90	; 144
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
		break;
 15e:	08 95       	ret
		case 0:
		displayNumber(192);
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 77 00 	call	0xee	; 0xee <displayNumber>
 168:	08 95       	ret

0000016a <SPI_init>:
 */ 

#include "spi.h"

void SPI_init(){
	SPI_DDR |= ((1<<SS_PIN)|(1<<MOSI_PIN)|(1<<SCK_PIN));
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	8c 62       	ori	r24, 0x2C	; 44
 16e:	84 b9       	out	0x04, r24	; 4
	SPI_PORT &= ~((1<<SS_PIN)|(1<<MOSI_PIN)|(1<<SCK_PIN));
 170:	85 b1       	in	r24, 0x05	; 5
 172:	83 7d       	andi	r24, 0xD3	; 211
 174:	85 b9       	out	0x05, r24	; 5
	
	SPCR |= (SPIE_Interrupt_Disable|SPE_Enable|MSB_Order|Master_Select|CPOL_Rising|CPHA_0|F_OSC_4);
 176:	8c b5       	in	r24, 0x2c	; 44
 178:	80 65       	ori	r24, 0x50	; 80
 17a:	8c bd       	out	0x2c, r24	; 44
 17c:	08 95       	ret

0000017e <SPI_transmit>:
}


void SPI_transmit(uint8_t data_to_transfer)
{
	SPI_DATA_TRANSFER = data_to_transfer;
 17e:	8e bd       	out	0x2e, r24	; 46
	while (Wait_Transmission_Complete){}
 180:	0d b4       	in	r0, 0x2d	; 45
 182:	07 fe       	sbrs	r0, 7
 184:	fd cf       	rjmp	.-6      	; 0x180 <SPI_transmit+0x2>
	SPI_PORT |= (1<<SS_PIN);
 186:	85 b1       	in	r24, 0x05	; 5
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	85 b9       	out	0x05, r24	; 5
	SPI_PORT &= ~(1<<SS_PIN);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8b 7f       	andi	r24, 0xFB	; 251
 190:	85 b9       	out	0x05, r24	; 5
 192:	08 95       	ret

00000194 <__tablejump2__>:
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	05 90       	lpm	r0, Z+
 19a:	f4 91       	lpm	r31, Z
 19c:	e0 2d       	mov	r30, r0
 19e:	09 94       	ijmp

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
