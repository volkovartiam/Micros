
MYSPI595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000194  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e2  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015f  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000162  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001f  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000006c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	37 c0       	rjmp	.+110    	; 0xa4 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include "main.h"

int main(void)
{
	unsigned char i=0;
	DDRB |= ((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); // Ножки SPI на выход
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	8c 62       	ori	r24, 0x2C	; 44
  3c:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5)); //низкий уровень
  3e:	88 b3       	in	r24, 0x18	; 24
  40:	83 7d       	andi	r24, 0xD3	; 211
  42:	88 bb       	out	0x18, r24	; 24
	SPCR = ((1<<SPE)|(1<<MSTR)); //Включим шину, объявим ведущим
  44:	80 e5       	ldi	r24, 0x50	; 80
  46:	8d b9       	out	0x0d, r24	; 13
	SPDR = 0b00000000;
  48:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR&(1<<SPIF)));
  4a:	77 9b       	sbis	0x0e, 7	; 14
  4c:	fe cf       	rjmp	.-4      	; 0x4a <__SREG__+0xb>
	PORTB |= (1<<PORTB2);
  4e:	c2 9a       	sbi	0x18, 2	; 24
	PORTB &= ~(1<<PORTB2);
  50:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  52:	2f ef       	ldi	r18, 0xFF	; 255
  54:	33 ed       	ldi	r19, 0xD3	; 211
  56:	80 e3       	ldi	r24, 0x30	; 48
  58:	21 50       	subi	r18, 0x01	; 1
  5a:	30 40       	sbci	r19, 0x00	; 0
  5c:	80 40       	sbci	r24, 0x00	; 0
  5e:	e1 f7       	brne	.-8      	; 0x58 <__SREG__+0x19>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
	_delay_ms(2000);
	SPDR = 0b11111111;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR&(1<<SPIF)));
  68:	77 9b       	sbis	0x0e, 7	; 14
  6a:	fe cf       	rjmp	.-4      	; 0x68 <__SREG__+0x29>
	PORTB |= (1<<PORTB2);
  6c:	c2 9a       	sbi	0x18, 2	; 24
	PORTB &= ~(1<<PORTB2);
  6e:	c2 98       	cbi	0x18, 2	; 24
  70:	9f ef       	ldi	r25, 0xFF	; 255
  72:	23 ed       	ldi	r18, 0xD3	; 211
  74:	30 e3       	ldi	r19, 0x30	; 48
  76:	91 50       	subi	r25, 0x01	; 1
  78:	20 40       	sbci	r18, 0x00	; 0
  7a:	30 40       	sbci	r19, 0x00	; 0
  7c:	e1 f7       	brne	.-8      	; 0x76 <__SREG__+0x37>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <__SREG__+0x41>
  80:	00 00       	nop
	_delay_ms(2000);
    while(1)
    {
		for(i=0;i<256;i++)
  82:	80 e0       	ldi	r24, 0x00	; 0
		{
 			SPDR = i;
  84:	8f b9       	out	0x0f, r24	; 15
			while (!(SPSR&(1<<SPIF)));
  86:	77 9b       	sbis	0x0e, 7	; 14
  88:	fe cf       	rjmp	.-4      	; 0x86 <__SREG__+0x47>
			PORTB |= (1<<PORTB2);
  8a:	c2 9a       	sbi	0x18, 2	; 24
			PORTB &= ~(1<<PORTB2);
  8c:	c2 98       	cbi	0x18, 2	; 24
  8e:	9f e7       	ldi	r25, 0x7F	; 127
  90:	28 e3       	ldi	r18, 0x38	; 56
  92:	31 e0       	ldi	r19, 0x01	; 1
  94:	91 50       	subi	r25, 0x01	; 1
  96:	20 40       	sbci	r18, 0x00	; 0
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <__SREG__+0x55>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <__SREG__+0x5f>
  9e:	00 00       	nop
	PORTB |= (1<<PORTB2);
	PORTB &= ~(1<<PORTB2);
	_delay_ms(2000);
    while(1)
    {
		for(i=0;i<256;i++)
  a0:	8f 5f       	subi	r24, 0xFF	; 255
 			SPDR = i;
			while (!(SPSR&(1<<SPIF)));
			PORTB |= (1<<PORTB2);
			PORTB &= ~(1<<PORTB2);
 			_delay_ms(50);
		}
  a2:	f0 cf       	rjmp	.-32     	; 0x84 <__SREG__+0x45>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
