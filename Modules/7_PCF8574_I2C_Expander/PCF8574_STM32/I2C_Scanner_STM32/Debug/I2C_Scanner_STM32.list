
I2C_Scanner_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004ba8  08004ba8  00005ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c10  08004c10  0000608c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c10  08004c10  0000608c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c10  08004c10  0000608c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c10  08004c10  00005c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08004c18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000008c  08004ca4  0000608c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004ca4  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fb8  00000000  00000000  000060b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001902  00000000  00000000  0001006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00011970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075f  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001633c  00000000  00000000  00012a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c44d  00000000  00000000  00028d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008078d  00000000  00000000  000351c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b594d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb4  00000000  00000000  000b5990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000b8544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b90 	.word	0x08004b90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08004b90 	.word	0x08004b90

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 faab 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f86b 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8fd 	bl	8000358 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8a3 	bl	80002a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8cf 	bl	8000304 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t i = 0, ret;
 8000166:	2300      	movs	r3, #0
 8000168:	71fb      	strb	r3, [r7, #7]
  HAL_Delay(500);
 800016a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800016e:	f000 faff 	bl	8000770 <HAL_Delay>

  /*-[ I2C Bus Scanning ]-*/
  HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 8000172:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000176:	221a      	movs	r2, #26
 8000178:	4925      	ldr	r1, [pc, #148]	@ (8000210 <main+0xc4>)
 800017a:	4826      	ldr	r0, [pc, #152]	@ (8000214 <main+0xc8>)
 800017c:	f003 fa84 	bl	8003688 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 8000180:	2301      	movs	r3, #1
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e036      	b.n	80001f4 <main+0xa8>
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 100);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	b29b      	uxth	r3, r3
 800018a:	005b      	lsls	r3, r3, #1
 800018c:	b299      	uxth	r1, r3
 800018e:	2364      	movs	r3, #100	@ 0x64
 8000190:	2203      	movs	r2, #3
 8000192:	4821      	ldr	r0, [pc, #132]	@ (8000218 <main+0xcc>)
 8000194:	f000 ffb2 	bl	80010fc <HAL_I2C_IsDeviceReady>
 8000198:	4603      	mov	r3, r0
 800019a:	71bb      	strb	r3, [r7, #6]
	  if (ret != HAL_OK) /* No ACK Received At That Address */
 800019c:	79bb      	ldrb	r3, [r7, #6]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d00e      	beq.n	80001c0 <main+0x74>
	  {
		  HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80001a2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80001a6:	2204      	movs	r2, #4
 80001a8:	491c      	ldr	r1, [pc, #112]	@ (800021c <main+0xd0>)
 80001aa:	481a      	ldr	r0, [pc, #104]	@ (8000214 <main+0xc8>)
 80001ac:	f003 fa6c 	bl	8003688 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, End, sizeof(End), 10000);
 80001b0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80001b4:	2203      	movs	r2, #3
 80001b6:	491a      	ldr	r1, [pc, #104]	@ (8000220 <main+0xd4>)
 80001b8:	4816      	ldr	r0, [pc, #88]	@ (8000214 <main+0xc8>)
 80001ba:	f003 fa65 	bl	8003688 <HAL_UART_Transmit>
 80001be:	e016      	b.n	80001ee <main+0xa2>
	  }
	  else if(ret == HAL_OK)
 80001c0:	79bb      	ldrb	r3, [r7, #6]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d113      	bne.n	80001ee <main+0xa2>
	  {
		  sprintf(Buffer, "0x%X", i);
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	461a      	mov	r2, r3
 80001ca:	4916      	ldr	r1, [pc, #88]	@ (8000224 <main+0xd8>)
 80001cc:	4816      	ldr	r0, [pc, #88]	@ (8000228 <main+0xdc>)
 80001ce:	f004 f82f 	bl	8004230 <siprintf>
		  HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 80001d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80001d6:	2219      	movs	r2, #25
 80001d8:	4913      	ldr	r1, [pc, #76]	@ (8000228 <main+0xdc>)
 80001da:	480e      	ldr	r0, [pc, #56]	@ (8000214 <main+0xc8>)
 80001dc:	f003 fa54 	bl	8003688 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, End, sizeof(End), 10000);
 80001e0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80001e4:	2203      	movs	r2, #3
 80001e6:	490e      	ldr	r1, [pc, #56]	@ (8000220 <main+0xd4>)
 80001e8:	480a      	ldr	r0, [pc, #40]	@ (8000214 <main+0xc8>)
 80001ea:	f003 fa4d 	bl	8003688 <HAL_UART_Transmit>
  for(i=1; i<128; i++)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	3301      	adds	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	dac4      	bge.n	8000186 <main+0x3a>
	  }
  }
  HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 80001fc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000200:	220b      	movs	r2, #11
 8000202:	490a      	ldr	r1, [pc, #40]	@ (800022c <main+0xe0>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <main+0xc8>)
 8000206:	f003 fa3f 	bl	8003688 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020a:	bf00      	nop
 800020c:	e7fd      	b.n	800020a <main+0xbe>
 800020e:	bf00      	nop
 8000210:	20000004 	.word	0x20000004
 8000214:	200000fc 	.word	0x200000fc
 8000218:	200000a8 	.word	0x200000a8
 800021c:	20000000 	.word	0x20000000
 8000220:	2000002c 	.word	0x2000002c
 8000224:	08004ba8 	.word	0x08004ba8
 8000228:	20000144 	.word	0x20000144
 800022c:	20000020 	.word	0x20000020

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b090      	sub	sp, #64	@ 0x40
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0318 	add.w	r3, r7, #24
 800023a:	2228      	movs	r2, #40	@ 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f004 f816 	bl	8004270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
 8000250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025e:	2300      	movs	r3, #0
 8000260:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fdae 	bl	8002dc8 <HAL_RCC_OscConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000272:	f000 f893 	bl	800039c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	230f      	movs	r3, #15
 8000278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 f81c 	bl	80032cc <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029a:	f000 f87f 	bl	800039c <Error_Handler>
  }
}
 800029e:	bf00      	nop
 80002a0:	3740      	adds	r7, #64	@ 0x40
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002ae:	4a13      	ldr	r2, [pc, #76]	@ (80002fc <MX_I2C1_Init+0x54>)
 80002b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002b4:	4a12      	ldr	r2, [pc, #72]	@ (8000300 <MX_I2C1_Init+0x58>)
 80002b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <MX_I2C1_Init+0x50>)
 80002e6:	f000 fdb1 	bl	8000e4c <HAL_I2C_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002f0:	f000 f854 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200000a8 	.word	0x200000a8
 80002fc:	40005400 	.word	0x40005400
 8000300:	000186a0 	.word	0x000186a0

08000304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000308:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 800030a:	4a12      	ldr	r2, [pc, #72]	@ (8000354 <MX_USART1_UART_Init+0x50>)
 800030c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800030e:	4b10      	ldr	r3, [pc, #64]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000310:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800031c:	4b0c      	ldr	r3, [pc, #48]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000328:	4b09      	ldr	r3, [pc, #36]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 800032a:	220c      	movs	r2, #12
 800032c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_USART1_UART_Init+0x4c>)
 800033c:	f003 f954 	bl	80035e8 <HAL_UART_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000346:	f000 f829 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000fc 	.word	0x200000fc
 8000354:	40013800 	.word	0x40013800

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_GPIO_Init+0x40>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <MX_GPIO_Init+0x40>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <MX_GPIO_Init+0x40>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <MX_GPIO_Init+0x40>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a07      	ldr	r2, [pc, #28]	@ (8000398 <MX_GPIO_Init+0x40>)
 800037c:	f043 0308 	orr.w	r3, r3, #8
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <MX_GPIO_Init+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0308 	and.w	r3, r3, #8
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <Error_Handler+0x8>

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <HAL_MspInit+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <HAL_MspInit+0x5c>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003de:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <HAL_MspInit+0x60>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	@ (8000408 <HAL_MspInit+0x60>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a1e      	ldr	r2, [pc, #120]	@ (80004a0 <HAL_I2C_MspInit+0x94>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d135      	bne.n	8000498 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800042c:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <HAL_I2C_MspInit+0x98>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a1c      	ldr	r2, [pc, #112]	@ (80004a4 <HAL_I2C_MspInit+0x98>)
 8000432:	f043 0308 	orr.w	r3, r3, #8
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <HAL_I2C_MspInit+0x98>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0308 	and.w	r3, r3, #8
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000444:	23c0      	movs	r3, #192	@ 0xc0
 8000446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000448:	2312      	movs	r3, #18
 800044a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000450:	2303      	movs	r3, #3
 8000452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	4813      	ldr	r0, [pc, #76]	@ (80004a8 <HAL_I2C_MspInit+0x9c>)
 800045c:	f000 fb7a 	bl	8000b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000460:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <HAL_I2C_MspInit+0x98>)
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	4a0f      	ldr	r2, [pc, #60]	@ (80004a4 <HAL_I2C_MspInit+0x98>)
 8000466:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800046a:	61d3      	str	r3, [r2, #28]
 800046c:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <HAL_I2C_MspInit+0x98>)
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2100      	movs	r1, #0
 800047c:	201f      	movs	r0, #31
 800047e:	f000 fa72 	bl	8000966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000482:	201f      	movs	r0, #31
 8000484:	f000 fa8b 	bl	800099e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000488:	2200      	movs	r2, #0
 800048a:	2100      	movs	r1, #0
 800048c:	2020      	movs	r0, #32
 800048e:	f000 fa6a 	bl	8000966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000492:	2020      	movs	r0, #32
 8000494:	f000 fa83 	bl	800099e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000498:	bf00      	nop
 800049a:	3720      	adds	r7, #32
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40005400 	.word	0x40005400
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010c00 	.word	0x40010c00

080004ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a20      	ldr	r2, [pc, #128]	@ (8000548 <HAL_UART_MspInit+0x9c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d139      	bne.n	8000540 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004cc:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <HAL_UART_MspInit+0xa0>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a1e      	ldr	r2, [pc, #120]	@ (800054c <HAL_UART_MspInit+0xa0>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <HAL_UART_MspInit+0xa0>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b19      	ldr	r3, [pc, #100]	@ (800054c <HAL_UART_MspInit+0xa0>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a18      	ldr	r2, [pc, #96]	@ (800054c <HAL_UART_MspInit+0xa0>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b16      	ldr	r3, [pc, #88]	@ (800054c <HAL_UART_MspInit+0xa0>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	2302      	movs	r3, #2
 8000504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000506:	2303      	movs	r3, #3
 8000508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	480f      	ldr	r0, [pc, #60]	@ (8000550 <HAL_UART_MspInit+0xa4>)
 8000512:	f000 fb1f 	bl	8000b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4809      	ldr	r0, [pc, #36]	@ (8000550 <HAL_UART_MspInit+0xa4>)
 800052c:	f000 fb12 	bl	8000b54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	2025      	movs	r0, #37	@ 0x25
 8000536:	f000 fa16 	bl	8000966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800053a:	2025      	movs	r0, #37	@ 0x25
 800053c:	f000 fa2f 	bl	800099e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40013800 	.word	0x40013800
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <NMI_Handler+0x4>

0800055c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <MemManage_Handler+0x4>

0800056c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <BusFault_Handler+0x4>

08000574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <UsageFault_Handler+0x4>

0800057c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a4:	f000 f8c8 	bl	8000738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80005b0:	4802      	ldr	r0, [pc, #8]	@ (80005bc <I2C1_EV_IRQHandler+0x10>)
 80005b2:	f000 fed1 	bl	8001358 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000a8 	.word	0x200000a8

080005c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <I2C1_ER_IRQHandler+0x10>)
 80005c6:	f001 f81a 	bl	80015fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000a8 	.word	0x200000a8

080005d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <USART1_IRQHandler+0x10>)
 80005da:	f003 f8d9 	bl	8003790 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000fc 	.word	0x200000fc

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f003 fe32 	bl	8004280 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	@ (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20002800 	.word	0x20002800
 8000648:	00000400 	.word	0x00000400
 800064c:	20000160 	.word	0x20000160
 8000650:	200002b0 	.word	0x200002b0

08000654 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000660:	f7ff fff8 	bl	8000654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000666:	490c      	ldr	r1, [pc, #48]	@ (8000698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <LoopFillZerobss+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a09      	ldr	r2, [pc, #36]	@ (80006a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800067c:	4c09      	ldr	r4, [pc, #36]	@ (80006a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068a:	f003 fdff 	bl	800428c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fd5d 	bl	800014c <main>
  bx lr
 8000692:	4770      	bx	lr
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800069c:	08004c18 	.word	0x08004c18
  ldr r2, =_sbss
 80006a0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80006a4:	200002b0 	.word	0x200002b0

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <HAL_Init+0x28>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a07      	ldr	r2, [pc, #28]	@ (80006d4 <HAL_Init+0x28>)
 80006b6:	f043 0310 	orr.w	r3, r3, #16
 80006ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f947 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f000 f808 	bl	80006d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c8:	f7ff fe6e 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40022000 	.word	0x40022000

080006d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <HAL_InitTick+0x54>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HAL_InitTick+0x58>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4619      	mov	r1, r3
 80006ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f95f 	bl	80009ba <HAL_SYSTICK_Config>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e00e      	b.n	8000724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	d80a      	bhi.n	8000722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800070c:	2200      	movs	r2, #0
 800070e:	6879      	ldr	r1, [r7, #4]
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f000 f927 	bl	8000966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000718:	4a06      	ldr	r2, [pc, #24]	@ (8000734 <HAL_InitTick+0x5c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
 8000720:	e000      	b.n	8000724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000030 	.word	0x20000030
 8000730:	20000038 	.word	0x20000038
 8000734:	20000034 	.word	0x20000034

08000738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <HAL_IncTick+0x1c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <HAL_IncTick+0x20>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a03      	ldr	r2, [pc, #12]	@ (8000758 <HAL_IncTick+0x20>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	20000038 	.word	0x20000038
 8000758:	20000164 	.word	0x20000164

0800075c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;
 8000760:	4b02      	ldr	r3, [pc, #8]	@ (800076c <HAL_GetTick+0x10>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000164 	.word	0x20000164

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff fff0 	bl	800075c <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000788:	d005      	beq.n	8000796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_Delay+0x44>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4413      	add	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000796:	bf00      	nop
 8000798:	f7ff ffe0 	bl	800075c <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8f7      	bhi.n	8000798 <HAL_Delay+0x28>
  {
  }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000038 	.word	0x20000038

080007b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ea:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <__NVIC_SetPriorityGrouping+0x44>)
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	60d3      	str	r3, [r2, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000804:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <__NVIC_GetPriorityGrouping+0x18>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	f003 0307 	and.w	r3, r3, #7
}
 800080e:	4618      	mov	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	2b00      	cmp	r3, #0
 800082c:	db0b      	blt.n	8000846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 021f 	and.w	r2, r3, #31
 8000834:	4906      	ldr	r1, [pc, #24]	@ (8000850 <__NVIC_EnableIRQ+0x34>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	095b      	lsrs	r3, r3, #5
 800083c:	2001      	movs	r0, #1
 800083e:	fa00 f202 	lsl.w	r2, r0, r2
 8000842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	e000e100 	.word	0xe000e100

08000854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	db0a      	blt.n	800087e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	490c      	ldr	r1, [pc, #48]	@ (80008a0 <__NVIC_SetPriority+0x4c>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	440b      	add	r3, r1
 8000878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800087c:	e00a      	b.n	8000894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4908      	ldr	r1, [pc, #32]	@ (80008a4 <__NVIC_SetPriority+0x50>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	3b04      	subs	r3, #4
 800088c:	0112      	lsls	r2, r2, #4
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	440b      	add	r3, r1
 8000892:	761a      	strb	r2, [r3, #24]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000e100 	.word	0xe000e100
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b089      	sub	sp, #36	@ 0x24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	f1c3 0307 	rsb	r3, r3, #7
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	bf28      	it	cs
 80008c6:	2304      	movcs	r3, #4
 80008c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3304      	adds	r3, #4
 80008ce:	2b06      	cmp	r3, #6
 80008d0:	d902      	bls.n	80008d8 <NVIC_EncodePriority+0x30>
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3b03      	subs	r3, #3
 80008d6:	e000      	b.n	80008da <NVIC_EncodePriority+0x32>
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43da      	mvns	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	401a      	ands	r2, r3
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f0:	f04f 31ff 	mov.w	r1, #4294967295
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	43d9      	mvns	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	4313      	orrs	r3, r2
         );
}
 8000902:	4618      	mov	r0, r3
 8000904:	3724      	adds	r7, #36	@ 0x24
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b01      	subs	r3, #1
 8000918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800091c:	d301      	bcc.n	8000922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091e:	2301      	movs	r3, #1
 8000920:	e00f      	b.n	8000942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <SysTick_Config+0x40>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092a:	210f      	movs	r1, #15
 800092c:	f04f 30ff 	mov.w	r0, #4294967295
 8000930:	f7ff ff90 	bl	8000854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <SysTick_Config+0x40>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	@ (800094c <SysTick_Config+0x40>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff2d 	bl	80007b8 <__NVIC_SetPriorityGrouping>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000978:	f7ff ff42 	bl	8000800 <__NVIC_GetPriorityGrouping>
 800097c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff ff90 	bl	80008a8 <NVIC_EncodePriority>
 8000988:	4602      	mov	r2, r0
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff5f 	bl	8000854 <__NVIC_SetPriority>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff35 	bl	800081c <__NVIC_EnableIRQ>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffa2 	bl	800090c <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d008      	beq.n	80009fc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2204      	movs	r2, #4
 80009ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e020      	b.n	8000a3e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f022 020e 	bic.w	r2, r2, #14
 8000a0a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0201 	bic.w	r2, r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a24:	2101      	movs	r1, #1
 8000a26:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d005      	beq.n	8000a6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2204      	movs	r2, #4
 8000a64:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e051      	b.n	8000b10 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 020e 	bic.w	r2, r2, #14
 8000a7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 0201 	bic.w	r2, r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a22      	ldr	r2, [pc, #136]	@ (8000b1c <HAL_DMA_Abort_IT+0xd4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d029      	beq.n	8000aea <HAL_DMA_Abort_IT+0xa2>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <HAL_DMA_Abort_IT+0xd8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d022      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x9e>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <HAL_DMA_Abort_IT+0xdc>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d01a      	beq.n	8000ae0 <HAL_DMA_Abort_IT+0x98>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1e      	ldr	r2, [pc, #120]	@ (8000b28 <HAL_DMA_Abort_IT+0xe0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d012      	beq.n	8000ada <HAL_DMA_Abort_IT+0x92>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b2c <HAL_DMA_Abort_IT+0xe4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00a      	beq.n	8000ad4 <HAL_DMA_Abort_IT+0x8c>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <HAL_DMA_Abort_IT+0xe8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d102      	bne.n	8000ace <HAL_DMA_Abort_IT+0x86>
 8000ac8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000acc:	e00e      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ace:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ad2:	e00b      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ad4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad8:	e008      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ade:	e005      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ae4:	e002      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000ae6:	2310      	movs	r3, #16
 8000ae8:	e000      	b.n	8000aec <HAL_DMA_Abort_IT+0xa4>
 8000aea:	2301      	movs	r3, #1
 8000aec:	4a11      	ldr	r2, [pc, #68]	@ (8000b34 <HAL_DMA_Abort_IT+0xec>)
 8000aee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	4798      	blx	r3
    } 
  }
  return status;
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40020008 	.word	0x40020008
 8000b20:	4002001c 	.word	0x4002001c
 8000b24:	40020030 	.word	0x40020030
 8000b28:	40020044 	.word	0x40020044
 8000b2c:	40020058 	.word	0x40020058
 8000b30:	4002006c 	.word	0x4002006c
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b46:	b2db      	uxtb	r3, r3
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b08b      	sub	sp, #44	@ 0x2c
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e161      	b.n	8000e2c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	f040 8150 	bne.w	8000e26 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a97      	ldr	r2, [pc, #604]	@ (8000de8 <HAL_GPIO_Init+0x294>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d05e      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000b90:	4a95      	ldr	r2, [pc, #596]	@ (8000de8 <HAL_GPIO_Init+0x294>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d875      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000b96:	4a95      	ldr	r2, [pc, #596]	@ (8000dec <HAL_GPIO_Init+0x298>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d058      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000b9c:	4a93      	ldr	r2, [pc, #588]	@ (8000dec <HAL_GPIO_Init+0x298>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d86f      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000ba2:	4a93      	ldr	r2, [pc, #588]	@ (8000df0 <HAL_GPIO_Init+0x29c>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d052      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000ba8:	4a91      	ldr	r2, [pc, #580]	@ (8000df0 <HAL_GPIO_Init+0x29c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d869      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bae:	4a91      	ldr	r2, [pc, #580]	@ (8000df4 <HAL_GPIO_Init+0x2a0>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d04c      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000bb4:	4a8f      	ldr	r2, [pc, #572]	@ (8000df4 <HAL_GPIO_Init+0x2a0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d863      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bba:	4a8f      	ldr	r2, [pc, #572]	@ (8000df8 <HAL_GPIO_Init+0x2a4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d046      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000bc0:	4a8d      	ldr	r2, [pc, #564]	@ (8000df8 <HAL_GPIO_Init+0x2a4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d85d      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d82a      	bhi.n	8000c20 <HAL_GPIO_Init+0xcc>
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	d859      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bce:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd4 <HAL_GPIO_Init+0x80>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000c4f 	.word	0x08000c4f
 8000bd8:	08000c29 	.word	0x08000c29
 8000bdc:	08000c3b 	.word	0x08000c3b
 8000be0:	08000c7d 	.word	0x08000c7d
 8000be4:	08000c83 	.word	0x08000c83
 8000be8:	08000c83 	.word	0x08000c83
 8000bec:	08000c83 	.word	0x08000c83
 8000bf0:	08000c83 	.word	0x08000c83
 8000bf4:	08000c83 	.word	0x08000c83
 8000bf8:	08000c83 	.word	0x08000c83
 8000bfc:	08000c83 	.word	0x08000c83
 8000c00:	08000c83 	.word	0x08000c83
 8000c04:	08000c83 	.word	0x08000c83
 8000c08:	08000c83 	.word	0x08000c83
 8000c0c:	08000c83 	.word	0x08000c83
 8000c10:	08000c83 	.word	0x08000c83
 8000c14:	08000c83 	.word	0x08000c83
 8000c18:	08000c31 	.word	0x08000c31
 8000c1c:	08000c45 	.word	0x08000c45
 8000c20:	4a76      	ldr	r2, [pc, #472]	@ (8000dfc <HAL_GPIO_Init+0x2a8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d013      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c26:	e02c      	b.n	8000c82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e029      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	3304      	adds	r3, #4
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e024      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	3308      	adds	r3, #8
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e01f      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	330c      	adds	r3, #12
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e01a      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c56:	2304      	movs	r3, #4
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e013      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d105      	bne.n	8000c70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	611a      	str	r2, [r3, #16]
          break;
 8000c6e:	e009      	b.n	8000c84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c70:	2308      	movs	r3, #8
 8000c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	615a      	str	r2, [r3, #20]
          break;
 8000c7a:	e003      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          break;
 8000c82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2bff      	cmp	r3, #255	@ 0xff
 8000c88:	d801      	bhi.n	8000c8e <HAL_GPIO_Init+0x13a>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	e001      	b.n	8000c92 <HAL_GPIO_Init+0x13e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3304      	adds	r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2bff      	cmp	r3, #255	@ 0xff
 8000c98:	d802      	bhi.n	8000ca0 <HAL_GPIO_Init+0x14c>
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x152>
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca2:	3b08      	subs	r3, #8
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	210f      	movs	r1, #15
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	6a39      	ldr	r1, [r7, #32]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80a9 	beq.w	8000e26 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a49      	ldr	r2, [pc, #292]	@ (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b47      	ldr	r3, [pc, #284]	@ (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cec:	4a45      	ldr	r2, [pc, #276]	@ (8000e04 <HAL_GPIO_Init+0x2b0>)
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3d      	ldr	r2, [pc, #244]	@ (8000e08 <HAL_GPIO_Init+0x2b4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d00d      	beq.n	8000d34 <HAL_GPIO_Init+0x1e0>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d007      	beq.n	8000d30 <HAL_GPIO_Init+0x1dc>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a3b      	ldr	r2, [pc, #236]	@ (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d101      	bne.n	8000d2c <HAL_GPIO_Init+0x1d8>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	e004      	b.n	8000d36 <HAL_GPIO_Init+0x1e2>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x1e2>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_GPIO_Init+0x1e2>
 8000d34:	2300      	movs	r3, #0
 8000d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d38:	f002 0203 	and.w	r2, r2, #3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	4093      	lsls	r3, r2
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d46:	492f      	ldr	r1, [pc, #188]	@ (8000e04 <HAL_GPIO_Init+0x2b0>)
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d60:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	492b      	ldr	r1, [pc, #172]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]
 8000d6c:	e006      	b.n	8000d7c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d6e:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4927      	ldr	r1, [pc, #156]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	4921      	ldr	r1, [pc, #132]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	60cb      	str	r3, [r1, #12]
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d96:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	491d      	ldr	r1, [pc, #116]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db0:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	4917      	ldr	r1, [pc, #92]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	604b      	str	r3, [r1, #4]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4913      	ldr	r1, [pc, #76]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d01f      	beq.n	8000e18 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	490d      	ldr	r1, [pc, #52]	@ (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
 8000de4:	e01f      	b.n	8000e26 <HAL_GPIO_Init+0x2d2>
 8000de6:	bf00      	nop
 8000de8:	10320000 	.word	0x10320000
 8000dec:	10310000 	.word	0x10310000
 8000df0:	10220000 	.word	0x10220000
 8000df4:	10210000 	.word	0x10210000
 8000df8:	10120000 	.word	0x10120000
 8000dfc:	10110000 	.word	0x10110000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_GPIO_Init+0x2f4>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	4909      	ldr	r1, [pc, #36]	@ (8000e48 <HAL_GPIO_Init+0x2f4>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e28:	3301      	adds	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	fa22 f303 	lsr.w	r3, r2, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f47f ae96 	bne.w	8000b68 <HAL_GPIO_Init+0x14>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	372c      	adds	r7, #44	@ 0x2c
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e12b      	b.n	80010b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d106      	bne.n	8000e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff faca 	bl	800040c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2224      	movs	r2, #36	@ 0x24
 8000e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000eae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000eb0:	f002 fb54 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8000eb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4a81      	ldr	r2, [pc, #516]	@ (80010c0 <HAL_I2C_Init+0x274>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d807      	bhi.n	8000ed0 <HAL_I2C_Init+0x84>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4a80      	ldr	r2, [pc, #512]	@ (80010c4 <HAL_I2C_Init+0x278>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	bf94      	ite	ls
 8000ec8:	2301      	movls	r3, #1
 8000eca:	2300      	movhi	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	e006      	b.n	8000ede <HAL_I2C_Init+0x92>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80010c8 <HAL_I2C_Init+0x27c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	bf94      	ite	ls
 8000ed8:	2301      	movls	r3, #1
 8000eda:	2300      	movhi	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0e7      	b.n	80010b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4a78      	ldr	r2, [pc, #480]	@ (80010cc <HAL_I2C_Init+0x280>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	4a6a      	ldr	r2, [pc, #424]	@ (80010c0 <HAL_I2C_Init+0x274>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d802      	bhi.n	8000f20 <HAL_I2C_Init+0xd4>
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	e009      	b.n	8000f34 <HAL_I2C_Init+0xe8>
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	4a69      	ldr	r2, [pc, #420]	@ (80010d0 <HAL_I2C_Init+0x284>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	099b      	lsrs	r3, r3, #6
 8000f32:	3301      	adds	r3, #1
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	495c      	ldr	r1, [pc, #368]	@ (80010c0 <HAL_I2C_Init+0x274>)
 8000f50:	428b      	cmp	r3, r1
 8000f52:	d819      	bhi.n	8000f88 <HAL_I2C_Init+0x13c>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1e59      	subs	r1, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f62:	1c59      	adds	r1, r3, #1
 8000f64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f68:	400b      	ands	r3, r1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00a      	beq.n	8000f84 <HAL_I2C_Init+0x138>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1e59      	subs	r1, r3, #1
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f82:	e051      	b.n	8001028 <HAL_I2C_Init+0x1dc>
 8000f84:	2304      	movs	r3, #4
 8000f86:	e04f      	b.n	8001028 <HAL_I2C_Init+0x1dc>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d111      	bne.n	8000fb4 <HAL_I2C_Init+0x168>
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1e58      	subs	r0, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6859      	ldr	r1, [r3, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	440b      	add	r3, r1
 8000f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	e012      	b.n	8000fda <HAL_I2C_Init+0x18e>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	1e58      	subs	r0, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	0099      	lsls	r1, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_I2C_Init+0x196>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e022      	b.n	8001028 <HAL_I2C_Init+0x1dc>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10e      	bne.n	8001008 <HAL_I2C_Init+0x1bc>
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	1e58      	subs	r0, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001006:	e00f      	b.n	8001028 <HAL_I2C_Init+0x1dc>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1e58      	subs	r0, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6859      	ldr	r1, [r3, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	0099      	lsls	r1, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	fbb0 f3f3 	udiv	r3, r0, r3
 800101e:	3301      	adds	r3, #1
 8001020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001024:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	6809      	ldr	r1, [r1, #0]
 800102c:	4313      	orrs	r3, r2
 800102e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69da      	ldr	r2, [r3, #28]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001056:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6911      	ldr	r1, [r2, #16]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68d2      	ldr	r2, [r2, #12]
 8001062:	4311      	orrs	r1, r2
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	430b      	orrs	r3, r1
 800106a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0201 	orr.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2220      	movs	r2, #32
 80010a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	000186a0 	.word	0x000186a0
 80010c4:	001e847f 	.word	0x001e847f
 80010c8:	003d08ff 	.word	0x003d08ff
 80010cc:	431bde83 	.word	0x431bde83
 80010d0:	10624dd3 	.word	0x10624dd3

080010d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e6:	2b80      	cmp	r3, #128	@ 0x80
 80010e8:	d103      	bne.n	80010f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  }
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af02      	add	r7, sp, #8
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	460b      	mov	r3, r1
 800110a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff fb26 	bl	800075c <HAL_GetTick>
 8001110:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b20      	cmp	r3, #32
 8001120:	f040 8111 	bne.w	8001346 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2319      	movs	r3, #25
 800112a:	2201      	movs	r2, #1
 800112c:	4988      	ldr	r1, [pc, #544]	@ (8001350 <HAL_I2C_IsDeviceReady+0x254>)
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f001 fd84 	bl	8002c3c <I2C_WaitOnFlagUntilTimeout>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800113a:	2302      	movs	r3, #2
 800113c:	e104      	b.n	8001348 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_I2C_IsDeviceReady+0x50>
 8001148:	2302      	movs	r3, #2
 800114a:	e0fd      	b.n	8001348 <HAL_I2C_IsDeviceReady+0x24c>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b01      	cmp	r3, #1
 8001160:	d007      	beq.n	8001172 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001180:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2224      	movs	r2, #36	@ 0x24
 8001186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4a70      	ldr	r2, [pc, #448]	@ (8001354 <HAL_I2C_IsDeviceReady+0x258>)
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f001 fd42 	bl	8002c3c <I2C_WaitOnFlagUntilTimeout>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00d      	beq.n	80011da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011cc:	d103      	bne.n	80011d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e0b6      	b.n	8001348 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011da:	897b      	ldrh	r3, [r7, #10]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80011e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fab7 	bl	800075c <HAL_GetTick>
 80011ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800121e:	e025      	b.n	800126c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001220:	f7ff fa9c 	bl	800075c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d302      	bcc.n	8001236 <HAL_I2C_IsDeviceReady+0x13a>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	22a0      	movs	r2, #160	@ 0xa0
 800123a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b02      	cmp	r3, #2
 800124a:	bf0c      	ite	eq
 800124c:	2301      	moveq	r3, #1
 800124e:	2300      	movne	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2ba0      	cmp	r3, #160	@ 0xa0
 8001276:	d005      	beq.n	8001284 <HAL_I2C_IsDeviceReady+0x188>
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <HAL_I2C_IsDeviceReady+0x188>
 800127e:	7dbb      	ldrb	r3, [r7, #22]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0cd      	beq.n	8001220 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2220      	movs	r2, #32
 8001288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b02      	cmp	r3, #2
 8001298:	d129      	bne.n	80012ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2319      	movs	r3, #25
 80012c6:	2201      	movs	r2, #1
 80012c8:	4921      	ldr	r1, [pc, #132]	@ (8001350 <HAL_I2C_IsDeviceReady+0x254>)
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f001 fcb6 	bl	8002c3c <I2C_WaitOnFlagUntilTimeout>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e036      	b.n	8001348 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2220      	movs	r2, #32
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e02c      	b.n	8001348 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001306:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2319      	movs	r3, #25
 800130e:	2201      	movs	r2, #1
 8001310:	490f      	ldr	r1, [pc, #60]	@ (8001350 <HAL_I2C_IsDeviceReady+0x254>)
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f001 fc92 	bl	8002c3c <I2C_WaitOnFlagUntilTimeout>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e012      	b.n	8001348 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	3301      	adds	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	f4ff af32 	bcc.w	8001196 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2220      	movs	r2, #32
 8001336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001346:	2302      	movs	r3, #2
  }
}
 8001348:	4618      	mov	r0, r3
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	00100002 	.word	0x00100002
 8001354:	ffff0000 	.word	0xffff0000

08001358 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001378:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001380:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b10      	cmp	r3, #16
 8001386:	d003      	beq.n	8001390 <HAL_I2C_EV_IRQHandler+0x38>
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b40      	cmp	r3, #64	@ 0x40
 800138c:	f040 80b1 	bne.w	80014f2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10d      	bne.n	80013c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80013b0:	d003      	beq.n	80013ba <HAL_I2C_EV_IRQHandler+0x62>
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80013b8:	d101      	bne.n	80013be <HAL_I2C_EV_IRQHandler+0x66>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_I2C_EV_IRQHandler+0x68>
 80013be:	2300      	movs	r3, #0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f000 8114 	beq.w	80015ee <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00b      	beq.n	80013e8 <HAL_I2C_EV_IRQHandler+0x90>
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f001 fcda 	bl	8002d94 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fd60 	bl	8001ea6 <I2C_Master_SB>
 80013e6:	e083      	b.n	80014f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d008      	beq.n	8001404 <HAL_I2C_EV_IRQHandler+0xac>
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fdd7 	bl	8001fb0 <I2C_Master_ADD10>
 8001402:	e075      	b.n	80014f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <HAL_I2C_EV_IRQHandler+0xc8>
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fdf2 	bl	8002002 <I2C_Master_ADDR>
 800141e:	e067      	b.n	80014f0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	d036      	beq.n	8001498 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001438:	f000 80db 	beq.w	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00d      	beq.n	8001462 <HAL_I2C_EV_IRQHandler+0x10a>
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d008      	beq.n	8001462 <HAL_I2C_EV_IRQHandler+0x10a>
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f9d4 	bl	8001808 <I2C_MasterTransmit_TXE>
 8001460:	e046      	b.n	80014f0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80c2 	beq.w	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80bc 	beq.w	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	2b21      	cmp	r3, #33	@ 0x21
 800147e:	d103      	bne.n	8001488 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fa5d 	bl	8001940 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001486:	e0b4      	b.n	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b40      	cmp	r3, #64	@ 0x40
 800148c:	f040 80b1 	bne.w	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 facb 	bl	8001a2c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001496:	e0ac      	b.n	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014a6:	f000 80a4 	beq.w	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00d      	beq.n	80014d0 <HAL_I2C_EV_IRQHandler+0x178>
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <HAL_I2C_EV_IRQHandler+0x178>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d103      	bne.n	80014d0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fb47 	bl	8001b5c <I2C_MasterReceive_RXNE>
 80014ce:	e00f      	b.n	80014f0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 808b 	beq.w	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8085 	beq.w	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fbf2 	bl	8001cd2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014ee:	e080      	b.n	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
 80014f0:	e07f      	b.n	80015f2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d004      	beq.n	8001504 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	e007      	b.n	8001514 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d011      	beq.n	8001542 <HAL_I2C_EV_IRQHandler+0x1ea>
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00c      	beq.n	8001542 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001538:	69b9      	ldr	r1, [r7, #24]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 ffb8 	bl	80024b0 <I2C_Slave_ADDR>
 8001540:	e05a      	b.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_I2C_EV_IRQHandler+0x206>
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 fff2 	bl	8002540 <I2C_Slave_STOPF>
 800155c:	e04c      	b.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	2b21      	cmp	r3, #33	@ 0x21
 8001562:	d002      	beq.n	800156a <HAL_I2C_EV_IRQHandler+0x212>
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b29      	cmp	r3, #41	@ 0x29
 8001568:	d120      	bne.n	80015ac <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00d      	beq.n	8001590 <HAL_I2C_EV_IRQHandler+0x238>
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <HAL_I2C_EV_IRQHandler+0x238>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fed5 	bl	8002338 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800158e:	e032      	b.n	80015f6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d02d      	beq.n	80015f6 <HAL_I2C_EV_IRQHandler+0x29e>
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d028      	beq.n	80015f6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 ff04 	bl	80023b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015aa:	e024      	b.n	80015f6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00d      	beq.n	80015d2 <HAL_I2C_EV_IRQHandler+0x27a>
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_I2C_EV_IRQHandler+0x27a>
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d103      	bne.n	80015d2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 ff11 	bl	80023f2 <I2C_SlaveReceive_RXNE>
 80015d0:	e012      	b.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00d      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 ff41 	bl	800246e <I2C_SlaveReceive_BTF>
 80015ec:	e004      	b.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80015ee:	bf00      	nop
 80015f0:	e002      	b.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015f2:	bf00      	nop
 80015f4:	e000      	b.n	80015f8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b08a      	sub	sp, #40	@ 0x28
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001620:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d015      	beq.n	8001658 <HAL_I2C_ER_IRQHandler+0x5a>
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d010      	beq.n	8001658 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001646:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00d      	beq.n	800167e <HAL_I2C_ER_IRQHandler+0x80>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800167c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001684:	2b00      	cmp	r3, #0
 8001686:	d03e      	beq.n	8001706 <HAL_I2C_ER_IRQHandler+0x108>
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d039      	beq.n	8001706 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001692:	7efb      	ldrb	r3, [r7, #27]
 8001694:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169a:	b29b      	uxth	r3, r3
 800169c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016a4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80016ac:	7ebb      	ldrb	r3, [r7, #26]
 80016ae:	2b20      	cmp	r3, #32
 80016b0:	d112      	bne.n	80016d8 <HAL_I2C_ER_IRQHandler+0xda>
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10f      	bne.n	80016d8 <HAL_I2C_ER_IRQHandler+0xda>
 80016b8:	7cfb      	ldrb	r3, [r7, #19]
 80016ba:	2b21      	cmp	r3, #33	@ 0x21
 80016bc:	d008      	beq.n	80016d0 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80016be:	7cfb      	ldrb	r3, [r7, #19]
 80016c0:	2b29      	cmp	r3, #41	@ 0x29
 80016c2:	d005      	beq.n	80016d0 <HAL_I2C_ER_IRQHandler+0xd2>
 80016c4:	7cfb      	ldrb	r3, [r7, #19]
 80016c6:	2b28      	cmp	r3, #40	@ 0x28
 80016c8:	d106      	bne.n	80016d8 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b21      	cmp	r3, #33	@ 0x21
 80016ce:	d103      	bne.n	80016d8 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f001 f865 	bl	80027a0 <I2C_Slave_AF>
 80016d6:	e016      	b.n	8001706 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80016e0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80016ea:	7efb      	ldrb	r3, [r7, #27]
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d002      	beq.n	80016f6 <HAL_I2C_ER_IRQHandler+0xf8>
 80016f0:	7efb      	ldrb	r3, [r7, #27]
 80016f2:	2b40      	cmp	r3, #64	@ 0x40
 80016f4:	d107      	bne.n	8001706 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001704:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00d      	beq.n	800172c <HAL_I2C_ER_IRQHandler+0x12e>
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d008      	beq.n	800172c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800172a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	2b00      	cmp	r3, #0
 8001730:	d008      	beq.n	8001744 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f001 f8a2 	bl	8002888 <I2C_ITError>
  }
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	@ 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
 80017a0:	4613      	mov	r3, r2
 80017a2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001816:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800181e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	d150      	bne.n	80018d0 <I2C_MasterTransmit_TXE+0xc8>
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b21      	cmp	r3, #33	@ 0x21
 8001832:	d14d      	bne.n	80018d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b08      	cmp	r3, #8
 8001838:	d01d      	beq.n	8001876 <I2C_MasterTransmit_TXE+0x6e>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b20      	cmp	r3, #32
 800183e:	d01a      	beq.n	8001876 <I2C_MasterTransmit_TXE+0x6e>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001846:	d016      	beq.n	8001876 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001856:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2211      	movs	r2, #17
 800185c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2220      	movs	r2, #32
 800186a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff6c 	bl	800174c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001874:	e060      	b.n	8001938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001884:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001894:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b40      	cmp	r3, #64	@ 0x40
 80018ae:	d107      	bne.n	80018c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff81 	bl	80017c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018be:	e03b      	b.n	8001938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff3f 	bl	800174c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80018ce:	e033      	b.n	8001938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b21      	cmp	r3, #33	@ 0x21
 80018d4:	d005      	beq.n	80018e2 <I2C_MasterTransmit_TXE+0xda>
 80018d6:	7bbb      	ldrb	r3, [r7, #14]
 80018d8:	2b40      	cmp	r3, #64	@ 0x40
 80018da:	d12d      	bne.n	8001938 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b22      	cmp	r3, #34	@ 0x22
 80018e0:	d12a      	bne.n	8001938 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d108      	bne.n	80018fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80018fc:	e01c      	b.n	8001938 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b40      	cmp	r3, #64	@ 0x40
 8001908:	d103      	bne.n	8001912 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f88e 	bl	8001a2c <I2C_MemoryTransmit_TXE_BTF>
}
 8001910:	e012      	b.n	8001938 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001936:	e7ff      	b.n	8001938 <I2C_MasterTransmit_TXE+0x130>
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b21      	cmp	r3, #33	@ 0x21
 8001958:	d164      	bne.n	8001a24 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d012      	beq.n	800198a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001988:	e04c      	b.n	8001a24 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d01d      	beq.n	80019cc <I2C_MasterTransmit_BTF+0x8c>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b20      	cmp	r3, #32
 8001994:	d01a      	beq.n	80019cc <I2C_MasterTransmit_BTF+0x8c>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800199c:	d016      	beq.n	80019cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2211      	movs	r2, #17
 80019b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fec1 	bl	800174c <HAL_I2C_MasterTxCpltCallback>
}
 80019ca:	e02b      	b.n	8001a24 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2220      	movs	r2, #32
 80019f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b40      	cmp	r3, #64	@ 0x40
 8001a04:	d107      	bne.n	8001a16 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff fed6 	bl	80017c0 <HAL_I2C_MemTxCpltCallback>
}
 8001a14:	e006      	b.n	8001a24 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fe94 	bl	800174c <HAL_I2C_MasterTxCpltCallback>
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d11d      	bne.n	8001a80 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d10b      	bne.n	8001a64 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a5c:	1c9a      	adds	r2, r3, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001a62:	e077      	b.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	121b      	asrs	r3, r3, #8
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a7e:	e069      	b.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d10b      	bne.n	8001aa0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a9e:	e059      	b.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d152      	bne.n	8001b4e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	2b22      	cmp	r3, #34	@ 0x22
 8001aac:	d10d      	bne.n	8001aca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001abc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ac8:	e044      	b.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d015      	beq.n	8001b00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b21      	cmp	r3, #33	@ 0x21
 8001ad8:	d112      	bne.n	8001b00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001afe:	e029      	b.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d124      	bne.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	2b21      	cmp	r3, #33	@ 0x21
 8001b0e:	d121      	bne.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b1e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fe3a 	bl	80017c0 <HAL_I2C_MemTxCpltCallback>
}
 8001b4c:	e002      	b.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fac0 	bl	80010d4 <I2C_Flush_DR>
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b22      	cmp	r3, #34	@ 0x22
 8001b6e:	f040 80ac 	bne.w	8001cca <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d921      	bls.n	8001bc4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	f040 808c 	bne.w	8001cca <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bc0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001bc2:	e082      	b.n	8001cca <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d075      	beq.n	8001cb8 <I2C_MasterReceive_RXNE+0x15c>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d002      	beq.n	8001bd8 <I2C_MasterReceive_RXNE+0x7c>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d16f      	bne.n	8001cb8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f001 f8a9 	bl	8002d30 <I2C_WaitOnSTOPRequestThroughIT>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d142      	bne.n	8001c6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bf2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b40      	cmp	r3, #64	@ 0x40
 8001c3c:	d10a      	bne.n	8001c54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fdc0 	bl	80017d2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c52:	e03a      	b.n	8001cca <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2212      	movs	r2, #18
 8001c60:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fd7b 	bl	800175e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001c68:	e02f      	b.n	8001cca <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fd97 	bl	80017e4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001cb6:	e008      	b.n	8001cca <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc6:	605a      	str	r2, [r3, #4]
}
 8001cc8:	e7ff      	b.n	8001cca <I2C_MasterReceive_RXNE+0x16e>
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cde:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d11b      	bne.n	8001d22 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cf8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001d20:	e0bd      	b.n	8001e9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d129      	bne.n	8001d80 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d3a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d00a      	beq.n	8001d58 <I2C_MasterReceive_BTF+0x86>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d007      	beq.n	8001d58 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001d7e:	e08e      	b.n	8001e9e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d176      	bne.n	8001e78 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d002      	beq.n	8001d96 <I2C_MasterReceive_BTF+0xc4>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d108      	bne.n	8001da8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e019      	b.n	8001ddc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d002      	beq.n	8001db4 <I2C_MasterReceive_BTF+0xe2>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d108      	bne.n	8001dc6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e00a      	b.n	8001ddc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d007      	beq.n	8001ddc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001e36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b40      	cmp	r3, #64	@ 0x40
 8001e4a:	d10a      	bne.n	8001e62 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fcb9 	bl	80017d2 <HAL_I2C_MemRxCpltCallback>
}
 8001e60:	e01d      	b.n	8001e9e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2212      	movs	r2, #18
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff fc74 	bl	800175e <HAL_I2C_MasterRxCpltCallback>
}
 8001e76:	e012      	b.n	8001e9e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b40      	cmp	r3, #64	@ 0x40
 8001eb8:	d117      	bne.n	8001eea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ed2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001ed4:	e067      	b.n	8001fa6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]
}
 8001ee8:	e05d      	b.n	8001fa6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ef2:	d133      	bne.n	8001f5c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b21      	cmp	r3, #33	@ 0x21
 8001efe:	d109      	bne.n	8001f14 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	e008      	b.n	8001f26 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <I2C_Master_SB+0x92>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d108      	bne.n	8001f4a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d032      	beq.n	8001fa6 <I2C_Master_SB+0x100>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d02d      	beq.n	8001fa6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f58:	605a      	str	r2, [r3, #4]
}
 8001f5a:	e024      	b.n	8001fa6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10e      	bne.n	8001f82 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	11db      	asrs	r3, r3, #7
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 0306 	and.w	r3, r3, #6
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f063 030f 	orn	r3, r3, #15
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	611a      	str	r2, [r3, #16]
}
 8001f80:	e011      	b.n	8001fa6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d10d      	bne.n	8001fa6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	11db      	asrs	r3, r3, #7
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 0306 	and.w	r3, r3, #6
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f063 030e 	orn	r3, r3, #14
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	611a      	str	r2, [r3, #16]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d004      	beq.n	8001fd6 <I2C_Master_ADD10+0x26>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d108      	bne.n	8001fe8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <I2C_Master_ADD10+0x48>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ff6:	605a      	str	r2, [r3, #4]
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002002:	b480      	push	{r7}
 8002004:	b091      	sub	sp, #68	@ 0x44
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002010:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b22      	cmp	r3, #34	@ 0x22
 800202a:	f040 8174 	bne.w	8002316 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10f      	bne.n	8002056 <I2C_Master_ADDR+0x54>
 8002036:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800203a:	2b40      	cmp	r3, #64	@ 0x40
 800203c:	d10b      	bne.n	8002056 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203e:	2300      	movs	r3, #0
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	633b      	str	r3, [r7, #48]	@ 0x30
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30
 8002052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002054:	e16b      	b.n	800232e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205a:	2b00      	cmp	r3, #0
 800205c:	d11d      	bne.n	800209a <I2C_Master_ADDR+0x98>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002066:	d118      	bne.n	800209a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800207c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800208c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	651a      	str	r2, [r3, #80]	@ 0x50
 8002098:	e149      	b.n	800232e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d113      	bne.n	80020cc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	e120      	b.n	800230e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	f040 808a 	bne.w	80021ec <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80020d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020de:	d137      	bne.n	8002150 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ee:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020fe:	d113      	bne.n	8002128 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800210e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	e0f2      	b.n	800230e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	623b      	str	r3, [r7, #32]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e0de      	b.n	800230e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002152:	2b08      	cmp	r3, #8
 8002154:	d02e      	beq.n	80021b4 <I2C_Master_ADDR+0x1b2>
 8002156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002158:	2b20      	cmp	r3, #32
 800215a:	d02b      	beq.n	80021b4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800215c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800215e:	2b12      	cmp	r3, #18
 8002160:	d102      	bne.n	8002168 <I2C_Master_ADDR+0x166>
 8002162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002164:	2b01      	cmp	r3, #1
 8002166:	d125      	bne.n	80021b4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800216a:	2b04      	cmp	r3, #4
 800216c:	d00e      	beq.n	800218c <I2C_Master_ADDR+0x18a>
 800216e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002170:	2b02      	cmp	r3, #2
 8002172:	d00b      	beq.n	800218c <I2C_Master_ADDR+0x18a>
 8002174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002176:	2b10      	cmp	r3, #16
 8002178:	d008      	beq.n	800218c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e007      	b.n	800219c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800219a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	e0ac      	b.n	800230e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e090      	b.n	800230e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d158      	bne.n	80022a8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d021      	beq.n	8002240 <I2C_Master_ADDR+0x23e>
 80021fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d01e      	beq.n	8002240 <I2C_Master_ADDR+0x23e>
 8002202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002204:	2b10      	cmp	r3, #16
 8002206:	d01b      	beq.n	8002240 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002216:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	e012      	b.n	8002266 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800224e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002274:	d14b      	bne.n	800230e <I2C_Master_ADDR+0x30c>
 8002276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002278:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800227c:	d00b      	beq.n	8002296 <I2C_Master_ADDR+0x294>
 800227e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002280:	2b01      	cmp	r3, #1
 8002282:	d008      	beq.n	8002296 <I2C_Master_ADDR+0x294>
 8002284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002286:	2b08      	cmp	r3, #8
 8002288:	d005      	beq.n	8002296 <I2C_Master_ADDR+0x294>
 800228a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800228c:	2b10      	cmp	r3, #16
 800228e:	d002      	beq.n	8002296 <I2C_Master_ADDR+0x294>
 8002290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002292:	2b20      	cmp	r3, #32
 8002294:	d13b      	bne.n	800230e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	e032      	b.n	800230e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022b6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022c6:	d117      	bne.n	80022f8 <I2C_Master_ADDR+0x2f6>
 80022c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022ce:	d00b      	beq.n	80022e8 <I2C_Master_ADDR+0x2e6>
 80022d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d008      	beq.n	80022e8 <I2C_Master_ADDR+0x2e6>
 80022d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d005      	beq.n	80022e8 <I2C_Master_ADDR+0x2e6>
 80022dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d002      	beq.n	80022e8 <I2C_Master_ADDR+0x2e6>
 80022e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d107      	bne.n	80022f8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002314:	e00b      	b.n	800232e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
}
 800232c:	e7ff      	b.n	800232e <I2C_Master_ADDR+0x32c>
 800232e:	bf00      	nop
 8002330:	3744      	adds	r7, #68	@ 0x44
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002346:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d02b      	beq.n	80023aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d114      	bne.n	80023aa <I2C_SlaveTransmit_TXE+0x72>
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b29      	cmp	r3, #41	@ 0x29
 8002384:	d111      	bne.n	80023aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002394:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2221      	movs	r2, #33	@ 0x21
 800239a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2228      	movs	r2, #40	@ 0x28
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff f9e3 	bl	8001770 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d011      	beq.n	80023e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002400:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02c      	beq.n	8002466 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d114      	bne.n	8002466 <I2C_SlaveReceive_RXNE+0x74>
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002440:	d111      	bne.n	8002466 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002450:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2222      	movs	r2, #34	@ 0x22
 8002456:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2228      	movs	r2, #40	@ 0x28
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff f98e 	bl	8001782 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d012      	beq.n	80024a6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80024ca:	2b28      	cmp	r3, #40	@ 0x28
 80024cc:	d125      	bne.n	800251a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d103      	bne.n	80024fe <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	81bb      	strh	r3, [r7, #12]
 80024fc:	e002      	b.n	8002504 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800250c:	89ba      	ldrh	r2, [r7, #12]
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	4619      	mov	r1, r3
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff f93e 	bl	8001794 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002518:	e00e      	b.n	8002538 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800254e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800255e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800258c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800259c:	d172      	bne.n	8002684 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b22      	cmp	r3, #34	@ 0x22
 80025a2:	d002      	beq.n	80025aa <I2C_Slave_STOPF+0x6a>
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80025a8:	d135      	bne.n	8002616 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe faa8 	bl	8000b38 <HAL_DMA_GetState>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d049      	beq.n	8002682 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f2:	4a69      	ldr	r2, [pc, #420]	@ (8002798 <I2C_Slave_STOPF+0x258>)
 80025f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fa24 	bl	8000a48 <HAL_DMA_Abort_IT>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d03d      	beq.n	8002682 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002610:	4610      	mov	r0, r2
 8002612:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002614:	e035      	b.n	8002682 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	f043 0204 	orr.w	r2, r3, #4
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002648:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fa72 	bl	8000b38 <HAL_DMA_GetState>
 8002654:	4603      	mov	r3, r0
 8002656:	2b01      	cmp	r3, #1
 8002658:	d014      	beq.n	8002684 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265e:	4a4e      	ldr	r2, [pc, #312]	@ (8002798 <I2C_Slave_STOPF+0x258>)
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe f9ee 	bl	8000a48 <HAL_DMA_Abort_IT>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800267c:	4610      	mov	r0, r2
 800267e:	4798      	blx	r3
 8002680:	e000      	b.n	8002684 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002682:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d03e      	beq.n	800270c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d112      	bne.n	80026c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026cc:	2b40      	cmp	r3, #64	@ 0x40
 80026ce:	d112      	bne.n	80026f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f043 0204 	orr.w	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f8b7 	bl	8002888 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800271a:	e039      	b.n	8002790 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002720:	d109      	bne.n	8002736 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2228      	movs	r2, #40	@ 0x28
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff f826 	bl	8001782 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b28      	cmp	r3, #40	@ 0x28
 8002740:	d111      	bne.n	8002766 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a15      	ldr	r2, [pc, #84]	@ (800279c <I2C_Slave_STOPF+0x25c>)
 8002746:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff f825 	bl	80017ae <HAL_I2C_ListenCpltCallback>
}
 8002764:	e014      	b.n	8002790 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	2b22      	cmp	r3, #34	@ 0x22
 800276c:	d002      	beq.n	8002774 <I2C_Slave_STOPF+0x234>
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b22      	cmp	r3, #34	@ 0x22
 8002772:	d10d      	bne.n	8002790 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fff9 	bl	8001782 <HAL_I2C_SlaveRxCpltCallback>
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	08002aed 	.word	0x08002aed
 800279c:	ffff0000 	.word	0xffff0000

080027a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d002      	beq.n	80027c2 <I2C_Slave_AF+0x22>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d129      	bne.n	8002816 <I2C_Slave_AF+0x76>
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b28      	cmp	r3, #40	@ 0x28
 80027c6:	d126      	bne.n	8002816 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002884 <I2C_Slave_AF+0xe4>)
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe ffcd 	bl	80017ae <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002814:	e031      	b.n	800287a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b21      	cmp	r3, #33	@ 0x21
 800281a:	d129      	bne.n	8002870 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a19      	ldr	r2, [pc, #100]	@ (8002884 <I2C_Slave_AF+0xe4>)
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2221      	movs	r2, #33	@ 0x21
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002846:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002850:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002860:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fc36 	bl	80010d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7fe ff81 	bl	8001770 <HAL_I2C_SlaveTxCpltCallback>
}
 800286e:	e004      	b.n	800287a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	ffff0000 	.word	0xffff0000

08002888 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002896:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800289e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80028a0:	7bbb      	ldrb	r3, [r7, #14]
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d002      	beq.n	80028ac <I2C_ITError+0x24>
 80028a6:	7bbb      	ldrb	r3, [r7, #14]
 80028a8:	2b40      	cmp	r3, #64	@ 0x40
 80028aa:	d10a      	bne.n	80028c2 <I2C_ITError+0x3a>
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	2b22      	cmp	r3, #34	@ 0x22
 80028b0:	d107      	bne.n	80028c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028c8:	2b28      	cmp	r3, #40	@ 0x28
 80028ca:	d107      	bne.n	80028dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2228      	movs	r2, #40	@ 0x28
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80028da:	e015      	b.n	8002908 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028ea:	d00a      	beq.n	8002902 <I2C_ITError+0x7a>
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b60      	cmp	r3, #96	@ 0x60
 80028f0:	d007      	beq.n	8002902 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002912:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002916:	d162      	bne.n	80029de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002926:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d020      	beq.n	8002978 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ae4 <I2C_ITError+0x25c>)
 800293c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe f880 	bl	8000a48 <HAL_DMA_Abort_IT>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8089 	beq.w	8002a62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002972:	4610      	mov	r0, r2
 8002974:	4798      	blx	r3
 8002976:	e074      	b.n	8002a62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	4a59      	ldr	r2, [pc, #356]	@ (8002ae4 <I2C_ITError+0x25c>)
 800297e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f85f 	bl	8000a48 <HAL_DMA_Abort_IT>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d068      	beq.n	8002a62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299a:	2b40      	cmp	r3, #64	@ 0x40
 800299c:	d10b      	bne.n	80029b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029d8:	4610      	mov	r0, r2
 80029da:	4798      	blx	r3
 80029dc:	e041      	b.n	8002a62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b60      	cmp	r3, #96	@ 0x60
 80029e8:	d125      	bne.n	8002a36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a02:	2b40      	cmp	r3, #64	@ 0x40
 8002a04:	d10b      	bne.n	8002a1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fee1 	bl	80017f6 <HAL_I2C_AbortCpltCallback>
 8002a34:	e015      	b.n	8002a62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b40      	cmp	r3, #64	@ 0x40
 8002a42:	d10b      	bne.n	8002a5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fe fec1 	bl	80017e4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d104      	bne.n	8002a90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d113      	bne.n	8002adc <I2C_ITError+0x254>
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b28      	cmp	r3, #40	@ 0x28
 8002ab8:	d110      	bne.n	8002adc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <I2C_ITError+0x260>)
 8002abe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fe fe69 	bl	80017ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	08002aed 	.word	0x08002aed
 8002ae8:	ffff0000 	.word	0xffff0000

08002aec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b06:	4b4b      	ldr	r3, [pc, #300]	@ (8002c34 <I2C_DMAAbort+0x148>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	08db      	lsrs	r3, r3, #3
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c38 <I2C_DMAAbort+0x14c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0a1a      	lsrs	r2, r3, #8
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00da      	lsls	r2, r3, #3
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002b32:	e00a      	b.n	8002b4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b48:	d0ea      	beq.n	8002b20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b56:	2200      	movs	r2, #0
 8002b58:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	2200      	movs	r2, #0
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b60      	cmp	r3, #96	@ 0x60
 8002bba:	d10e      	bne.n	8002bda <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7fe fe0f 	bl	80017f6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bd8:	e027      	b.n	8002c2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002be0:	2b28      	cmp	r3, #40	@ 0x28
 8002be2:	d117      	bne.n	8002c14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2200      	movs	r2, #0
 8002c08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2228      	movs	r2, #40	@ 0x28
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002c12:	e007      	b.n	8002c24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002c24:	6978      	ldr	r0, [r7, #20]
 8002c26:	f7fe fddd 	bl	80017e4 <HAL_I2C_ErrorCallback>
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000030 	.word	0x20000030
 8002c38:	14f8b589 	.word	0x14f8b589

08002c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c4c:	e048      	b.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d044      	beq.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7fd fd81 	bl	800075c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d139      	bne.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d10d      	bne.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4013      	ands	r3, r2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	e00c      	b.n	8002cac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d116      	bne.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e023      	b.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10d      	bne.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2301      	moveq	r3, #1
 8002cfe:	2300      	movne	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	e00c      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d093      	beq.n	8002c4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d3c:	4b13      	ldr	r3, [pc, #76]	@ (8002d8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	4a13      	ldr	r2, [pc, #76]	@ (8002d90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0a1a      	lsrs	r2, r3, #8
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d107      	bne.n	8002d6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e008      	b.n	8002d80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7c:	d0e9      	beq.n	8002d52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000030 	.word	0x20000030
 8002d90:	14f8b589 	.word	0x14f8b589

08002d94 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002da4:	d103      	bne.n	8002dae <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dac:	e007      	b.n	8002dbe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002db6:	d102      	bne.n	8002dbe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e272      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8087 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de8:	4b92      	ldr	r3, [pc, #584]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d00c      	beq.n	8002e0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df4:	4b8f      	ldr	r3, [pc, #572]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d112      	bne.n	8002e26 <HAL_RCC_OscConfig+0x5e>
 8002e00:	4b8c      	ldr	r3, [pc, #560]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d10b      	bne.n	8002e26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0e:	4b89      	ldr	r3, [pc, #548]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d06c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x12c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d168      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e24c      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x76>
 8002e30:	4b80      	ldr	r3, [pc, #512]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a7f      	ldr	r2, [pc, #508]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	e02e      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x98>
 8002e46:	4b7b      	ldr	r3, [pc, #492]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7a      	ldr	r2, [pc, #488]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b78      	ldr	r3, [pc, #480]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a77      	ldr	r2, [pc, #476]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e01d      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0xbc>
 8002e6a:	4b72      	ldr	r3, [pc, #456]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a71      	ldr	r2, [pc, #452]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b6f      	ldr	r3, [pc, #444]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0xd4>
 8002e84:	4b6b      	ldr	r3, [pc, #428]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6a      	ldr	r2, [pc, #424]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b68      	ldr	r3, [pc, #416]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a67      	ldr	r2, [pc, #412]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fd fc5a 	bl	800075c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fd fc56 	bl	800075c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	@ 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e200      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0xe4>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fc46 	bl	800075c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fd fc42 	bl	800075c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	@ 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1ec      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x10c>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f02:	4b4c      	ldr	r3, [pc, #304]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f0e:	4b49      	ldr	r3, [pc, #292]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x18c>
 8002f1a:	4b46      	ldr	r3, [pc, #280]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	4b43      	ldr	r3, [pc, #268]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_RCC_OscConfig+0x176>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1c0      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4939      	ldr	r1, [pc, #228]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	e03a      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5c:	4b36      	ldr	r3, [pc, #216]	@ (8003038 <HAL_RCC_OscConfig+0x270>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fd fbfb 	bl	800075c <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7fd fbf7 	bl	800075c <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1a1      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4927      	ldr	r1, [pc, #156]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e015      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9e:	4b26      	ldr	r3, [pc, #152]	@ (8003038 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fd fbda 	bl	800075c <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fd fbd6 	bl	800075c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e180      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03a      	beq.n	800304c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d019      	beq.n	8003012 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fde:	4b17      	ldr	r3, [pc, #92]	@ (800303c <HAL_RCC_OscConfig+0x274>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7fd fbba 	bl	800075c <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fec:	f7fd fbb6 	bl	800075c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e160      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <HAL_RCC_OscConfig+0x26c>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800300a:	2001      	movs	r0, #1
 800300c:	f000 face 	bl	80035ac <RCC_Delay>
 8003010:	e01c      	b.n	800304c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003012:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <HAL_RCC_OscConfig+0x274>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7fd fba0 	bl	800075c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301e:	e00f      	b.n	8003040 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7fd fb9c 	bl	800075c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d908      	bls.n	8003040 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e146      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	42420000 	.word	0x42420000
 800303c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b92      	ldr	r3, [pc, #584]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1e9      	bne.n	8003020 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a6 	beq.w	80031a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b8b      	ldr	r3, [pc, #556]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b88      	ldr	r3, [pc, #544]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4a87      	ldr	r2, [pc, #540]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003074:	61d3      	str	r3, [r2, #28]
 8003076:	4b85      	ldr	r3, [pc, #532]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	4b82      	ldr	r3, [pc, #520]	@ (8003290 <HAL_RCC_OscConfig+0x4c8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d118      	bne.n	80030c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003092:	4b7f      	ldr	r3, [pc, #508]	@ (8003290 <HAL_RCC_OscConfig+0x4c8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7e      	ldr	r2, [pc, #504]	@ (8003290 <HAL_RCC_OscConfig+0x4c8>)
 8003098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309e:	f7fd fb5d 	bl	800075c <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a6:	f7fd fb59 	bl	800075c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	@ 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e103      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	4b75      	ldr	r3, [pc, #468]	@ (8003290 <HAL_RCC_OscConfig+0x4c8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x312>
 80030cc:	4b6f      	ldr	r3, [pc, #444]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4a6e      	ldr	r2, [pc, #440]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6213      	str	r3, [r2, #32]
 80030d8:	e02d      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x334>
 80030e2:	4b6a      	ldr	r3, [pc, #424]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4a69      	ldr	r2, [pc, #420]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6213      	str	r3, [r2, #32]
 80030ee:	4b67      	ldr	r3, [pc, #412]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a66      	ldr	r2, [pc, #408]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6213      	str	r3, [r2, #32]
 80030fa:	e01c      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d10c      	bne.n	800311e <HAL_RCC_OscConfig+0x356>
 8003104:	4b61      	ldr	r3, [pc, #388]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a60      	ldr	r2, [pc, #384]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	4b5e      	ldr	r3, [pc, #376]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a5d      	ldr	r2, [pc, #372]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6213      	str	r3, [r2, #32]
 800311c:	e00b      	b.n	8003136 <HAL_RCC_OscConfig+0x36e>
 800311e:	4b5b      	ldr	r3, [pc, #364]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a5a      	ldr	r2, [pc, #360]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6213      	str	r3, [r2, #32]
 800312a:	4b58      	ldr	r3, [pc, #352]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a57      	ldr	r2, [pc, #348]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d015      	beq.n	800316a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7fd fb0d 	bl	800075c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003144:	e00a      	b.n	800315c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fd fb09 	bl	800075c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003154:	4293      	cmp	r3, r2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0b1      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315c:	4b4b      	ldr	r3, [pc, #300]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ee      	beq.n	8003146 <HAL_RCC_OscConfig+0x37e>
 8003168:	e014      	b.n	8003194 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fd faf7 	bl	800075c <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fd faf3 	bl	800075c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e09b      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003188:	4b40      	ldr	r3, [pc, #256]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ee      	bne.n	8003172 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d105      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319a:	4b3c      	ldr	r3, [pc, #240]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4a3b      	ldr	r2, [pc, #236]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8087 	beq.w	80032be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	4b36      	ldr	r3, [pc, #216]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d061      	beq.n	8003280 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d146      	bne.n	8003252 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c4:	4b33      	ldr	r3, [pc, #204]	@ (8003294 <HAL_RCC_OscConfig+0x4cc>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fd fac7 	bl	800075c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fd fac3 	bl	800075c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e06d      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e4:	4b29      	ldr	r3, [pc, #164]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f8:	d108      	bne.n	800320c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031fa:	4b24      	ldr	r3, [pc, #144]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4921      	ldr	r1, [pc, #132]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320c:	4b1f      	ldr	r3, [pc, #124]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a19      	ldr	r1, [r3, #32]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	430b      	orrs	r3, r1
 800321e:	491b      	ldr	r1, [pc, #108]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x4cc>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fd fa97 	bl	800075c <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fd fa93 	bl	800075c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e03d      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003244:	4b11      	ldr	r3, [pc, #68]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x46a>
 8003250:	e035      	b.n	80032be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <HAL_RCC_OscConfig+0x4cc>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fd fa80 	bl	800075c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7fd fa7c 	bl	800075c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e026      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_OscConfig+0x4c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x498>
 800327e:	e01e      	b.n	80032be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e019      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
 8003294:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_OscConfig+0x500>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000

080032cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0d0      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e0:	4b6a      	ldr	r3, [pc, #424]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d910      	bls.n	8003310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b67      	ldr	r3, [pc, #412]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 0207 	bic.w	r2, r3, #7
 80032f6:	4965      	ldr	r1, [pc, #404]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fe:	4b63      	ldr	r3, [pc, #396]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0b8      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003328:	4b59      	ldr	r3, [pc, #356]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a58      	ldr	r2, [pc, #352]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003340:	4b53      	ldr	r3, [pc, #332]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4a52      	ldr	r2, [pc, #328]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800334a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334c:	4b50      	ldr	r3, [pc, #320]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	494d      	ldr	r1, [pc, #308]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d040      	beq.n	80033ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b47      	ldr	r3, [pc, #284]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d115      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07f      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b02      	cmp	r3, #2
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338a:	4b41      	ldr	r3, [pc, #260]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e073      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	4b3d      	ldr	r3, [pc, #244]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06b      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033aa:	4b39      	ldr	r3, [pc, #228]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f023 0203 	bic.w	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4936      	ldr	r1, [pc, #216]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033bc:	f7fd f9ce 	bl	800075c <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	e00a      	b.n	80033da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7fd f9ca 	bl	800075c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e053      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 020c 	and.w	r2, r3, #12
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1eb      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ec:	4b27      	ldr	r3, [pc, #156]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d210      	bcs.n	800341c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b24      	ldr	r3, [pc, #144]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4922      	ldr	r1, [pc, #136]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b20      	ldr	r3, [pc, #128]	@ (800348c <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e032      	b.n	8003482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003428:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4916      	ldr	r1, [pc, #88]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003446:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	490e      	ldr	r1, [pc, #56]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800345a:	f000 f821 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800345e:	4602      	mov	r2, r0
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	490a      	ldr	r1, [pc, #40]	@ (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	5ccb      	ldrb	r3, [r1, r3]
 800346e:	fa22 f303 	lsr.w	r3, r2, r3
 8003472:	4a09      	ldr	r2, [pc, #36]	@ (8003498 <HAL_RCC_ClockConfig+0x1cc>)
 8003474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003476:	4b09      	ldr	r3, [pc, #36]	@ (800349c <HAL_RCC_ClockConfig+0x1d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f92c 	bl	80006d8 <HAL_InitTick>

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40022000 	.word	0x40022000
 8003490:	40021000 	.word	0x40021000
 8003494:	08004bb0 	.word	0x08004bb0
 8003498:	20000030 	.word	0x20000030
 800349c:	20000034 	.word	0x20000034

080034a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	2300      	movs	r3, #0
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x94>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x30>
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x36>
 80034ce:	e027      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d0:	4b19      	ldr	r3, [pc, #100]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x98>)
 80034d2:	613b      	str	r3, [r7, #16]
      break;
 80034d4:	e027      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	0c9b      	lsrs	r3, r3, #18
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	4a17      	ldr	r2, [pc, #92]	@ (800353c <HAL_RCC_GetSysClockFreq+0x9c>)
 80034e0:	5cd3      	ldrb	r3, [r2, r3]
 80034e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d010      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ee:	4b11      	ldr	r3, [pc, #68]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x94>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	0c5b      	lsrs	r3, r3, #17
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	4a11      	ldr	r2, [pc, #68]	@ (8003540 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a0d      	ldr	r2, [pc, #52]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x98>)
 8003502:	fb03 f202 	mul.w	r2, r3, r2
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e004      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0c      	ldr	r2, [pc, #48]	@ (8003544 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003514:	fb02 f303 	mul.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	613b      	str	r3, [r7, #16]
      break;
 800351e:	e002      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <HAL_RCC_GetSysClockFreq+0x98>)
 8003522:	613b      	str	r3, [r7, #16]
      break;
 8003524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003526:	693b      	ldr	r3, [r7, #16]
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	007a1200 	.word	0x007a1200
 800353c:	08004bc8 	.word	0x08004bc8
 8003540:	08004bd8 	.word	0x08004bd8
 8003544:	003d0900 	.word	0x003d0900

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b02      	ldr	r3, [pc, #8]	@ (8003558 <HAL_RCC_GetHCLKFreq+0x10>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	20000030 	.word	0x20000030

0800355c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003560:	f7ff fff2 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	4903      	ldr	r1, [pc, #12]	@ (8003580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40021000 	.word	0x40021000
 8003580:	08004bc0 	.word	0x08004bc0

08003584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003588:	f7ff ffde 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0adb      	lsrs	r3, r3, #11
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08004bc0 	.word	0x08004bc0

080035ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b4:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <RCC_Delay+0x34>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <RCC_Delay+0x38>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	0a5b      	lsrs	r3, r3, #9
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035c8:	bf00      	nop
  }
  while (Delay --);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1e5a      	subs	r2, r3, #1
 80035ce:	60fa      	str	r2, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f9      	bne.n	80035c8 <RCC_Delay+0x1c>
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	20000030 	.word	0x20000030
 80035e4:	10624dd3 	.word	0x10624dd3

080035e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e042      	b.n	8003680 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fc ff4c 	bl	80004ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2224      	movs	r2, #36	@ 0x24
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800362a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fd71 	bl	8004114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695a      	ldr	r2, [r3, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	@ 0x28
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4613      	mov	r3, r2
 8003696:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d16d      	bne.n	8003784 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Transmit+0x2c>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e066      	b.n	8003786 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2221      	movs	r2, #33	@ 0x21
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c6:	f7fd f849 	bl	800075c <HAL_GetTick>
 80036ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	88fa      	ldrh	r2, [r7, #6]
 80036d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e0:	d108      	bne.n	80036f4 <HAL_UART_Transmit+0x6c>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d104      	bne.n	80036f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	e003      	b.n	80036fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036fc:	e02a      	b.n	8003754 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2200      	movs	r2, #0
 8003706:	2180      	movs	r1, #128	@ 0x80
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 faf9 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e036      	b.n	8003786 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10b      	bne.n	8003736 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800372c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	3302      	adds	r3, #2
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	e007      	b.n	8003746 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3301      	adds	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1cf      	bne.n	80036fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	2140      	movs	r1, #64	@ 0x40
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fac9 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e006      	b.n	8003786 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b0ba      	sub	sp, #232	@ 0xe8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037bc:	2300      	movs	r3, #0
 80037be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10f      	bne.n	80037f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_UART_IRQHandler+0x66>
 80037e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fbd1 	bl	8003f96 <UART_Receive_IT>
      return;
 80037f4:	e25b      	b.n	8003cae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80de 	beq.w	80039bc <HAL_UART_IRQHandler+0x22c>
 8003800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800380c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003810:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80d1 	beq.w	80039bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_UART_IRQHandler+0xae>
 8003826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f043 0201 	orr.w	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_UART_IRQHandler+0xd2>
 800384a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0202 	orr.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_UART_IRQHandler+0xf6>
 800386e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	f043 0204 	orr.w	r2, r3, #4
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d011      	beq.n	80038b6 <HAL_UART_IRQHandler+0x126>
 8003892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	d105      	bne.n	80038aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800389e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f043 0208 	orr.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 81f2 	beq.w	8003ca4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_UART_IRQHandler+0x14e>
 80038cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fb5c 	bl	8003f96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d103      	bne.n	800390a <HAL_UART_IRQHandler+0x17a>
 8003902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d04f      	beq.n	80039aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa66 	bl	8003ddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d041      	beq.n	80039a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3314      	adds	r3, #20
 8003924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3314      	adds	r3, #20
 8003946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800394a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800394e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1d9      	bne.n	800391e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d013      	beq.n	800399a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003976:	4a7e      	ldr	r2, [pc, #504]	@ (8003b70 <HAL_UART_IRQHandler+0x3e0>)
 8003978:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd f862 	bl	8000a48 <HAL_DMA_Abort_IT>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d016      	beq.n	80039b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003994:	4610      	mov	r0, r2
 8003996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e00e      	b.n	80039b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f99c 	bl	8003cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e00a      	b.n	80039b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f998 	bl	8003cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e006      	b.n	80039b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f994 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039b6:	e175      	b.n	8003ca4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	bf00      	nop
    return;
 80039ba:	e173      	b.n	8003ca4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	f040 814f 	bne.w	8003c64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8148 	beq.w	8003c64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8141 	beq.w	8003c64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 80b6 	beq.w	8003b74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8145 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a26:	429a      	cmp	r2, r3
 8003a28:	f080 813e 	bcs.w	8003ca8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	f000 8088 	beq.w	8003b50 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a6c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a78:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1d9      	bne.n	8003a40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3314      	adds	r3, #20
 8003a92:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ab0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ab4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ab8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e1      	bne.n	8003a8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3314      	adds	r3, #20
 8003ace:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ade:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003aee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003af2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003afa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e3      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	330c      	adds	r3, #12
 8003b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b20:	f023 0310 	bic.w	r3, r3, #16
 8003b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b32:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b34:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e3      	bne.n	8003b0e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc ff41 	bl	80009d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8bf 	bl	8003cea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b6c:	e09c      	b.n	8003ca8 <HAL_UART_IRQHandler+0x518>
 8003b6e:	bf00      	nop
 8003b70:	08003ea1 	.word	0x08003ea1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 808e 	beq.w	8003cac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8089 	beq.w	8003cac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba4:	e853 3f00 	ldrex	r3, [r3]
 8003ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003bbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e3      	bne.n	8003b9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	623b      	str	r3, [r7, #32]
   return(result);
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3314      	adds	r3, #20
 8003bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e3      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0310 	bic.w	r3, r3, #16
 8003c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c3c:	61fa      	str	r2, [r7, #28]
 8003c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	69b9      	ldr	r1, [r7, #24]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e3      	bne.n	8003c18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f844 	bl	8003cea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c62:	e023      	b.n	8003cac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_UART_IRQHandler+0x4f4>
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f923 	bl	8003ec8 <UART_Transmit_IT>
    return;
 8003c82:	e014      	b.n	8003cae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00e      	beq.n	8003cae <HAL_UART_IRQHandler+0x51e>
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f962 	bl	8003f66 <UART_EndTransmit_IT>
    return;
 8003ca2:	e004      	b.n	8003cae <HAL_UART_IRQHandler+0x51e>
    return;
 8003ca4:	bf00      	nop
 8003ca6:	e002      	b.n	8003cae <HAL_UART_IRQHandler+0x51e>
      return;
 8003ca8:	bf00      	nop
 8003caa:	e000      	b.n	8003cae <HAL_UART_IRQHandler+0x51e>
      return;
 8003cac:	bf00      	nop
  }
}
 8003cae:	37e8      	adds	r7, #232	@ 0xe8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b090      	sub	sp, #64	@ 0x40
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d10:	e050      	b.n	8003db4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d04c      	beq.n	8003db4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d20:	f7fc fd1c 	bl	800075c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d241      	bcs.n	8003db4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d50:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d52:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3314      	adds	r3, #20
 8003d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	613b      	str	r3, [r7, #16]
   return(result);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d84:	623a      	str	r2, [r7, #32]
 8003d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	69f9      	ldr	r1, [r7, #28]
 8003d8a:	6a3a      	ldr	r2, [r7, #32]
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e5      	bne.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e00f      	b.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d09f      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3740      	adds	r7, #64	@ 0x40
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b095      	sub	sp, #84	@ 0x54
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e04:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e5      	bne.n	8003de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e5      	bne.n	8003e18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d119      	bne.n	8003e88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f023 0310 	bic.w	r3, r3, #16
 8003e6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e74:	61ba      	str	r2, [r7, #24]
 8003e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6979      	ldr	r1, [r7, #20]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	613b      	str	r3, [r7, #16]
   return(result);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e5      	bne.n	8003e54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e96:	bf00      	nop
 8003e98:	3754      	adds	r7, #84	@ 0x54
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff ff0c 	bl	8003cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b21      	cmp	r3, #33	@ 0x21
 8003eda:	d13e      	bne.n	8003f5a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee4:	d114      	bne.n	8003f10 <UART_Transmit_IT+0x48>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d110      	bne.n	8003f10 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f02:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	621a      	str	r2, [r3, #32]
 8003f0e:	e008      	b.n	8003f22 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	1c59      	adds	r1, r3, #1
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6211      	str	r1, [r2, #32]
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f44:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f54:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68da      	ldr	r2, [r3, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff fe94 	bl	8003cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b08c      	sub	sp, #48	@ 0x30
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b22      	cmp	r3, #34	@ 0x22
 8003fa8:	f040 80ae 	bne.w	8004108 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb4:	d117      	bne.n	8003fe6 <UART_Receive_IT+0x50>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d113      	bne.n	8003fe6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	1c9a      	adds	r2, r3, #2
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fe4:	e026      	b.n	8004034 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff8:	d007      	beq.n	800400a <UART_Receive_IT+0x74>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <UART_Receive_IT+0x82>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e008      	b.n	800402a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004024:	b2da      	uxtb	r2, r3
 8004026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004028:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29b      	uxth	r3, r3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	4619      	mov	r1, r3
 8004042:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004044:	2b00      	cmp	r3, #0
 8004046:	d15d      	bne.n	8004104 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0220 	bic.w	r2, r2, #32
 8004056:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0201 	bic.w	r2, r2, #1
 8004076:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	2b01      	cmp	r3, #1
 800408c:	d135      	bne.n	80040fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	613b      	str	r3, [r7, #16]
   return(result);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f023 0310 	bic.w	r3, r3, #16
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b4:	623a      	str	r2, [r7, #32]
 80040b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	69f9      	ldr	r1, [r7, #28]
 80040ba:	6a3a      	ldr	r2, [r7, #32]
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d10a      	bne.n	80040ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fdf9 	bl	8003cea <HAL_UARTEx_RxEventCallback>
 80040f8:	e002      	b.n	8004100 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fde3 	bl	8003cc6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e002      	b.n	800410a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3730      	adds	r7, #48	@ 0x30
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800414e:	f023 030c 	bic.w	r3, r3, #12
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	430b      	orrs	r3, r1
 800415a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2c      	ldr	r2, [pc, #176]	@ (8004228 <UART_SetConfig+0x114>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d103      	bne.n	8004184 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7ff fa02 	bl	8003584 <HAL_RCC_GetPCLK2Freq>
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	e002      	b.n	800418a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004184:	f7ff f9ea 	bl	800355c <HAL_RCC_GetPCLK1Freq>
 8004188:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <UART_SetConfig+0x118>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	0119      	lsls	r1, r3, #4
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009a      	lsls	r2, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c0:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <UART_SetConfig+0x118>)
 80041c2:	fba3 0302 	umull	r0, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2064      	movs	r0, #100	@ 0x64
 80041ca:	fb00 f303 	mul.w	r3, r0, r3
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	3332      	adds	r3, #50	@ 0x32
 80041d4:	4a15      	ldr	r2, [pc, #84]	@ (800422c <UART_SetConfig+0x118>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e0:	4419      	add	r1, r3
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f8:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <UART_SetConfig+0x118>)
 80041fa:	fba3 0302 	umull	r0, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2064      	movs	r0, #100	@ 0x64
 8004202:	fb00 f303 	mul.w	r3, r0, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	@ 0x32
 800420c:	4a07      	ldr	r2, [pc, #28]	@ (800422c <UART_SetConfig+0x118>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	440a      	add	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40013800 	.word	0x40013800
 800422c:	51eb851f 	.word	0x51eb851f

08004230 <siprintf>:
 8004230:	b40e      	push	{r1, r2, r3}
 8004232:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004236:	b500      	push	{lr}
 8004238:	b09c      	sub	sp, #112	@ 0x70
 800423a:	ab1d      	add	r3, sp, #116	@ 0x74
 800423c:	9002      	str	r0, [sp, #8]
 800423e:	9006      	str	r0, [sp, #24]
 8004240:	9107      	str	r1, [sp, #28]
 8004242:	9104      	str	r1, [sp, #16]
 8004244:	4808      	ldr	r0, [pc, #32]	@ (8004268 <siprintf+0x38>)
 8004246:	4909      	ldr	r1, [pc, #36]	@ (800426c <siprintf+0x3c>)
 8004248:	f853 2b04 	ldr.w	r2, [r3], #4
 800424c:	9105      	str	r1, [sp, #20]
 800424e:	6800      	ldr	r0, [r0, #0]
 8004250:	a902      	add	r1, sp, #8
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	f000 f992 	bl	800457c <_svfiprintf_r>
 8004258:	2200      	movs	r2, #0
 800425a:	9b02      	ldr	r3, [sp, #8]
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	b01c      	add	sp, #112	@ 0x70
 8004260:	f85d eb04 	ldr.w	lr, [sp], #4
 8004264:	b003      	add	sp, #12
 8004266:	4770      	bx	lr
 8004268:	2000003c 	.word	0x2000003c
 800426c:	ffff0208 	.word	0xffff0208

08004270 <memset>:
 8004270:	4603      	mov	r3, r0
 8004272:	4402      	add	r2, r0
 8004274:	4293      	cmp	r3, r2
 8004276:	d100      	bne.n	800427a <memset+0xa>
 8004278:	4770      	bx	lr
 800427a:	f803 1b01 	strb.w	r1, [r3], #1
 800427e:	e7f9      	b.n	8004274 <memset+0x4>

08004280 <__errno>:
 8004280:	4b01      	ldr	r3, [pc, #4]	@ (8004288 <__errno+0x8>)
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	2000003c 	.word	0x2000003c

0800428c <__libc_init_array>:
 800428c:	b570      	push	{r4, r5, r6, lr}
 800428e:	2600      	movs	r6, #0
 8004290:	4d0c      	ldr	r5, [pc, #48]	@ (80042c4 <__libc_init_array+0x38>)
 8004292:	4c0d      	ldr	r4, [pc, #52]	@ (80042c8 <__libc_init_array+0x3c>)
 8004294:	1b64      	subs	r4, r4, r5
 8004296:	10a4      	asrs	r4, r4, #2
 8004298:	42a6      	cmp	r6, r4
 800429a:	d109      	bne.n	80042b0 <__libc_init_array+0x24>
 800429c:	f000 fc78 	bl	8004b90 <_init>
 80042a0:	2600      	movs	r6, #0
 80042a2:	4d0a      	ldr	r5, [pc, #40]	@ (80042cc <__libc_init_array+0x40>)
 80042a4:	4c0a      	ldr	r4, [pc, #40]	@ (80042d0 <__libc_init_array+0x44>)
 80042a6:	1b64      	subs	r4, r4, r5
 80042a8:	10a4      	asrs	r4, r4, #2
 80042aa:	42a6      	cmp	r6, r4
 80042ac:	d105      	bne.n	80042ba <__libc_init_array+0x2e>
 80042ae:	bd70      	pop	{r4, r5, r6, pc}
 80042b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b4:	4798      	blx	r3
 80042b6:	3601      	adds	r6, #1
 80042b8:	e7ee      	b.n	8004298 <__libc_init_array+0xc>
 80042ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80042be:	4798      	blx	r3
 80042c0:	3601      	adds	r6, #1
 80042c2:	e7f2      	b.n	80042aa <__libc_init_array+0x1e>
 80042c4:	08004c10 	.word	0x08004c10
 80042c8:	08004c10 	.word	0x08004c10
 80042cc:	08004c10 	.word	0x08004c10
 80042d0:	08004c14 	.word	0x08004c14

080042d4 <__retarget_lock_acquire_recursive>:
 80042d4:	4770      	bx	lr

080042d6 <__retarget_lock_release_recursive>:
 80042d6:	4770      	bx	lr

080042d8 <_free_r>:
 80042d8:	b538      	push	{r3, r4, r5, lr}
 80042da:	4605      	mov	r5, r0
 80042dc:	2900      	cmp	r1, #0
 80042de:	d040      	beq.n	8004362 <_free_r+0x8a>
 80042e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e4:	1f0c      	subs	r4, r1, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bfb8      	it	lt
 80042ea:	18e4      	addlt	r4, r4, r3
 80042ec:	f000 f8de 	bl	80044ac <__malloc_lock>
 80042f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004364 <_free_r+0x8c>)
 80042f2:	6813      	ldr	r3, [r2, #0]
 80042f4:	b933      	cbnz	r3, 8004304 <_free_r+0x2c>
 80042f6:	6063      	str	r3, [r4, #4]
 80042f8:	6014      	str	r4, [r2, #0]
 80042fa:	4628      	mov	r0, r5
 80042fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004300:	f000 b8da 	b.w	80044b8 <__malloc_unlock>
 8004304:	42a3      	cmp	r3, r4
 8004306:	d908      	bls.n	800431a <_free_r+0x42>
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	1821      	adds	r1, r4, r0
 800430c:	428b      	cmp	r3, r1
 800430e:	bf01      	itttt	eq
 8004310:	6819      	ldreq	r1, [r3, #0]
 8004312:	685b      	ldreq	r3, [r3, #4]
 8004314:	1809      	addeq	r1, r1, r0
 8004316:	6021      	streq	r1, [r4, #0]
 8004318:	e7ed      	b.n	80042f6 <_free_r+0x1e>
 800431a:	461a      	mov	r2, r3
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	b10b      	cbz	r3, 8004324 <_free_r+0x4c>
 8004320:	42a3      	cmp	r3, r4
 8004322:	d9fa      	bls.n	800431a <_free_r+0x42>
 8004324:	6811      	ldr	r1, [r2, #0]
 8004326:	1850      	adds	r0, r2, r1
 8004328:	42a0      	cmp	r0, r4
 800432a:	d10b      	bne.n	8004344 <_free_r+0x6c>
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	4401      	add	r1, r0
 8004330:	1850      	adds	r0, r2, r1
 8004332:	4283      	cmp	r3, r0
 8004334:	6011      	str	r1, [r2, #0]
 8004336:	d1e0      	bne.n	80042fa <_free_r+0x22>
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4408      	add	r0, r1
 800433e:	6010      	str	r0, [r2, #0]
 8004340:	6053      	str	r3, [r2, #4]
 8004342:	e7da      	b.n	80042fa <_free_r+0x22>
 8004344:	d902      	bls.n	800434c <_free_r+0x74>
 8004346:	230c      	movs	r3, #12
 8004348:	602b      	str	r3, [r5, #0]
 800434a:	e7d6      	b.n	80042fa <_free_r+0x22>
 800434c:	6820      	ldr	r0, [r4, #0]
 800434e:	1821      	adds	r1, r4, r0
 8004350:	428b      	cmp	r3, r1
 8004352:	bf01      	itttt	eq
 8004354:	6819      	ldreq	r1, [r3, #0]
 8004356:	685b      	ldreq	r3, [r3, #4]
 8004358:	1809      	addeq	r1, r1, r0
 800435a:	6021      	streq	r1, [r4, #0]
 800435c:	6063      	str	r3, [r4, #4]
 800435e:	6054      	str	r4, [r2, #4]
 8004360:	e7cb      	b.n	80042fa <_free_r+0x22>
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	200002ac 	.word	0x200002ac

08004368 <sbrk_aligned>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	4e0f      	ldr	r6, [pc, #60]	@ (80043a8 <sbrk_aligned+0x40>)
 800436c:	460c      	mov	r4, r1
 800436e:	6831      	ldr	r1, [r6, #0]
 8004370:	4605      	mov	r5, r0
 8004372:	b911      	cbnz	r1, 800437a <sbrk_aligned+0x12>
 8004374:	f000 fbaa 	bl	8004acc <_sbrk_r>
 8004378:	6030      	str	r0, [r6, #0]
 800437a:	4621      	mov	r1, r4
 800437c:	4628      	mov	r0, r5
 800437e:	f000 fba5 	bl	8004acc <_sbrk_r>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d103      	bne.n	800438e <sbrk_aligned+0x26>
 8004386:	f04f 34ff 	mov.w	r4, #4294967295
 800438a:	4620      	mov	r0, r4
 800438c:	bd70      	pop	{r4, r5, r6, pc}
 800438e:	1cc4      	adds	r4, r0, #3
 8004390:	f024 0403 	bic.w	r4, r4, #3
 8004394:	42a0      	cmp	r0, r4
 8004396:	d0f8      	beq.n	800438a <sbrk_aligned+0x22>
 8004398:	1a21      	subs	r1, r4, r0
 800439a:	4628      	mov	r0, r5
 800439c:	f000 fb96 	bl	8004acc <_sbrk_r>
 80043a0:	3001      	adds	r0, #1
 80043a2:	d1f2      	bne.n	800438a <sbrk_aligned+0x22>
 80043a4:	e7ef      	b.n	8004386 <sbrk_aligned+0x1e>
 80043a6:	bf00      	nop
 80043a8:	200002a8 	.word	0x200002a8

080043ac <_malloc_r>:
 80043ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043b0:	1ccd      	adds	r5, r1, #3
 80043b2:	f025 0503 	bic.w	r5, r5, #3
 80043b6:	3508      	adds	r5, #8
 80043b8:	2d0c      	cmp	r5, #12
 80043ba:	bf38      	it	cc
 80043bc:	250c      	movcc	r5, #12
 80043be:	2d00      	cmp	r5, #0
 80043c0:	4606      	mov	r6, r0
 80043c2:	db01      	blt.n	80043c8 <_malloc_r+0x1c>
 80043c4:	42a9      	cmp	r1, r5
 80043c6:	d904      	bls.n	80043d2 <_malloc_r+0x26>
 80043c8:	230c      	movs	r3, #12
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	2000      	movs	r0, #0
 80043ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044a8 <_malloc_r+0xfc>
 80043d6:	f000 f869 	bl	80044ac <__malloc_lock>
 80043da:	f8d8 3000 	ldr.w	r3, [r8]
 80043de:	461c      	mov	r4, r3
 80043e0:	bb44      	cbnz	r4, 8004434 <_malloc_r+0x88>
 80043e2:	4629      	mov	r1, r5
 80043e4:	4630      	mov	r0, r6
 80043e6:	f7ff ffbf 	bl	8004368 <sbrk_aligned>
 80043ea:	1c43      	adds	r3, r0, #1
 80043ec:	4604      	mov	r4, r0
 80043ee:	d158      	bne.n	80044a2 <_malloc_r+0xf6>
 80043f0:	f8d8 4000 	ldr.w	r4, [r8]
 80043f4:	4627      	mov	r7, r4
 80043f6:	2f00      	cmp	r7, #0
 80043f8:	d143      	bne.n	8004482 <_malloc_r+0xd6>
 80043fa:	2c00      	cmp	r4, #0
 80043fc:	d04b      	beq.n	8004496 <_malloc_r+0xea>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	4639      	mov	r1, r7
 8004402:	4630      	mov	r0, r6
 8004404:	eb04 0903 	add.w	r9, r4, r3
 8004408:	f000 fb60 	bl	8004acc <_sbrk_r>
 800440c:	4581      	cmp	r9, r0
 800440e:	d142      	bne.n	8004496 <_malloc_r+0xea>
 8004410:	6821      	ldr	r1, [r4, #0]
 8004412:	4630      	mov	r0, r6
 8004414:	1a6d      	subs	r5, r5, r1
 8004416:	4629      	mov	r1, r5
 8004418:	f7ff ffa6 	bl	8004368 <sbrk_aligned>
 800441c:	3001      	adds	r0, #1
 800441e:	d03a      	beq.n	8004496 <_malloc_r+0xea>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	442b      	add	r3, r5
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	f8d8 3000 	ldr.w	r3, [r8]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	bb62      	cbnz	r2, 8004488 <_malloc_r+0xdc>
 800442e:	f8c8 7000 	str.w	r7, [r8]
 8004432:	e00f      	b.n	8004454 <_malloc_r+0xa8>
 8004434:	6822      	ldr	r2, [r4, #0]
 8004436:	1b52      	subs	r2, r2, r5
 8004438:	d420      	bmi.n	800447c <_malloc_r+0xd0>
 800443a:	2a0b      	cmp	r2, #11
 800443c:	d917      	bls.n	800446e <_malloc_r+0xc2>
 800443e:	1961      	adds	r1, r4, r5
 8004440:	42a3      	cmp	r3, r4
 8004442:	6025      	str	r5, [r4, #0]
 8004444:	bf18      	it	ne
 8004446:	6059      	strne	r1, [r3, #4]
 8004448:	6863      	ldr	r3, [r4, #4]
 800444a:	bf08      	it	eq
 800444c:	f8c8 1000 	streq.w	r1, [r8]
 8004450:	5162      	str	r2, [r4, r5]
 8004452:	604b      	str	r3, [r1, #4]
 8004454:	4630      	mov	r0, r6
 8004456:	f000 f82f 	bl	80044b8 <__malloc_unlock>
 800445a:	f104 000b 	add.w	r0, r4, #11
 800445e:	1d23      	adds	r3, r4, #4
 8004460:	f020 0007 	bic.w	r0, r0, #7
 8004464:	1ac2      	subs	r2, r0, r3
 8004466:	bf1c      	itt	ne
 8004468:	1a1b      	subne	r3, r3, r0
 800446a:	50a3      	strne	r3, [r4, r2]
 800446c:	e7af      	b.n	80043ce <_malloc_r+0x22>
 800446e:	6862      	ldr	r2, [r4, #4]
 8004470:	42a3      	cmp	r3, r4
 8004472:	bf0c      	ite	eq
 8004474:	f8c8 2000 	streq.w	r2, [r8]
 8004478:	605a      	strne	r2, [r3, #4]
 800447a:	e7eb      	b.n	8004454 <_malloc_r+0xa8>
 800447c:	4623      	mov	r3, r4
 800447e:	6864      	ldr	r4, [r4, #4]
 8004480:	e7ae      	b.n	80043e0 <_malloc_r+0x34>
 8004482:	463c      	mov	r4, r7
 8004484:	687f      	ldr	r7, [r7, #4]
 8004486:	e7b6      	b.n	80043f6 <_malloc_r+0x4a>
 8004488:	461a      	mov	r2, r3
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	42a3      	cmp	r3, r4
 800448e:	d1fb      	bne.n	8004488 <_malloc_r+0xdc>
 8004490:	2300      	movs	r3, #0
 8004492:	6053      	str	r3, [r2, #4]
 8004494:	e7de      	b.n	8004454 <_malloc_r+0xa8>
 8004496:	230c      	movs	r3, #12
 8004498:	4630      	mov	r0, r6
 800449a:	6033      	str	r3, [r6, #0]
 800449c:	f000 f80c 	bl	80044b8 <__malloc_unlock>
 80044a0:	e794      	b.n	80043cc <_malloc_r+0x20>
 80044a2:	6005      	str	r5, [r0, #0]
 80044a4:	e7d6      	b.n	8004454 <_malloc_r+0xa8>
 80044a6:	bf00      	nop
 80044a8:	200002ac 	.word	0x200002ac

080044ac <__malloc_lock>:
 80044ac:	4801      	ldr	r0, [pc, #4]	@ (80044b4 <__malloc_lock+0x8>)
 80044ae:	f7ff bf11 	b.w	80042d4 <__retarget_lock_acquire_recursive>
 80044b2:	bf00      	nop
 80044b4:	200002a4 	.word	0x200002a4

080044b8 <__malloc_unlock>:
 80044b8:	4801      	ldr	r0, [pc, #4]	@ (80044c0 <__malloc_unlock+0x8>)
 80044ba:	f7ff bf0c 	b.w	80042d6 <__retarget_lock_release_recursive>
 80044be:	bf00      	nop
 80044c0:	200002a4 	.word	0x200002a4

080044c4 <__ssputs_r>:
 80044c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c8:	461f      	mov	r7, r3
 80044ca:	688e      	ldr	r6, [r1, #8]
 80044cc:	4682      	mov	sl, r0
 80044ce:	42be      	cmp	r6, r7
 80044d0:	460c      	mov	r4, r1
 80044d2:	4690      	mov	r8, r2
 80044d4:	680b      	ldr	r3, [r1, #0]
 80044d6:	d82d      	bhi.n	8004534 <__ssputs_r+0x70>
 80044d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044e0:	d026      	beq.n	8004530 <__ssputs_r+0x6c>
 80044e2:	6965      	ldr	r5, [r4, #20]
 80044e4:	6909      	ldr	r1, [r1, #16]
 80044e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044ea:	eba3 0901 	sub.w	r9, r3, r1
 80044ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044f2:	1c7b      	adds	r3, r7, #1
 80044f4:	444b      	add	r3, r9
 80044f6:	106d      	asrs	r5, r5, #1
 80044f8:	429d      	cmp	r5, r3
 80044fa:	bf38      	it	cc
 80044fc:	461d      	movcc	r5, r3
 80044fe:	0553      	lsls	r3, r2, #21
 8004500:	d527      	bpl.n	8004552 <__ssputs_r+0x8e>
 8004502:	4629      	mov	r1, r5
 8004504:	f7ff ff52 	bl	80043ac <_malloc_r>
 8004508:	4606      	mov	r6, r0
 800450a:	b360      	cbz	r0, 8004566 <__ssputs_r+0xa2>
 800450c:	464a      	mov	r2, r9
 800450e:	6921      	ldr	r1, [r4, #16]
 8004510:	f000 fafa 	bl	8004b08 <memcpy>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800451a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	6126      	str	r6, [r4, #16]
 8004522:	444e      	add	r6, r9
 8004524:	6026      	str	r6, [r4, #0]
 8004526:	463e      	mov	r6, r7
 8004528:	6165      	str	r5, [r4, #20]
 800452a:	eba5 0509 	sub.w	r5, r5, r9
 800452e:	60a5      	str	r5, [r4, #8]
 8004530:	42be      	cmp	r6, r7
 8004532:	d900      	bls.n	8004536 <__ssputs_r+0x72>
 8004534:	463e      	mov	r6, r7
 8004536:	4632      	mov	r2, r6
 8004538:	4641      	mov	r1, r8
 800453a:	6820      	ldr	r0, [r4, #0]
 800453c:	f000 faac 	bl	8004a98 <memmove>
 8004540:	2000      	movs	r0, #0
 8004542:	68a3      	ldr	r3, [r4, #8]
 8004544:	1b9b      	subs	r3, r3, r6
 8004546:	60a3      	str	r3, [r4, #8]
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	4433      	add	r3, r6
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004552:	462a      	mov	r2, r5
 8004554:	f000 fae6 	bl	8004b24 <_realloc_r>
 8004558:	4606      	mov	r6, r0
 800455a:	2800      	cmp	r0, #0
 800455c:	d1e0      	bne.n	8004520 <__ssputs_r+0x5c>
 800455e:	4650      	mov	r0, sl
 8004560:	6921      	ldr	r1, [r4, #16]
 8004562:	f7ff feb9 	bl	80042d8 <_free_r>
 8004566:	230c      	movs	r3, #12
 8004568:	f8ca 3000 	str.w	r3, [sl]
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	f04f 30ff 	mov.w	r0, #4294967295
 8004572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	e7e9      	b.n	800454e <__ssputs_r+0x8a>
	...

0800457c <_svfiprintf_r>:
 800457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004580:	4698      	mov	r8, r3
 8004582:	898b      	ldrh	r3, [r1, #12]
 8004584:	4607      	mov	r7, r0
 8004586:	061b      	lsls	r3, r3, #24
 8004588:	460d      	mov	r5, r1
 800458a:	4614      	mov	r4, r2
 800458c:	b09d      	sub	sp, #116	@ 0x74
 800458e:	d510      	bpl.n	80045b2 <_svfiprintf_r+0x36>
 8004590:	690b      	ldr	r3, [r1, #16]
 8004592:	b973      	cbnz	r3, 80045b2 <_svfiprintf_r+0x36>
 8004594:	2140      	movs	r1, #64	@ 0x40
 8004596:	f7ff ff09 	bl	80043ac <_malloc_r>
 800459a:	6028      	str	r0, [r5, #0]
 800459c:	6128      	str	r0, [r5, #16]
 800459e:	b930      	cbnz	r0, 80045ae <_svfiprintf_r+0x32>
 80045a0:	230c      	movs	r3, #12
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	b01d      	add	sp, #116	@ 0x74
 80045aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ae:	2340      	movs	r3, #64	@ 0x40
 80045b0:	616b      	str	r3, [r5, #20]
 80045b2:	2300      	movs	r3, #0
 80045b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045b6:	2320      	movs	r3, #32
 80045b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045bc:	2330      	movs	r3, #48	@ 0x30
 80045be:	f04f 0901 	mov.w	r9, #1
 80045c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80045c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004760 <_svfiprintf_r+0x1e4>
 80045ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045ce:	4623      	mov	r3, r4
 80045d0:	469a      	mov	sl, r3
 80045d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045d6:	b10a      	cbz	r2, 80045dc <_svfiprintf_r+0x60>
 80045d8:	2a25      	cmp	r2, #37	@ 0x25
 80045da:	d1f9      	bne.n	80045d0 <_svfiprintf_r+0x54>
 80045dc:	ebba 0b04 	subs.w	fp, sl, r4
 80045e0:	d00b      	beq.n	80045fa <_svfiprintf_r+0x7e>
 80045e2:	465b      	mov	r3, fp
 80045e4:	4622      	mov	r2, r4
 80045e6:	4629      	mov	r1, r5
 80045e8:	4638      	mov	r0, r7
 80045ea:	f7ff ff6b 	bl	80044c4 <__ssputs_r>
 80045ee:	3001      	adds	r0, #1
 80045f0:	f000 80a7 	beq.w	8004742 <_svfiprintf_r+0x1c6>
 80045f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045f6:	445a      	add	r2, fp
 80045f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80045fa:	f89a 3000 	ldrb.w	r3, [sl]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 809f 	beq.w	8004742 <_svfiprintf_r+0x1c6>
 8004604:	2300      	movs	r3, #0
 8004606:	f04f 32ff 	mov.w	r2, #4294967295
 800460a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800460e:	f10a 0a01 	add.w	sl, sl, #1
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	9307      	str	r3, [sp, #28]
 8004616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800461a:	931a      	str	r3, [sp, #104]	@ 0x68
 800461c:	4654      	mov	r4, sl
 800461e:	2205      	movs	r2, #5
 8004620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004624:	484e      	ldr	r0, [pc, #312]	@ (8004760 <_svfiprintf_r+0x1e4>)
 8004626:	f000 fa61 	bl	8004aec <memchr>
 800462a:	9a04      	ldr	r2, [sp, #16]
 800462c:	b9d8      	cbnz	r0, 8004666 <_svfiprintf_r+0xea>
 800462e:	06d0      	lsls	r0, r2, #27
 8004630:	bf44      	itt	mi
 8004632:	2320      	movmi	r3, #32
 8004634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004638:	0711      	lsls	r1, r2, #28
 800463a:	bf44      	itt	mi
 800463c:	232b      	movmi	r3, #43	@ 0x2b
 800463e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004642:	f89a 3000 	ldrb.w	r3, [sl]
 8004646:	2b2a      	cmp	r3, #42	@ 0x2a
 8004648:	d015      	beq.n	8004676 <_svfiprintf_r+0xfa>
 800464a:	4654      	mov	r4, sl
 800464c:	2000      	movs	r0, #0
 800464e:	f04f 0c0a 	mov.w	ip, #10
 8004652:	9a07      	ldr	r2, [sp, #28]
 8004654:	4621      	mov	r1, r4
 8004656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800465a:	3b30      	subs	r3, #48	@ 0x30
 800465c:	2b09      	cmp	r3, #9
 800465e:	d94b      	bls.n	80046f8 <_svfiprintf_r+0x17c>
 8004660:	b1b0      	cbz	r0, 8004690 <_svfiprintf_r+0x114>
 8004662:	9207      	str	r2, [sp, #28]
 8004664:	e014      	b.n	8004690 <_svfiprintf_r+0x114>
 8004666:	eba0 0308 	sub.w	r3, r0, r8
 800466a:	fa09 f303 	lsl.w	r3, r9, r3
 800466e:	4313      	orrs	r3, r2
 8004670:	46a2      	mov	sl, r4
 8004672:	9304      	str	r3, [sp, #16]
 8004674:	e7d2      	b.n	800461c <_svfiprintf_r+0xa0>
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	9103      	str	r1, [sp, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	bfbb      	ittet	lt
 8004682:	425b      	neglt	r3, r3
 8004684:	f042 0202 	orrlt.w	r2, r2, #2
 8004688:	9307      	strge	r3, [sp, #28]
 800468a:	9307      	strlt	r3, [sp, #28]
 800468c:	bfb8      	it	lt
 800468e:	9204      	strlt	r2, [sp, #16]
 8004690:	7823      	ldrb	r3, [r4, #0]
 8004692:	2b2e      	cmp	r3, #46	@ 0x2e
 8004694:	d10a      	bne.n	80046ac <_svfiprintf_r+0x130>
 8004696:	7863      	ldrb	r3, [r4, #1]
 8004698:	2b2a      	cmp	r3, #42	@ 0x2a
 800469a:	d132      	bne.n	8004702 <_svfiprintf_r+0x186>
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	3402      	adds	r4, #2
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	9203      	str	r2, [sp, #12]
 80046a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004764 <_svfiprintf_r+0x1e8>
 80046b0:	2203      	movs	r2, #3
 80046b2:	4650      	mov	r0, sl
 80046b4:	7821      	ldrb	r1, [r4, #0]
 80046b6:	f000 fa19 	bl	8004aec <memchr>
 80046ba:	b138      	cbz	r0, 80046cc <_svfiprintf_r+0x150>
 80046bc:	2240      	movs	r2, #64	@ 0x40
 80046be:	9b04      	ldr	r3, [sp, #16]
 80046c0:	eba0 000a 	sub.w	r0, r0, sl
 80046c4:	4082      	lsls	r2, r0
 80046c6:	4313      	orrs	r3, r2
 80046c8:	3401      	adds	r4, #1
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d0:	2206      	movs	r2, #6
 80046d2:	4825      	ldr	r0, [pc, #148]	@ (8004768 <_svfiprintf_r+0x1ec>)
 80046d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046d8:	f000 fa08 	bl	8004aec <memchr>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d036      	beq.n	800474e <_svfiprintf_r+0x1d2>
 80046e0:	4b22      	ldr	r3, [pc, #136]	@ (800476c <_svfiprintf_r+0x1f0>)
 80046e2:	bb1b      	cbnz	r3, 800472c <_svfiprintf_r+0x1b0>
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	3307      	adds	r3, #7
 80046e8:	f023 0307 	bic.w	r3, r3, #7
 80046ec:	3308      	adds	r3, #8
 80046ee:	9303      	str	r3, [sp, #12]
 80046f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046f2:	4433      	add	r3, r6
 80046f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f6:	e76a      	b.n	80045ce <_svfiprintf_r+0x52>
 80046f8:	460c      	mov	r4, r1
 80046fa:	2001      	movs	r0, #1
 80046fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004700:	e7a8      	b.n	8004654 <_svfiprintf_r+0xd8>
 8004702:	2300      	movs	r3, #0
 8004704:	f04f 0c0a 	mov.w	ip, #10
 8004708:	4619      	mov	r1, r3
 800470a:	3401      	adds	r4, #1
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	4620      	mov	r0, r4
 8004710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004714:	3a30      	subs	r2, #48	@ 0x30
 8004716:	2a09      	cmp	r2, #9
 8004718:	d903      	bls.n	8004722 <_svfiprintf_r+0x1a6>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0c6      	beq.n	80046ac <_svfiprintf_r+0x130>
 800471e:	9105      	str	r1, [sp, #20]
 8004720:	e7c4      	b.n	80046ac <_svfiprintf_r+0x130>
 8004722:	4604      	mov	r4, r0
 8004724:	2301      	movs	r3, #1
 8004726:	fb0c 2101 	mla	r1, ip, r1, r2
 800472a:	e7f0      	b.n	800470e <_svfiprintf_r+0x192>
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	462a      	mov	r2, r5
 8004732:	4638      	mov	r0, r7
 8004734:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <_svfiprintf_r+0x1f4>)
 8004736:	a904      	add	r1, sp, #16
 8004738:	f3af 8000 	nop.w
 800473c:	1c42      	adds	r2, r0, #1
 800473e:	4606      	mov	r6, r0
 8004740:	d1d6      	bne.n	80046f0 <_svfiprintf_r+0x174>
 8004742:	89ab      	ldrh	r3, [r5, #12]
 8004744:	065b      	lsls	r3, r3, #25
 8004746:	f53f af2d 	bmi.w	80045a4 <_svfiprintf_r+0x28>
 800474a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800474c:	e72c      	b.n	80045a8 <_svfiprintf_r+0x2c>
 800474e:	ab03      	add	r3, sp, #12
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	462a      	mov	r2, r5
 8004754:	4638      	mov	r0, r7
 8004756:	4b06      	ldr	r3, [pc, #24]	@ (8004770 <_svfiprintf_r+0x1f4>)
 8004758:	a904      	add	r1, sp, #16
 800475a:	f000 f87d 	bl	8004858 <_printf_i>
 800475e:	e7ed      	b.n	800473c <_svfiprintf_r+0x1c0>
 8004760:	08004bda 	.word	0x08004bda
 8004764:	08004be0 	.word	0x08004be0
 8004768:	08004be4 	.word	0x08004be4
 800476c:	00000000 	.word	0x00000000
 8004770:	080044c5 	.word	0x080044c5

08004774 <_printf_common>:
 8004774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004778:	4616      	mov	r6, r2
 800477a:	4698      	mov	r8, r3
 800477c:	688a      	ldr	r2, [r1, #8]
 800477e:	690b      	ldr	r3, [r1, #16]
 8004780:	4607      	mov	r7, r0
 8004782:	4293      	cmp	r3, r2
 8004784:	bfb8      	it	lt
 8004786:	4613      	movlt	r3, r2
 8004788:	6033      	str	r3, [r6, #0]
 800478a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800478e:	460c      	mov	r4, r1
 8004790:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004794:	b10a      	cbz	r2, 800479a <_printf_common+0x26>
 8004796:	3301      	adds	r3, #1
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	0699      	lsls	r1, r3, #26
 800479e:	bf42      	ittt	mi
 80047a0:	6833      	ldrmi	r3, [r6, #0]
 80047a2:	3302      	addmi	r3, #2
 80047a4:	6033      	strmi	r3, [r6, #0]
 80047a6:	6825      	ldr	r5, [r4, #0]
 80047a8:	f015 0506 	ands.w	r5, r5, #6
 80047ac:	d106      	bne.n	80047bc <_printf_common+0x48>
 80047ae:	f104 0a19 	add.w	sl, r4, #25
 80047b2:	68e3      	ldr	r3, [r4, #12]
 80047b4:	6832      	ldr	r2, [r6, #0]
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	42ab      	cmp	r3, r5
 80047ba:	dc2b      	bgt.n	8004814 <_printf_common+0xa0>
 80047bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047c0:	6822      	ldr	r2, [r4, #0]
 80047c2:	3b00      	subs	r3, #0
 80047c4:	bf18      	it	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	0692      	lsls	r2, r2, #26
 80047ca:	d430      	bmi.n	800482e <_printf_common+0xba>
 80047cc:	4641      	mov	r1, r8
 80047ce:	4638      	mov	r0, r7
 80047d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047d4:	47c8      	blx	r9
 80047d6:	3001      	adds	r0, #1
 80047d8:	d023      	beq.n	8004822 <_printf_common+0xae>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	6922      	ldr	r2, [r4, #16]
 80047de:	f003 0306 	and.w	r3, r3, #6
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	bf14      	ite	ne
 80047e6:	2500      	movne	r5, #0
 80047e8:	6833      	ldreq	r3, [r6, #0]
 80047ea:	f04f 0600 	mov.w	r6, #0
 80047ee:	bf08      	it	eq
 80047f0:	68e5      	ldreq	r5, [r4, #12]
 80047f2:	f104 041a 	add.w	r4, r4, #26
 80047f6:	bf08      	it	eq
 80047f8:	1aed      	subeq	r5, r5, r3
 80047fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80047fe:	bf08      	it	eq
 8004800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004804:	4293      	cmp	r3, r2
 8004806:	bfc4      	itt	gt
 8004808:	1a9b      	subgt	r3, r3, r2
 800480a:	18ed      	addgt	r5, r5, r3
 800480c:	42b5      	cmp	r5, r6
 800480e:	d11a      	bne.n	8004846 <_printf_common+0xd2>
 8004810:	2000      	movs	r0, #0
 8004812:	e008      	b.n	8004826 <_printf_common+0xb2>
 8004814:	2301      	movs	r3, #1
 8004816:	4652      	mov	r2, sl
 8004818:	4641      	mov	r1, r8
 800481a:	4638      	mov	r0, r7
 800481c:	47c8      	blx	r9
 800481e:	3001      	adds	r0, #1
 8004820:	d103      	bne.n	800482a <_printf_common+0xb6>
 8004822:	f04f 30ff 	mov.w	r0, #4294967295
 8004826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482a:	3501      	adds	r5, #1
 800482c:	e7c1      	b.n	80047b2 <_printf_common+0x3e>
 800482e:	2030      	movs	r0, #48	@ 0x30
 8004830:	18e1      	adds	r1, r4, r3
 8004832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800483c:	4422      	add	r2, r4
 800483e:	3302      	adds	r3, #2
 8004840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004844:	e7c2      	b.n	80047cc <_printf_common+0x58>
 8004846:	2301      	movs	r3, #1
 8004848:	4622      	mov	r2, r4
 800484a:	4641      	mov	r1, r8
 800484c:	4638      	mov	r0, r7
 800484e:	47c8      	blx	r9
 8004850:	3001      	adds	r0, #1
 8004852:	d0e6      	beq.n	8004822 <_printf_common+0xae>
 8004854:	3601      	adds	r6, #1
 8004856:	e7d9      	b.n	800480c <_printf_common+0x98>

08004858 <_printf_i>:
 8004858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800485c:	7e0f      	ldrb	r7, [r1, #24]
 800485e:	4691      	mov	r9, r2
 8004860:	2f78      	cmp	r7, #120	@ 0x78
 8004862:	4680      	mov	r8, r0
 8004864:	460c      	mov	r4, r1
 8004866:	469a      	mov	sl, r3
 8004868:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800486a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800486e:	d807      	bhi.n	8004880 <_printf_i+0x28>
 8004870:	2f62      	cmp	r7, #98	@ 0x62
 8004872:	d80a      	bhi.n	800488a <_printf_i+0x32>
 8004874:	2f00      	cmp	r7, #0
 8004876:	f000 80d3 	beq.w	8004a20 <_printf_i+0x1c8>
 800487a:	2f58      	cmp	r7, #88	@ 0x58
 800487c:	f000 80ba 	beq.w	80049f4 <_printf_i+0x19c>
 8004880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004888:	e03a      	b.n	8004900 <_printf_i+0xa8>
 800488a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800488e:	2b15      	cmp	r3, #21
 8004890:	d8f6      	bhi.n	8004880 <_printf_i+0x28>
 8004892:	a101      	add	r1, pc, #4	@ (adr r1, 8004898 <_printf_i+0x40>)
 8004894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004898:	080048f1 	.word	0x080048f1
 800489c:	08004905 	.word	0x08004905
 80048a0:	08004881 	.word	0x08004881
 80048a4:	08004881 	.word	0x08004881
 80048a8:	08004881 	.word	0x08004881
 80048ac:	08004881 	.word	0x08004881
 80048b0:	08004905 	.word	0x08004905
 80048b4:	08004881 	.word	0x08004881
 80048b8:	08004881 	.word	0x08004881
 80048bc:	08004881 	.word	0x08004881
 80048c0:	08004881 	.word	0x08004881
 80048c4:	08004a07 	.word	0x08004a07
 80048c8:	0800492f 	.word	0x0800492f
 80048cc:	080049c1 	.word	0x080049c1
 80048d0:	08004881 	.word	0x08004881
 80048d4:	08004881 	.word	0x08004881
 80048d8:	08004a29 	.word	0x08004a29
 80048dc:	08004881 	.word	0x08004881
 80048e0:	0800492f 	.word	0x0800492f
 80048e4:	08004881 	.word	0x08004881
 80048e8:	08004881 	.word	0x08004881
 80048ec:	080049c9 	.word	0x080049c9
 80048f0:	6833      	ldr	r3, [r6, #0]
 80048f2:	1d1a      	adds	r2, r3, #4
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6032      	str	r2, [r6, #0]
 80048f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004900:	2301      	movs	r3, #1
 8004902:	e09e      	b.n	8004a42 <_printf_i+0x1ea>
 8004904:	6833      	ldr	r3, [r6, #0]
 8004906:	6820      	ldr	r0, [r4, #0]
 8004908:	1d19      	adds	r1, r3, #4
 800490a:	6031      	str	r1, [r6, #0]
 800490c:	0606      	lsls	r6, r0, #24
 800490e:	d501      	bpl.n	8004914 <_printf_i+0xbc>
 8004910:	681d      	ldr	r5, [r3, #0]
 8004912:	e003      	b.n	800491c <_printf_i+0xc4>
 8004914:	0645      	lsls	r5, r0, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0xb8>
 8004918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800491c:	2d00      	cmp	r5, #0
 800491e:	da03      	bge.n	8004928 <_printf_i+0xd0>
 8004920:	232d      	movs	r3, #45	@ 0x2d
 8004922:	426d      	negs	r5, r5
 8004924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004928:	230a      	movs	r3, #10
 800492a:	4859      	ldr	r0, [pc, #356]	@ (8004a90 <_printf_i+0x238>)
 800492c:	e011      	b.n	8004952 <_printf_i+0xfa>
 800492e:	6821      	ldr	r1, [r4, #0]
 8004930:	6833      	ldr	r3, [r6, #0]
 8004932:	0608      	lsls	r0, r1, #24
 8004934:	f853 5b04 	ldr.w	r5, [r3], #4
 8004938:	d402      	bmi.n	8004940 <_printf_i+0xe8>
 800493a:	0649      	lsls	r1, r1, #25
 800493c:	bf48      	it	mi
 800493e:	b2ad      	uxthmi	r5, r5
 8004940:	2f6f      	cmp	r7, #111	@ 0x6f
 8004942:	6033      	str	r3, [r6, #0]
 8004944:	bf14      	ite	ne
 8004946:	230a      	movne	r3, #10
 8004948:	2308      	moveq	r3, #8
 800494a:	4851      	ldr	r0, [pc, #324]	@ (8004a90 <_printf_i+0x238>)
 800494c:	2100      	movs	r1, #0
 800494e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004952:	6866      	ldr	r6, [r4, #4]
 8004954:	2e00      	cmp	r6, #0
 8004956:	bfa8      	it	ge
 8004958:	6821      	ldrge	r1, [r4, #0]
 800495a:	60a6      	str	r6, [r4, #8]
 800495c:	bfa4      	itt	ge
 800495e:	f021 0104 	bicge.w	r1, r1, #4
 8004962:	6021      	strge	r1, [r4, #0]
 8004964:	b90d      	cbnz	r5, 800496a <_printf_i+0x112>
 8004966:	2e00      	cmp	r6, #0
 8004968:	d04b      	beq.n	8004a02 <_printf_i+0x1aa>
 800496a:	4616      	mov	r6, r2
 800496c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004970:	fb03 5711 	mls	r7, r3, r1, r5
 8004974:	5dc7      	ldrb	r7, [r0, r7]
 8004976:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800497a:	462f      	mov	r7, r5
 800497c:	42bb      	cmp	r3, r7
 800497e:	460d      	mov	r5, r1
 8004980:	d9f4      	bls.n	800496c <_printf_i+0x114>
 8004982:	2b08      	cmp	r3, #8
 8004984:	d10b      	bne.n	800499e <_printf_i+0x146>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	07df      	lsls	r7, r3, #31
 800498a:	d508      	bpl.n	800499e <_printf_i+0x146>
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	6861      	ldr	r1, [r4, #4]
 8004990:	4299      	cmp	r1, r3
 8004992:	bfde      	ittt	le
 8004994:	2330      	movle	r3, #48	@ 0x30
 8004996:	f806 3c01 	strble.w	r3, [r6, #-1]
 800499a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800499e:	1b92      	subs	r2, r2, r6
 80049a0:	6122      	str	r2, [r4, #16]
 80049a2:	464b      	mov	r3, r9
 80049a4:	4621      	mov	r1, r4
 80049a6:	4640      	mov	r0, r8
 80049a8:	f8cd a000 	str.w	sl, [sp]
 80049ac:	aa03      	add	r2, sp, #12
 80049ae:	f7ff fee1 	bl	8004774 <_printf_common>
 80049b2:	3001      	adds	r0, #1
 80049b4:	d14a      	bne.n	8004a4c <_printf_i+0x1f4>
 80049b6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ba:	b004      	add	sp, #16
 80049bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	f043 0320 	orr.w	r3, r3, #32
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	2778      	movs	r7, #120	@ 0x78
 80049ca:	4832      	ldr	r0, [pc, #200]	@ (8004a94 <_printf_i+0x23c>)
 80049cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	6831      	ldr	r1, [r6, #0]
 80049d4:	061f      	lsls	r7, r3, #24
 80049d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80049da:	d402      	bmi.n	80049e2 <_printf_i+0x18a>
 80049dc:	065f      	lsls	r7, r3, #25
 80049de:	bf48      	it	mi
 80049e0:	b2ad      	uxthmi	r5, r5
 80049e2:	6031      	str	r1, [r6, #0]
 80049e4:	07d9      	lsls	r1, r3, #31
 80049e6:	bf44      	itt	mi
 80049e8:	f043 0320 	orrmi.w	r3, r3, #32
 80049ec:	6023      	strmi	r3, [r4, #0]
 80049ee:	b11d      	cbz	r5, 80049f8 <_printf_i+0x1a0>
 80049f0:	2310      	movs	r3, #16
 80049f2:	e7ab      	b.n	800494c <_printf_i+0xf4>
 80049f4:	4826      	ldr	r0, [pc, #152]	@ (8004a90 <_printf_i+0x238>)
 80049f6:	e7e9      	b.n	80049cc <_printf_i+0x174>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f023 0320 	bic.w	r3, r3, #32
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	e7f6      	b.n	80049f0 <_printf_i+0x198>
 8004a02:	4616      	mov	r6, r2
 8004a04:	e7bd      	b.n	8004982 <_printf_i+0x12a>
 8004a06:	6833      	ldr	r3, [r6, #0]
 8004a08:	6825      	ldr	r5, [r4, #0]
 8004a0a:	1d18      	adds	r0, r3, #4
 8004a0c:	6961      	ldr	r1, [r4, #20]
 8004a0e:	6030      	str	r0, [r6, #0]
 8004a10:	062e      	lsls	r6, r5, #24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	d501      	bpl.n	8004a1a <_printf_i+0x1c2>
 8004a16:	6019      	str	r1, [r3, #0]
 8004a18:	e002      	b.n	8004a20 <_printf_i+0x1c8>
 8004a1a:	0668      	lsls	r0, r5, #25
 8004a1c:	d5fb      	bpl.n	8004a16 <_printf_i+0x1be>
 8004a1e:	8019      	strh	r1, [r3, #0]
 8004a20:	2300      	movs	r3, #0
 8004a22:	4616      	mov	r6, r2
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	e7bc      	b.n	80049a2 <_printf_i+0x14a>
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	1d1a      	adds	r2, r3, #4
 8004a2e:	6032      	str	r2, [r6, #0]
 8004a30:	681e      	ldr	r6, [r3, #0]
 8004a32:	6862      	ldr	r2, [r4, #4]
 8004a34:	4630      	mov	r0, r6
 8004a36:	f000 f859 	bl	8004aec <memchr>
 8004a3a:	b108      	cbz	r0, 8004a40 <_printf_i+0x1e8>
 8004a3c:	1b80      	subs	r0, r0, r6
 8004a3e:	6060      	str	r0, [r4, #4]
 8004a40:	6863      	ldr	r3, [r4, #4]
 8004a42:	6123      	str	r3, [r4, #16]
 8004a44:	2300      	movs	r3, #0
 8004a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a4a:	e7aa      	b.n	80049a2 <_printf_i+0x14a>
 8004a4c:	4632      	mov	r2, r6
 8004a4e:	4649      	mov	r1, r9
 8004a50:	4640      	mov	r0, r8
 8004a52:	6923      	ldr	r3, [r4, #16]
 8004a54:	47d0      	blx	sl
 8004a56:	3001      	adds	r0, #1
 8004a58:	d0ad      	beq.n	80049b6 <_printf_i+0x15e>
 8004a5a:	6823      	ldr	r3, [r4, #0]
 8004a5c:	079b      	lsls	r3, r3, #30
 8004a5e:	d413      	bmi.n	8004a88 <_printf_i+0x230>
 8004a60:	68e0      	ldr	r0, [r4, #12]
 8004a62:	9b03      	ldr	r3, [sp, #12]
 8004a64:	4298      	cmp	r0, r3
 8004a66:	bfb8      	it	lt
 8004a68:	4618      	movlt	r0, r3
 8004a6a:	e7a6      	b.n	80049ba <_printf_i+0x162>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4632      	mov	r2, r6
 8004a70:	4649      	mov	r1, r9
 8004a72:	4640      	mov	r0, r8
 8004a74:	47d0      	blx	sl
 8004a76:	3001      	adds	r0, #1
 8004a78:	d09d      	beq.n	80049b6 <_printf_i+0x15e>
 8004a7a:	3501      	adds	r5, #1
 8004a7c:	68e3      	ldr	r3, [r4, #12]
 8004a7e:	9903      	ldr	r1, [sp, #12]
 8004a80:	1a5b      	subs	r3, r3, r1
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	dcf2      	bgt.n	8004a6c <_printf_i+0x214>
 8004a86:	e7eb      	b.n	8004a60 <_printf_i+0x208>
 8004a88:	2500      	movs	r5, #0
 8004a8a:	f104 0619 	add.w	r6, r4, #25
 8004a8e:	e7f5      	b.n	8004a7c <_printf_i+0x224>
 8004a90:	08004beb 	.word	0x08004beb
 8004a94:	08004bfc 	.word	0x08004bfc

08004a98 <memmove>:
 8004a98:	4288      	cmp	r0, r1
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	eb01 0402 	add.w	r4, r1, r2
 8004aa0:	d902      	bls.n	8004aa8 <memmove+0x10>
 8004aa2:	4284      	cmp	r4, r0
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	d807      	bhi.n	8004ab8 <memmove+0x20>
 8004aa8:	1e43      	subs	r3, r0, #1
 8004aaa:	42a1      	cmp	r1, r4
 8004aac:	d008      	beq.n	8004ac0 <memmove+0x28>
 8004aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ab6:	e7f8      	b.n	8004aaa <memmove+0x12>
 8004ab8:	4601      	mov	r1, r0
 8004aba:	4402      	add	r2, r0
 8004abc:	428a      	cmp	r2, r1
 8004abe:	d100      	bne.n	8004ac2 <memmove+0x2a>
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aca:	e7f7      	b.n	8004abc <memmove+0x24>

08004acc <_sbrk_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	2300      	movs	r3, #0
 8004ad0:	4d05      	ldr	r5, [pc, #20]	@ (8004ae8 <_sbrk_r+0x1c>)
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	f7fb fd86 	bl	80005e8 <_sbrk>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_sbrk_r+0x1a>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_sbrk_r+0x1a>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	200002a0 	.word	0x200002a0

08004aec <memchr>:
 8004aec:	4603      	mov	r3, r0
 8004aee:	b510      	push	{r4, lr}
 8004af0:	b2c9      	uxtb	r1, r1
 8004af2:	4402      	add	r2, r0
 8004af4:	4293      	cmp	r3, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	d101      	bne.n	8004afe <memchr+0x12>
 8004afa:	2000      	movs	r0, #0
 8004afc:	e003      	b.n	8004b06 <memchr+0x1a>
 8004afe:	7804      	ldrb	r4, [r0, #0]
 8004b00:	3301      	adds	r3, #1
 8004b02:	428c      	cmp	r4, r1
 8004b04:	d1f6      	bne.n	8004af4 <memchr+0x8>
 8004b06:	bd10      	pop	{r4, pc}

08004b08 <memcpy>:
 8004b08:	440a      	add	r2, r1
 8004b0a:	4291      	cmp	r1, r2
 8004b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b10:	d100      	bne.n	8004b14 <memcpy+0xc>
 8004b12:	4770      	bx	lr
 8004b14:	b510      	push	{r4, lr}
 8004b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b20:	d1f9      	bne.n	8004b16 <memcpy+0xe>
 8004b22:	bd10      	pop	{r4, pc}

08004b24 <_realloc_r>:
 8004b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b28:	4680      	mov	r8, r0
 8004b2a:	4615      	mov	r5, r2
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	b921      	cbnz	r1, 8004b3a <_realloc_r+0x16>
 8004b30:	4611      	mov	r1, r2
 8004b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b36:	f7ff bc39 	b.w	80043ac <_malloc_r>
 8004b3a:	b92a      	cbnz	r2, 8004b48 <_realloc_r+0x24>
 8004b3c:	f7ff fbcc 	bl	80042d8 <_free_r>
 8004b40:	2400      	movs	r4, #0
 8004b42:	4620      	mov	r0, r4
 8004b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b48:	f000 f81a 	bl	8004b80 <_malloc_usable_size_r>
 8004b4c:	4285      	cmp	r5, r0
 8004b4e:	4606      	mov	r6, r0
 8004b50:	d802      	bhi.n	8004b58 <_realloc_r+0x34>
 8004b52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b56:	d8f4      	bhi.n	8004b42 <_realloc_r+0x1e>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4640      	mov	r0, r8
 8004b5c:	f7ff fc26 	bl	80043ac <_malloc_r>
 8004b60:	4607      	mov	r7, r0
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d0ec      	beq.n	8004b40 <_realloc_r+0x1c>
 8004b66:	42b5      	cmp	r5, r6
 8004b68:	462a      	mov	r2, r5
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	bf28      	it	cs
 8004b6e:	4632      	movcs	r2, r6
 8004b70:	f7ff ffca 	bl	8004b08 <memcpy>
 8004b74:	4621      	mov	r1, r4
 8004b76:	4640      	mov	r0, r8
 8004b78:	f7ff fbae 	bl	80042d8 <_free_r>
 8004b7c:	463c      	mov	r4, r7
 8004b7e:	e7e0      	b.n	8004b42 <_realloc_r+0x1e>

08004b80 <_malloc_usable_size_r>:
 8004b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b84:	1f18      	subs	r0, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bfbc      	itt	lt
 8004b8a:	580b      	ldrlt	r3, [r1, r0]
 8004b8c:	18c0      	addlt	r0, r0, r3
 8004b8e:	4770      	bx	lr

08004b90 <_init>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr

08004b9c <_fini>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr
