
PCF8574_Out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd9  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fb  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000620  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ba  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016f  00000000  00000000  00002432  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000025a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	uint32_t delay = 2500; 

    while(1)
    {
			
		unsigned char data = get_input_PCF8574();
  90:	0e 94 56 00 	call	0xac	; 0xac <get_input_PCF8574>
		USART_Transmit(data);
  94:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	81 e1       	ldi	r24, 0x11	; 17
  9c:	9a e7       	ldi	r25, 0x7A	; 122
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0xe>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x18>
  a8:	00 00       	nop
  aa:	f2 cf       	rjmp	.-28     	; 0x90 <main>

000000ac <get_input_PCF8574>:
	I2C_Send_Data(data);
	I2C_Stop();
}


unsigned char get_input_PCF8574(){
  ac:	cf 93       	push	r28
	unsigned char dataFromInput = 0;
	I2C_Init();
  ae:	0e 94 6d 00 	call	0xda	; 0xda <I2C_Init>
	I2C_Start();	
  b2:	0e 94 77 00 	call	0xee	; 0xee <I2C_Start>
	I2C_Send_Data(I2C_PCF_ADDRESS_WITH_READ);
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	0e 94 8b 00 	call	0x116	; 0x116 <I2C_Send_Data>
	dataFromInput = I2C_Read_Data(0);
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 99 00 	call	0x132	; 0x132 <I2C_Read_Data>
  c2:	c8 2f       	mov	r28, r24
	I2C_Stop();
  c4:	0e 94 83 00 	call	0x106	; 0x106 <I2C_Stop>
	return dataFromInput;
}
  c8:	8c 2f       	mov	r24, r28
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <init_telemetry>:
}


void init_telemetry()
{
	USART_Init();
  ce:	0e 94 b1 00 	call	0x162	; 0x162 <USART_Init>
  d2:	08 95       	ret

000000d4 <send_telemetry>:
}

void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
  d4:	0e 94 bd 00 	call	0x17a	; 0x17a <USART_Transmit>
  d8:	08 95       	ret

000000da <I2C_Init>:
﻿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	init_telemetry();
  e0:	0e 94 67 00 	call	0xce	; 0xce <init_telemetry>
	send_telemetry(I2C_STATUS);
  e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  e8:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_telemetry>
  ec:	08 95       	ret

000000ee <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
  ee:	84 ea       	ldi	r24, 0xA4	; 164
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
  f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f8:	88 23       	and	r24, r24
  fa:	e4 f7       	brge	.-8      	; 0xf4 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
  fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 100:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_telemetry>
 104:	08 95       	ret

00000106 <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
 106:	84 e9       	ldi	r24, 0x94	; 148
 108:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 10c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 110:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_telemetry>
 114:	08 95       	ret

00000116 <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 116:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 11a:	84 e8       	ldi	r24, 0x84	; 132
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 120:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 124:	88 23       	and	r24, r24
 126:	e4 f7       	brge	.-8      	; 0x120 <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 128:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 12c:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_telemetry>
 130:	08 95       	ret

00000132 <I2C_Read_Data>:

char err1=0;// сюда вернем ошибку
#define TW_MR_DATA_ASK 0x50 // Ведущий принял данные и передал подтверждение

unsigned char I2C_Read_Data(uint8_t END)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
	/**/
	if(END == 1){
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	21 f4       	brne	.+8      	; 0x142 <I2C_Read_Data+0x10>
		TWCR = (1<<TWINT)|(1<<TWEN);
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 140:	03 c0       	rjmp	.+6      	; 0x148 <I2C_Read_Data+0x16>
	} else{
		TWCR = TWI_Interrupt_Flag|TWI_Enable|TWI_Enable_Acknowledge;
 142:	84 ec       	ldi	r24, 0xC4	; 196
 144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	while(WAIT_UNTIL_TWINT_SET){}		
 148:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14c:	88 23       	and	r24, r24
 14e:	e4 f7       	brge	.-8      	; 0x148 <I2C_Read_Data+0x16>
	send_telemetry(TWDR);							
 150:	cb eb       	ldi	r28, 0xBB	; 187
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	88 81       	ld	r24, Y
 156:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_telemetry>
	return TWDR;
 15a:	88 81       	ld	r24, Y
	while(!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
	if ((TWSR & 0xF8) != TW_MR_DATA_ASK)  err1=1;
	else err1=0;
	return TWDR;
	*/	
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 162:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 166:	87 e6       	ldi	r24, 0x67	; 103
 168:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 178:	08 95       	ret

0000017a <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 17a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 17e:	95 ff       	sbrs	r25, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <USART_Transmit>
	UDR0 = data;
 182:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
