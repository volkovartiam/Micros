
PCF8574_Out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c16  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000923  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063e  00000000  00000000  00001859  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b9  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b7  00000000  00000000  000024bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
		for(int i = 0; i<0xFF; i++){
			set_output_PCF8574(i);
			_delay_ms(100);
		}
		/**/
		unsigned char data = get_input_PCF8574();
  80:	0e 94 4e 00 	call	0x9c	; 0x9c <get_input_PCF8574>
		USART_Transmit(data);
  84:	0e 94 b5 00 	call	0x16a	; 0x16a <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	8f e4       	ldi	r24, 0x4F	; 79
  8c:	93 ec       	ldi	r25, 0xC3	; 195
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x18>
  98:	00 00       	nop
  9a:	f2 cf       	rjmp	.-28     	; 0x80 <main>

0000009c <get_input_PCF8574>:
}


#define READ_END    0x01

unsigned char get_input_PCF8574(){
  9c:	cf 93       	push	r28
	unsigned char dataFromInput = 0;
	I2C_Init();
  9e:	0e 94 65 00 	call	0xca	; 0xca <I2C_Init>
	I2C_Start();	
  a2:	0e 94 6f 00 	call	0xde	; 0xde <I2C_Start>
	I2C_Send_Data(I2C_PCF_ADDRESS_WITH_READ);
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 83 00 	call	0x106	; 0x106 <I2C_Send_Data>
	//I2C_Send_Data(0x00);
	dataFromInput = I2C_Read_Data(0);
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 91 00 	call	0x122	; 0x122 <I2C_Read_Data>
  b2:	c8 2f       	mov	r28, r24
	I2C_Stop();
  b4:	0e 94 7b 00 	call	0xf6	; 0xf6 <I2C_Stop>
	return dataFromInput;
}
  b8:	8c 2f       	mov	r24, r28
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <init_telemetry>:
}


void init_telemetry()
{
	USART_Init();
  be:	0e 94 a9 00 	call	0x152	; 0x152 <USART_Init>
  c2:	08 95       	ret

000000c4 <send_telemetry>:
}

void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
  c4:	0e 94 b5 00 	call	0x16a	; 0x16a <USART_Transmit>
  c8:	08 95       	ret

000000ca <I2C_Init>:
ï»¿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	init_telemetry();
  d0:	0e 94 5f 00 	call	0xbe	; 0xbe <init_telemetry>
	send_telemetry(I2C_STATUS);
  d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  d8:	0e 94 62 00 	call	0xc4	; 0xc4 <send_telemetry>
  dc:	08 95       	ret

000000de <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
  de:	84 ea       	ldi	r24, 0xA4	; 164
  e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
  e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e8:	88 23       	and	r24, r24
  ea:	e4 f7       	brge	.-8      	; 0xe4 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
  ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f0:	0e 94 62 00 	call	0xc4	; 0xc4 <send_telemetry>
  f4:	08 95       	ret

000000f6 <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
  f6:	84 e9       	ldi	r24, 0x94	; 148
  f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
  fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 100:	0e 94 62 00 	call	0xc4	; 0xc4 <send_telemetry>
 104:	08 95       	ret

00000106 <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 106:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 110:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 114:	88 23       	and	r24, r24
 116:	e4 f7       	brge	.-8      	; 0x110 <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 118:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 11c:	0e 94 62 00 	call	0xc4	; 0xc4 <send_telemetry>
 120:	08 95       	ret

00000122 <I2C_Read_Data>:
}


unsigned char I2C_Read_Data(uint8_t END)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
	if(END == 1){
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	21 f4       	brne	.+8      	; 0x132 <I2C_Read_Data+0x10>
		TWCR = (1<<TWINT)|(1<<TWEN);
 12a:	84 e8       	ldi	r24, 0x84	; 132
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 130:	03 c0       	rjmp	.+6      	; 0x138 <I2C_Read_Data+0x16>
	} else{
		TWCR = TWI_Interrupt_Flag|TWI_Enable|TWI_Enable_Acknowledge;
 132:	84 ec       	ldi	r24, 0xC4	; 196
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	while(WAIT_UNTIL_TWINT_SET){}		
 138:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13c:	88 23       	and	r24, r24
 13e:	e4 f7       	brge	.-8      	; 0x138 <I2C_Read_Data+0x16>
	send_telemetry(TWDR);							
 140:	cb eb       	ldi	r28, 0xBB	; 187
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	88 81       	ld	r24, Y
 146:	0e 94 62 00 	call	0xc4	; 0xc4 <send_telemetry>
	return TWDR;
 14a:	88 81       	ld	r24, Y
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 152:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 156:	87 e6       	ldi	r24, 0x67	; 103
 158:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 162:	88 e1       	ldi	r24, 0x18	; 24
 164:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 168:	08 95       	ret

0000016a <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 16a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16e:	95 ff       	sbrs	r25, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <USART_Transmit>
	UDR0 = data;
 172:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 176:	08 95       	ret

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
