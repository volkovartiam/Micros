
PCF8574_Out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c43  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092e  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000644  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b9  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b7  00000000  00000000  00002511  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	PORTB &= ~(1<<PORTB5);
	_delay_ms(2000);
	PORTB |= (1<<PORTB5);
	_delay_ms(2000);
	*/
	init_int();
  80:	0e 94 50 00 	call	0xa0	; 0xa0 <init_int>
		for(int i = 0; i<0xFF; i++){
			set_output_PCF8574(i);
			_delay_ms(100);
		}
		/**/
		unsigned char data = get_input_PCF8574();
  84:	0e 94 57 00 	call	0xae	; 0xae <get_input_PCF8574>
		USART_Transmit(data);
  88:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	8f e4       	ldi	r24, 0x4F	; 79
  90:	93 ec       	ldi	r25, 0xC3	; 195
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
  9e:	f2 cf       	rjmp	.-28     	; 0x84 <main+0x4>

000000a0 <init_int>:
	I2C_Init();
	I2C_Start();
	I2C_Send_Data(I2C_PCF_ADDRESS_WITH_WRITE);
	I2C_Send_Data(data);
	I2C_Stop();
}
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret

000000ae <get_input_PCF8574>:


#define READ_END    0x01

unsigned char get_input_PCF8574(){
  ae:	cf 93       	push	r28
	unsigned char dataFromInput = 0;
	I2C_Init();
  b0:	0e 94 6e 00 	call	0xdc	; 0xdc <I2C_Init>
	I2C_Start();
  b4:	0e 94 78 00 	call	0xf0	; 0xf0 <I2C_Start>
		
	I2C_Send_Data(I2C_PCF_ADDRESS_WITH_READ);
  b8:	82 e4       	ldi	r24, 0x42	; 66
  ba:	0e 94 8c 00 	call	0x118	; 0x118 <I2C_Send_Data>
	dataFromInput = I2C_Read_Data(0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 9a 00 	call	0x134	; 0x134 <I2C_Read_Data>
  c4:	c8 2f       	mov	r28, r24
	I2C_Stop();
  c6:	0e 94 84 00 	call	0x108	; 0x108 <I2C_Stop>
	return dataFromInput;
}
  ca:	8c 2f       	mov	r24, r28
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <init_telemetry>:
}


void init_telemetry()
{
	USART_Init();
  d0:	0e 94 b2 00 	call	0x164	; 0x164 <USART_Init>
  d4:	08 95       	ret

000000d6 <send_telemetry>:
}

void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
  d6:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Transmit>
  da:	08 95       	ret

000000dc <I2C_Init>:
ï»¿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
  dc:	8e e0       	ldi	r24, 0x0E	; 14
  de:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	init_telemetry();
  e2:	0e 94 68 00 	call	0xd0	; 0xd0 <init_telemetry>
	send_telemetry(I2C_STATUS);
  e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ea:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_telemetry>
  ee:	08 95       	ret

000000f0 <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
  f0:	84 ea       	ldi	r24, 0xA4	; 164
  f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
  f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  fa:	88 23       	and	r24, r24
  fc:	e4 f7       	brge	.-8      	; 0xf6 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
  fe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 102:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_telemetry>
 106:	08 95       	ret

00000108 <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
 108:	84 e9       	ldi	r24, 0x94	; 148
 10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 10e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 112:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_telemetry>
 116:	08 95       	ret

00000118 <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 118:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 122:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 126:	88 23       	and	r24, r24
 128:	e4 f7       	brge	.-8      	; 0x122 <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 12a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 12e:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_telemetry>
 132:	08 95       	ret

00000134 <I2C_Read_Data>:
}


unsigned char I2C_Read_Data(uint8_t END)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
	if(END){
 138:	88 23       	and	r24, r24
 13a:	21 f0       	breq	.+8      	; 0x144 <I2C_Read_Data+0x10>
		TWCR = (1<<TWINT)|(1<<TWEN);
 13c:	84 e8       	ldi	r24, 0x84	; 132
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 142:	03 c0       	rjmp	.+6      	; 0x14a <I2C_Read_Data+0x16>
	} else{
		TWCR = TWI_Interrupt_Flag|TWI_Enable|TWI_Enable_Acknowledge;
 144:	84 ec       	ldi	r24, 0xC4	; 196
 146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	while(WAIT_UNTIL_TWINT_SET){}		
 14a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14e:	88 23       	and	r24, r24
 150:	e4 f7       	brge	.-8      	; 0x14a <I2C_Read_Data+0x16>
	send_telemetry(TWDR);							
 152:	cb eb       	ldi	r28, 0xBB	; 187
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	88 81       	ld	r24, Y
 158:	0e 94 6b 00 	call	0xd6	; 0xd6 <send_telemetry>
	return TWDR;
 15c:	88 81       	ld	r24, Y
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 164:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 168:	87 e6       	ldi	r24, 0x67	; 103
 16a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 174:	88 e1       	ldi	r24, 0x18	; 24
 176:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 17a:	08 95       	ret

0000017c <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 17c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 180:	95 ff       	sbrs	r25, 5
 182:	fc cf       	rjmp	.-8      	; 0x17c <USART_Transmit>
	UDR0 = data;
 184:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
