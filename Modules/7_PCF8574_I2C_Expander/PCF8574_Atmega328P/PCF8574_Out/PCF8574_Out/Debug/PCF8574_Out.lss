
PCF8574_Out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b95  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b8  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000585  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00001cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049c  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000135  00000000  00000000  000022b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000023e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
		for(int i = 0; i<0xFF; i++){
			set_output_PCF8574(i);
			_delay_ms(100);
		}
		/**/
		unsigned char data = get_input_PCF8574();
  80:	0e 94 4e 00 	call	0x9c	; 0x9c <get_input_PCF8574>
		USART_Transmit(data);
  84:	0e 94 b4 00 	call	0x168	; 0x168 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	87 ea       	ldi	r24, 0xA7	; 167
  8c:	91 e6       	ldi	r25, 0x61	; 97
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x18>
  98:	00 00       	nop
  9a:	f2 cf       	rjmp	.-28     	; 0x80 <main>

0000009c <get_input_PCF8574>:
	I2C_Send_Data(I2C_PCF_ADDRESS_WITH_WRITE);
	I2C_Send_Data(data);
	I2C_Stop();
}

unsigned char get_input_PCF8574(){
  9c:	cf 93       	push	r28
	unsigned char dataFromInput = 0;
	I2C_Init();
  9e:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Init>
	I2C_Start();
  a2:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_Start>
	
	I2C_Send_Data(I2C_PCF_ADDRESS_WITH_WRITE);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Send_Data>
	I2C_Send_Data(1);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Send_Data>
	
	I2C_Send_Data(I2C_PCF_ADDRESS_WITH_READ);
  b2:	82 e4       	ldi	r24, 0x42	; 66
  b4:	0e 94 88 00 	call	0x110	; 0x110 <I2C_Send_Data>
	dataFromInput = I2C_Read_Data();
  b8:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Read_Data>
  bc:	c8 2f       	mov	r28, r24
	I2C_Stop();
  be:	0e 94 80 00 	call	0x100	; 0x100 <I2C_Stop>
	return dataFromInput;
}
  c2:	8c 2f       	mov	r24, r28
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <init_telemetry>:
}


void init_telemetry()
{
	USART_Init();
  c8:	0e 94 a8 00 	call	0x150	; 0x150 <USART_Init>
  cc:	08 95       	ret

000000ce <send_telemetry>:
}

void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
  ce:	0e 94 b4 00 	call	0x168	; 0x168 <USART_Transmit>
  d2:	08 95       	ret

000000d4 <I2C_Init>:
ï»¿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
  d4:	8e e0       	ldi	r24, 0x0E	; 14
  d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	init_telemetry();
  da:	0e 94 64 00 	call	0xc8	; 0xc8 <init_telemetry>
	send_telemetry(I2C_STATUS);
  de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  e2:	0e 94 67 00 	call	0xce	; 0xce <send_telemetry>
  e6:	08 95       	ret

000000e8 <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
  e8:	84 ea       	ldi	r24, 0xA4	; 164
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
  ee:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f2:	88 23       	and	r24, r24
  f4:	e4 f7       	brge	.-8      	; 0xee <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
  f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fa:	0e 94 67 00 	call	0xce	; 0xce <send_telemetry>
  fe:	08 95       	ret

00000100 <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
 100:	84 e9       	ldi	r24, 0x94	; 148
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 106:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 10a:	0e 94 67 00 	call	0xce	; 0xce <send_telemetry>
 10e:	08 95       	ret

00000110 <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 110:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 11a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11e:	88 23       	and	r24, r24
 120:	e4 f7       	brge	.-8      	; 0x11a <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 122:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 126:	0e 94 67 00 	call	0xce	; 0xce <send_telemetry>
 12a:	08 95       	ret

0000012c <I2C_Read_Data>:
}


unsigned char I2C_Read_Data(void)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
	TWCR = TWI_Interrupt_Flag|TWI_Enable|TWI_Enable_Acknowledge;
 130:	84 ec       	ldi	r24, 0xC4	; 196
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}		
 136:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13a:	88 23       	and	r24, r24
 13c:	e4 f7       	brge	.-8      	; 0x136 <I2C_Read_Data+0xa>
	send_telemetry(TWDR);							
 13e:	cb eb       	ldi	r28, 0xBB	; 187
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	88 81       	ld	r24, Y
 144:	0e 94 67 00 	call	0xce	; 0xce <send_telemetry>
	return TWDR;
 148:	88 81       	ld	r24, Y
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 150:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 154:	87 e6       	ldi	r24, 0x67	; 103
 156:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 160:	88 e1       	ldi	r24, 0x18	; 24
 162:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 166:	08 95       	ret

00000168 <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 168:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16c:	95 ff       	sbrs	r25, 5
 16e:	fc cf       	rjmp	.-8      	; 0x168 <USART_Transmit>
	UDR0 = data;
 170:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
