
PCF8574_Input.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac5  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000545  00000000  00000000  0000163a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046d  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d5  00000000  00000000  000020e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
		#define READ (1 << 1)
		#define WRITE (0 << 1)
		#define I2C_PCF_ADDRESS_WITH_READ PCF8574_ADDRESS|READ
		#define I2C_PCF_ADDRESS_WITH_WRITE PCF8574_ADDRESS|WRITE
		
		I2C_Init();
  90:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Init>
		I2C_Start();
  94:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Start>
		I2C_Send_Data(PCF8574_ADDRESS + 1);
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <I2C_Send_Data>
		unsigned char data = I2C_Read_Data(1);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Read_Data>
  a4:	c8 2f       	mov	r28, r24
		I2C_Stop();
  a6:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_Stop>
		USART_Transmit(data);
  aa:	8c 2f       	mov	r24, r28
  ac:	0e 94 b7 00 	call	0x16e	; 0x16e <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	81 e1       	ldi	r24, 0x11	; 17
  b4:	9a e7       	ldi	r25, 0x7A	; 122
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x26>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x30>
  c0:	00 00       	nop
  c2:	e6 cf       	rjmp	.-52     	; 0x90 <main>

000000c4 <I2C_Read_Data>:
	while(WAIT_UNTIL_TWINT_SET){}		
	send_telemetry(TWDR);							
	return TWDR;
	*/
	
	err1=0;
  c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);//включим прием данных
  c8:	84 ec       	ldi	r24, 0xC4	; 196
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
  ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d2:	88 23       	and	r24, r24
  d4:	e4 f7       	brge	.-8      	; 0xce <I2C_Read_Data+0xa>
	if ((TWSR & 0xF8) != TW_MR_DATA_ASK)  err1=1;
  d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  da:	88 7f       	andi	r24, 0xF8	; 248
  dc:	80 35       	cpi	r24, 0x50	; 80
  de:	21 f0       	breq	.+8      	; 0xe8 <I2C_Read_Data+0x24>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	02 c0       	rjmp	.+4      	; 0xec <I2C_Read_Data+0x28>
	else err1=0;
  e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	return TWDR;
  ec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		
}
  f0:	08 95       	ret

000000f2 <init_telemetry>:


void init_telemetry()
{
	USART_Init();
  f2:	0e 94 ab 00 	call	0x156	; 0x156 <USART_Init>
  f6:	08 95       	ret

000000f8 <send_telemetry>:
}

void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
  f8:	0e 94 b7 00 	call	0x16e	; 0x16e <USART_Transmit>
  fc:	08 95       	ret

000000fe <I2C_Init>:
﻿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
  fe:	8e e0       	ldi	r24, 0x0E	; 14
 100:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	init_telemetry();
 104:	0e 94 79 00 	call	0xf2	; 0xf2 <init_telemetry>
	send_telemetry(I2C_STATUS);
 108:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 10c:	0e 94 7c 00 	call	0xf8	; 0xf8 <send_telemetry>
 110:	08 95       	ret

00000112 <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
 112:	84 ea       	ldi	r24, 0xA4	; 164
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	88 23       	and	r24, r24
 11e:	e4 f7       	brge	.-8      	; 0x118 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
 120:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 124:	0e 94 7c 00 	call	0xf8	; 0xf8 <send_telemetry>
 128:	08 95       	ret

0000012a <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
 12a:	84 e9       	ldi	r24, 0x94	; 148
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 130:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 134:	0e 94 7c 00 	call	0xf8	; 0xf8 <send_telemetry>
 138:	08 95       	ret

0000013a <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 13a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 13e:	84 e8       	ldi	r24, 0x84	; 132
 140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 144:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 148:	88 23       	and	r24, r24
 14a:	e4 f7       	brge	.-8      	; 0x144 <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 14c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 150:	0e 94 7c 00 	call	0xf8	; 0xf8 <send_telemetry>
 154:	08 95       	ret

00000156 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 156:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 15a:	87 e6       	ldi	r24, 0x67	; 103
 15c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 166:	88 e1       	ldi	r24, 0x18	; 24
 168:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 16c:	08 95       	ret

0000016e <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 16e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 172:	95 ff       	sbrs	r25, 5
 174:	fc cf       	rjmp	.-8      	; 0x16e <USART_Transmit>
	UDR0 = data;
 176:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17a:	08 95       	ret

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
