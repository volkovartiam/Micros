
MCP23017_Out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a50  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000816  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050f  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045c  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b7  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002037  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
		//USART_Transmit(data);
		_delay_ms(delay);
		/**/
		
		/**/
		I2C_Init();
  90:	0e 94 67 00 	call	0xce	; 0xce <I2C_Init>
		I2C_Start();
  94:	0e 94 71 00 	call	0xe2	; 0xe2 <I2C_Start>
		I2C_Send_Data(ADDRESS_WITH_WRITE);
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_Send_Data>
		I2C_Send_Data(0x00);
				
		I2C_Send_Data(0x06);	// GPPUA
		I2C_Send_Data(0xFF);
		*/
		I2C_Send_Data(0x09);	// GPIO
  9e:	89 e0       	ldi	r24, 0x09	; 9
  a0:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_Send_Data>
		I2C_Send_Data(0xFF);
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_Send_Data>
		I2C_Stop();
  aa:	0e 94 7d 00 	call	0xfa	; 0xfa <I2C_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	81 e1       	ldi	r24, 0x11	; 17
  b2:	9a e7       	ldi	r25, 0x7A	; 122
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x24>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x2e>
  be:	00 00       	nop
  c0:	e7 cf       	rjmp	.-50     	; 0x90 <main>

000000c2 <init_telemetry>:
}


void init_telemetry()
{
	USART_Init();
  c2:	0e 94 93 00 	call	0x126	; 0x126 <USART_Init>
  c6:	08 95       	ret

000000c8 <send_telemetry>:
}

void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
  c8:	0e 94 9f 00 	call	0x13e	; 0x13e <USART_Transmit>
  cc:	08 95       	ret

000000ce <I2C_Init>:
ï»¿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
  ce:	8e e0       	ldi	r24, 0x0E	; 14
  d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	init_telemetry();
  d4:	0e 94 61 00 	call	0xc2	; 0xc2 <init_telemetry>
	send_telemetry(I2C_STATUS);
  d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  dc:	0e 94 64 00 	call	0xc8	; 0xc8 <send_telemetry>
  e0:	08 95       	ret

000000e2 <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
  e2:	84 ea       	ldi	r24, 0xA4	; 164
  e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
  e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ec:	88 23       	and	r24, r24
  ee:	e4 f7       	brge	.-8      	; 0xe8 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
  f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f4:	0e 94 64 00 	call	0xc8	; 0xc8 <send_telemetry>
  f8:	08 95       	ret

000000fa <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
  fa:	84 e9       	ldi	r24, 0x94	; 148
  fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 100:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 104:	0e 94 64 00 	call	0xc8	; 0xc8 <send_telemetry>
 108:	08 95       	ret

0000010a <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 10a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 114:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 118:	88 23       	and	r24, r24
 11a:	e4 f7       	brge	.-8      	; 0x114 <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 11c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 120:	0e 94 64 00 	call	0xc8	; 0xc8 <send_telemetry>
 124:	08 95       	ret

00000126 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 126:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 12a:	87 e6       	ldi	r24, 0x67	; 103
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 136:	88 e1       	ldi	r24, 0x18	; 24
 138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 13c:	08 95       	ret

0000013e <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 13e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 142:	95 ff       	sbrs	r25, 5
 144:	fc cf       	rjmp	.-8      	; 0x13e <USART_Transmit>
	UDR0 = data;
 146:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
