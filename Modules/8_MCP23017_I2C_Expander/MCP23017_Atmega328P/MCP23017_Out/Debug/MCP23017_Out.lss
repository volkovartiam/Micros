
MCP23017_Out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f1f  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000882  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070e  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00002214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000496  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b4  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000029a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <port_A_input>:
	return data;
}


uint8_t port_A_input(uint8_t data)
{
  90:	cf 93       	push	r28
		I2C_Init();
  92:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Init>
		I2C_Start();
  96:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_Start>
		I2C_Send_Data(ADDRESS_WITH_WRITE);
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
		I2C_Send_Data(0x00);	
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
		I2C_Send_Data(0xFF);	
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
		I2C_Stop();
  ac:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Stop>
		
		I2C_Init();
  b0:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Init>
		I2C_Start();
  b4:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_Start>
		I2C_Send_Data(ADDRESS_WITH_WRITE);
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
		I2C_Send_Data(0x0C);	
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
		I2C_Send_Data(0xFF);	
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
		I2C_Stop();
  ca:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Stop>
			
		I2C_Init();
  ce:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_Init>
		I2C_Start();
  d2:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_Start>
		I2C_Send_Data(ADDRESS_WITH_WRITE);
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
		I2C_Send_Data(0x12);			//
  dc:	82 e1       	ldi	r24, 0x12	; 18
  de:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
	
		I2C_Start();
  e2:	0e 94 a0 00 	call	0x140	; 0x140 <I2C_Start>
		I2C_Send_Data(ADDRESS_WITH_READ);
  e6:	81 e4       	ldi	r24, 0x41	; 65
  e8:	0e 94 b4 00 	call	0x168	; 0x168 <I2C_Send_Data>
		data = I2C_Read_Data(1);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Read_Data>
  f2:	c8 2f       	mov	r28, r24
		I2C_Stop();
  f4:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_Stop>
	return data;
}
  f8:	8c 2f       	mov	r24, r28
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <main>:


int main(void)
{
	uint32_t delay = 2500; 
	uint8_t data = 0;
  fe:	c0 e0       	ldi	r28, 0x00	; 0
		//turn_all_HIGH();	
		//turn_A_HIGH_B_LOW();
		//data = read_example(data);
		
		
		data = port_A_input(data);
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 48 00 	call	0x90	; 0x90 <port_A_input>
 106:	c8 2f       	mov	r28, r24

		USART_Transmit(data);
 108:	0e 94 e6 00 	call	0x1cc	; 0x1cc <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	81 e1       	ldi	r24, 0x11	; 17
 110:	9a e7       	ldi	r25, 0x7A	; 122
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x14>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x1e>
 11c:	00 00       	nop
 11e:	f0 cf       	rjmp	.-32     	; 0x100 <main+0x2>

00000120 <init_telemetry>:
}


void init_telemetry()
{
	USART_Init();
 120:	0e 94 da 00 	call	0x1b4	; 0x1b4 <USART_Init>
 124:	08 95       	ret

00000126 <send_telemetry>:
}

void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
 126:	0e 94 e6 00 	call	0x1cc	; 0x1cc <USART_Transmit>
 12a:	08 95       	ret

0000012c <I2C_Init>:
﻿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
 12c:	8e e0       	ldi	r24, 0x0E	; 14
 12e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	init_telemetry();
 132:	0e 94 90 00 	call	0x120	; 0x120 <init_telemetry>
	send_telemetry(I2C_STATUS);
 136:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 13a:	0e 94 93 00 	call	0x126	; 0x126 <send_telemetry>
 13e:	08 95       	ret

00000140 <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
 140:	84 ea       	ldi	r24, 0xA4	; 164
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 146:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14a:	88 23       	and	r24, r24
 14c:	e4 f7       	brge	.-8      	; 0x146 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
 14e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 152:	0e 94 93 00 	call	0x126	; 0x126 <send_telemetry>
 156:	08 95       	ret

00000158 <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
 158:	84 e9       	ldi	r24, 0x94	; 148
 15a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 15e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 162:	0e 94 93 00 	call	0x126	; 0x126 <send_telemetry>
 166:	08 95       	ret

00000168 <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 168:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 172:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 176:	88 23       	and	r24, r24
 178:	e4 f7       	brge	.-8      	; 0x172 <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 17a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17e:	0e 94 93 00 	call	0x126	; 0x126 <send_telemetry>
 182:	08 95       	ret

00000184 <I2C_Read_Data>:

char err1=0;// сюда вернем ошибку
#define TW_MR_DATA_ASK 0x50 // Ведущий принял данные и передал подтверждение

unsigned char I2C_Read_Data(uint8_t END)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
	/**/
	if(END == 1){
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	21 f4       	brne	.+8      	; 0x194 <I2C_Read_Data+0x10>
		TWCR = (1<<TWINT)|(1<<TWEN);
 18c:	84 e8       	ldi	r24, 0x84	; 132
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 192:	03 c0       	rjmp	.+6      	; 0x19a <I2C_Read_Data+0x16>
	} else{
		TWCR = TWI_Interrupt_Flag|TWI_Enable|TWI_Enable_Acknowledge;
 194:	84 ec       	ldi	r24, 0xC4	; 196
 196:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	while(WAIT_UNTIL_TWINT_SET){}		
 19a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19e:	88 23       	and	r24, r24
 1a0:	e4 f7       	brge	.-8      	; 0x19a <I2C_Read_Data+0x16>
	send_telemetry(TWDR);							
 1a2:	cb eb       	ldi	r28, 0xBB	; 187
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	88 81       	ld	r24, Y
 1a8:	0e 94 93 00 	call	0x126	; 0x126 <send_telemetry>
	return TWDR;
 1ac:	88 81       	ld	r24, Y
	while(!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
	if ((TWSR & 0xF8) != TW_MR_DATA_ASK)  err1=1;
	else err1=0;
	return TWDR;
	*/	
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 1b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1b8:	87 e6       	ldi	r24, 0x67	; 103
 1ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1c4:	88 e1       	ldi	r24, 0x18	; 24
 1c6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1ca:	08 95       	ret

000001cc <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 1cc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1d0:	95 ff       	sbrs	r25, 5
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <USART_Transmit>
	UDR0 = data;
 1d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
