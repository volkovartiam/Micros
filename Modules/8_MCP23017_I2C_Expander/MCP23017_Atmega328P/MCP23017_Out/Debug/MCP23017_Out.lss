
MCP23017_Out.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d99  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000848  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000683  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047c  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d5  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002651  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <turn_A_HIGH_B_LOW>:
}


void turn_A_HIGH_B_LOW()
{
	I2C_Init();
  90:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Init>
	I2C_Start();
  94:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_Start>
	I2C_Send_Data(ADDRESS_WITH_WRITE);
  98:	80 e4       	ldi	r24, 0x40	; 64
  9a:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Send_Data(0x00);	// IODIRA
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Send_Data(0x00);	// sets all port A pins to outputs
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Stop();
  aa:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Stop>
			
	I2C_Init();
  ae:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Init>
	I2C_Start();
  b2:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_Start>
	I2C_Send_Data(ADDRESS_WITH_WRITE);
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Send_Data(0x01);	// IODIRB
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Send_Data(0x00);	// sets all port B pins to outputs
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Stop();
  c8:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Stop>
			
	I2C_Init();
  cc:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Init>
	I2C_Start();
  d0:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_Start>
	I2C_Send_Data(ADDRESS_WITH_WRITE);
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Send_Data(0x12);			//
  da:	82 e1       	ldi	r24, 0x12	; 18
  dc:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	//I2C_Send_Data(0x00);			// sets all port to HIGH
	I2C_Send_Data(0b11111100);		// 
  e0:	8c ef       	ldi	r24, 0xFC	; 252
  e2:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Stop();
  e6:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Stop>
			
	I2C_Init();
  ea:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Init>
	I2C_Start();
  ee:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_Start>
	I2C_Send_Data(ADDRESS_WITH_WRITE);
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Send_Data(0x13);	//
  f8:	83 e1       	ldi	r24, 0x13	; 19
  fa:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Send_Data(0xFF);	// sets all port to HIGH
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
	I2C_Stop();
 104:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Stop>
 108:	08 95       	ret

0000010a <main>:

    while(1)
    {
	
		//turn_all_HIGH();	
		turn_A_HIGH_B_LOW();
 10a:	0e 94 48 00 	call	0x90	; 0x90 <turn_A_HIGH_B_LOW>
	
		I2C_Init();
 10e:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Init>
		I2C_Start();
 112:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_Start>
		I2C_Send_Data(ADDRESS_WITH_WRITE);
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
		I2C_Send_Data(0x12);			//
 11c:	82 e1       	ldi	r24, 0x12	; 18
 11e:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>

		I2C_Start();
 122:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_Start>
		I2C_Send_Data(ADDRESS_WITH_READ);
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	0e 94 cd 00 	call	0x19a	; 0x19a <I2C_Send_Data>
		data = I2C_Read_Data(1);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <I2C_Read_Data>
 132:	c8 2f       	mov	r28, r24
		I2C_Stop();
 134:	0e 94 c5 00 	call	0x18a	; 0x18a <I2C_Stop>

		USART_Transmit(data);
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	9a e7       	ldi	r25, 0x7A	; 122
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x3a>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x44>
 14e:	00 00       	nop
 150:	dc cf       	rjmp	.-72     	; 0x10a <main>

00000152 <init_telemetry>:
}


void init_telemetry()
{
	USART_Init();
 152:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <USART_Init>
 156:	08 95       	ret

00000158 <send_telemetry>:
}

void send_telemetry(uint8_t data)
{
	USART_Transmit(data);
 158:	0e 94 ff 00 	call	0x1fe	; 0x1fe <USART_Transmit>
 15c:	08 95       	ret

0000015e <I2C_Init>:
ï»¿#include "twi.h"


void I2C_Init(void)
{
	TWBR = BIT_RATE;
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	init_telemetry();
 164:	0e 94 a9 00 	call	0x152	; 0x152 <init_telemetry>
	send_telemetry(I2C_STATUS);
 168:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 16c:	0e 94 ac 00 	call	0x158	; 0x158 <send_telemetry>
 170:	08 95       	ret

00000172 <I2C_Start>:
}


void I2C_Start(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_START_Condition|TWI_Enable;
 172:	84 ea       	ldi	r24, 0xA4	; 164
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <I2C_Start+0x6>
	send_telemetry(I2C_STATUS);
 180:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 184:	0e 94 ac 00 	call	0x158	; 0x158 <send_telemetry>
 188:	08 95       	ret

0000018a <I2C_Stop>:
}


void I2C_Stop(void)
{
	TWCR = TWI_Interrupt_Flag|TWI_STOP_Condition|TWI_Enable;
 18a:	84 e9       	ldi	r24, 0x94	; 148
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	send_telemetry(I2C_STATUS);
 190:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 194:	0e 94 ac 00 	call	0x158	; 0x158 <send_telemetry>
 198:	08 95       	ret

0000019a <I2C_Send_Data>:
}


void I2C_Send_Data(unsigned char data)
{
	TWDR = data;					
 19a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = TWI_Interrupt_Flag|TWI_Enable;
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(WAIT_UNTIL_TWINT_SET){}
 1a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a8:	88 23       	and	r24, r24
 1aa:	e4 f7       	brge	.-8      	; 0x1a4 <I2C_Send_Data+0xa>
	send_telemetry(I2C_STATUS);
 1ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1b0:	0e 94 ac 00 	call	0x158	; 0x158 <send_telemetry>
 1b4:	08 95       	ret

000001b6 <I2C_Read_Data>:

char err1=0;// ÑÑÐ´Ð° Ð²ÐµÑÐ½ÐµÐ¼ Ð¾ÑÐ¸Ð±ÐºÑ
#define TW_MR_DATA_ASK 0x50 // ÐÐµÐ´ÑÑÐ¸Ð¹ Ð¿ÑÐ¸Ð½ÑÐ» Ð´Ð°Ð½Ð½ÑÐµ Ð¸ Ð¿ÐµÑÐµÐ´Ð°Ð» Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ¶Ð´ÐµÐ½Ð¸Ðµ

unsigned char I2C_Read_Data(uint8_t END)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
	/**/
	if(END == 1){
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <I2C_Read_Data+0x10>
		TWCR = (1<<TWINT)|(1<<TWEN);
 1be:	84 e8       	ldi	r24, 0x84	; 132
 1c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <I2C_Read_Data+0x16>
	} else{
		TWCR = TWI_Interrupt_Flag|TWI_Enable|TWI_Enable_Acknowledge;
 1c6:	84 ec       	ldi	r24, 0xC4	; 196
 1c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	}
	while(WAIT_UNTIL_TWINT_SET){}		
 1cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d0:	88 23       	and	r24, r24
 1d2:	e4 f7       	brge	.-8      	; 0x1cc <I2C_Read_Data+0x16>
	send_telemetry(TWDR);							
 1d4:	cb eb       	ldi	r28, 0xBB	; 187
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
 1d8:	88 81       	ld	r24, Y
 1da:	0e 94 ac 00 	call	0x158	; 0x158 <send_telemetry>
	return TWDR;
 1de:	88 81       	ld	r24, Y
	while(!(TWCR & (1<<TWINT)));//Ð¿Ð¾Ð´Ð¾Ð¶Ð´ÐµÐ¼ Ð¿Ð¾ÐºÐ° ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑÑ TWIN
	if ((TWSR & 0xF8) != TW_MR_DATA_ASK)  err1=1;
	else err1=0;
	return TWDR;
	*/	
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <USART_Init>:
{
	uint8_t DataByte;
	while (( UCSR0A & (1<<RXC0)) == 0) {}; // Do nothing until data have been received
	DataByte = UDR0 ;
	return DataByte;
}
 1e6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1ea:	87 e6       	ldi	r24, 0x67	; 103
 1ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1f6:	88 e1       	ldi	r24, 0x18	; 24
 1f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1fc:	08 95       	ret

000001fe <USART_Transmit>:

void USART_Transmit(uint8_t data)
{
	while (( UCSR0A & (1<<UDRE0)) == 0) {}; // Do nothing until UDR is ready
 1fe:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 202:	95 ff       	sbrs	r25, 5
 204:	fc cf       	rjmp	.-8      	; 0x1fe <USART_Transmit>
	UDR0 = data;
 206:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
